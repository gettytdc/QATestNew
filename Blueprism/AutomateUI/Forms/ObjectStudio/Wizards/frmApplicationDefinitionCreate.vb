Imports System.IO
Imports AutomateControls
Imports BluePrism.BPCoreLib.Collections
Imports BluePrism.AutomateAppCore
Imports BluePrism.AutomateAppCore.Utility
Imports BluePrism.AutomateProcessCore
Imports BluePrism.AMI
Imports BluePrism.ApplicationManager.AMI
Imports BluePrism.AutomateAppCore.Groups
Imports BluePrism.BPCoreLib
Imports BluePrism.BPCoreLib.DependencyInjection

''' <summary>
''' The wizard presented in Application Modeller for creating the application
''' definition - i.e. specifying the type of application and all the various
''' parameters relevant to it (e.g. path to executable).
''' 
''' The wizard is presented on first creation, and can also be re-run later, in which
''' case the previous settings are remembered.
''' 
''' This class also provides Shared methods for creating and reading Panels which
''' represent application parameter values, for use by frmIntegrationAssistant.
''' </summary>
Friend Class frmApplicationDefinitionCreate

    ''' <summary>
    ''' The object name
    ''' </summary>
    Private mObjectName As String

    ''' <summary>
    ''' Constructor.
    ''' </summary>
    ''' <param name="objName">The object name.</param>
    ''' <param name="parent">The parent object</param>
    Public Sub New(ByVal objName As String, ByVal parent As KeyValuePair(Of Guid, String))
        MyBase.New()
        Me.InitializeComponent()

        mObjectName = objName
        mParentObject = parent

        LoadParents()
        UnSetFinishButton()

        Title = ApplicationProperties.ApplicationModellerName
        Text = String.Format(My.Resources.frmApplicationDefinitionCreate_0Wizard, ApplicationProperties.ApplicationModellerName)
        lblConclusion.Text = My.Resources.frmApplicationDefinitionCreate_WizardComplete & ChrW(13) & ChrW(10) & ChrW(13) & ChrW(10) & String.Format(My.Resources.frmApplicationDefinitionCreate_ClickFinishToStartThe0, ApplicationProperties.ApplicationModellerName)
        objBluebar.Title = ApplicationProperties.ApplicationModellerName
    End Sub

    ''' <summary>
    ''' A stack of pages viewed in this wizard. Navigated backwards as the user uses
    ''' the back button.
    ''' </summary>
    Private mBackPages As New Stack(Of Panel)

    ''' <summary>
    ''' A stack of pages in the forward navigation history. When the user clicks back
    ''' we remove them from the backward stack and place them on the forward stack.
    ''' </summary>
    Private mForwardPages As New Stack(Of Panel)

    ''' <summary>
    ''' The application definition generated by this wizard. This value can be read
    ''' at the end of the wizard, if the dialog result is DialogResult.OK.
    ''' 
    ''' Otherwise, returns Nothing.
    ''' </summary>
    Public ReadOnly Property ApplicationDefinition() As clsApplicationDefinition
        Get
            If Me.DialogResult = System.Windows.Forms.DialogResult.OK Then
                Return mApplicationDefinition
            Else
                Return Nothing
            End If
        End Get
    End Property
    Private mApplicationDefinition As New clsApplicationDefinition

    ''' <summary>
    ''' The 'parent' object hosting the shared application model (or nothing if this
    ''' object contains it's own model definition)
    ''' </summary>
    Public Property ParentObject() As KeyValuePair(Of Guid, String)
        Get
            If Me.DialogResult = System.Windows.Forms.DialogResult.OK Then
                Return mParentObject
            Else
                Return Nothing
            End If
        End Get
        Set(ByVal value As KeyValuePair(Of Guid, String))
            mParentObject = value
        End Set
    End Property
    Private mParentObject As New KeyValuePair(Of Guid, String)(Guid.Empty, Nothing)

    ''' <summary>
    ''' A prototype application definition, from which suggested answers to the
    ''' questions will be provided.
    ''' 
    ''' This is entirely optional, and indeed is of dubious benefit.
    ''' 
    ''' This object will not be modified by the wizard.
    ''' </summary>
    ''' <remarks>See also PrototypeName</remarks>
    Public Property PrototypeApplicationDefinition() As clsApplicationDefinition
        Get
            Return mPrototypeApplicationDefinition
        End Get
        Set(ByVal value As clsApplicationDefinition)
            mPrototypeApplicationDefinition = value.Clone
            mApplicationDefinition = mPrototypeApplicationDefinition
        End Set
    End Property
    Private mPrototypeApplicationDefinition As clsApplicationDefinition

    ''' <summary>
    ''' Default name given to the application in the wizard.
    ''' </summary>
    ''' <remarks>See also PrototypeApplicationDefinition</remarks>
    Public Property PrototypeName() As String
        Get
            Return mPrototypeName
        End Get
        Set(ByVal value As String)
            mPrototypeName = value
        End Set
    End Property
    Private mPrototypeName As String


    Protected Overrides Sub BackPage()
        Me.UnSetFinishButton()

        If mBackPages.Count > 0 Then
            mForwardPages.Push(MyBase.CurrentPage)
            ShowPage(mBackPages.Pop)
        End If
        btnBack.Enabled = mBackPages.Count > 0
        btnNext.Text = My.Resources.frmApplicationDefinitionCreate_Next
    End Sub

    Protected Overrides Sub ShowPage(ByVal objPage As Panel)
        MyBase.ShowPage(objPage)

        For Each c As Control In objPage.Controls
            If TypeOf c Is TextBox Then c.Select()
        Next
    End Sub

    ''' <summary>
    ''' Gets the first matching parameter from the supplied application info tree
    ''' that matches the supplied prototype (in terms of name and type).
    ''' </summary>
    ''' <param name="model">The parameter whose corresponding pair is sought.</param>
    ''' <param name="rootType">The root application type from which to start
    ''' searching. The search is recursive down the tree of sub applications.</param>
    ''' <returns>Returns the first matching parameter found, or Nothing if no such
    ''' parameter exists.</returns>
    Private Function GetCorrespondingParameter(ByVal model As clsApplicationParameter, ByVal rootType As clsApplicationTypeInfo) As clsApplicationParameter

        'Check each parameter of the root application
        For Each p As clsApplicationParameter In rootType.Parameters
            If (p.Name = model.Name) AndAlso (p.ParameterType = model.ParameterType) Then
                Return p
            End If
        Next

        'If that yields no result then check each sub application in turn
        Dim retval As clsApplicationParameter
        For Each app As clsApplicationTypeInfo In rootType.SubTypes
            retval = GetCorrespondingParameter(model, app)
            If Not retval Is Nothing Then Return retval
        Next

        Return Nothing
    End Function

    ''' <summary>
    ''' The application type chosen by the user in the first step of the wizard.
    ''' </summary>
    Private mChosenApplication As clsApplicationTypeInfo

    ''' <summary>
    ''' Radio button which encapsulates an application type
    ''' </summary>
    Private Class AppTypeRadioButton : Inherits StyledRadioButton
        Sub New(ByVal host As frmApplicationDefinitionCreate, ByVal tp As clsApplicationTypeInfo)
            Me.Text = tp.Name
            Me.Tag = tp
            AddHandler CheckedChanged, AddressOf host.HandleApplicationRadioChecked
        End Sub
    End Class

    ''' <summary>
    ''' Panel which encapsulates a list of application types in the form of flowed
    ''' radio buttons
    ''' </summary>
    Private Class AppTypePanel : Inherits Panel
        Private mFlowPane As FullWidthFlowLayoutScrollPane

        Sub New(ByVal host As frmApplicationDefinitionCreate)

            With host.pnlApplicationType
                Me.Location = .Location
                Me.Size = .Size
                Me.Anchor = .Anchor
                Me.Text = .Text
            End With

            Dim l As New Label()
            With host.lblAppType
                l.Location = .Location
                l.Size = .Size
                l.Anchor = .Anchor
                l.Text = .Text
                Controls.Add(l)
            End With

            mFlowPane = New FullWidthFlowLayoutScrollPane()
            With host.flowAppType
                mFlowPane.Location = .Location
                mFlowPane.Size = .Size
                mFlowPane.Anchor = .Anchor
                mFlowPane.AutoScroll = .AutoScroll
                Controls.Add(mFlowPane)
            End With

        End Sub

        ReadOnly Property AppTypeRadios() As ControlCollection
            Get
                Return mFlowPane.FlowedControls
            End Get
        End Property

        Public ReadOnly Property SelectedApplicationType() As clsApplicationTypeInfo
            Get
                For Each rb As StyledRadioButton In mFlowPane.FlowedControls
                    If rb.Checked Then Return TryCast(rb.Tag, clsApplicationTypeInfo)
                Next
                Return Nothing
            End Get
        End Property

    End Class

    ''' <summary>
    ''' Populates the list of application types on the application types panel.
    ''' </summary>
    ''' <param name="appTypes">The parent application type. Each of the sub types
    ''' will be listed. There must be at least one subtype.</param>
    Private Function CreateAppTypePanel(
     ByVal appTypes As List(Of clsApplicationTypeInfo)) As Panel

        ' We need to create a new panel each time using the designed panel as
        ' a template because reasons.
        Dim p As New AppTypePanel(Me)

        ' Save the app types that we're displaying into our new panel
        p.Tag = appTypes

        ' Store the current app type and all of its ancestors into a set. We can then
        ' check each of our displayed types to see if that matches the current types
        ' applied to the prototype definition.
        Dim defn As clsApplicationDefinition = PrototypeApplicationDefinition
        Dim currTypes As New clsSet(Of clsApplicationTypeInfo)
        If defn IsNot Nothing Then
            Dim tp As clsApplicationTypeInfo = defn.ApplicationInfo
            While tp IsNot Nothing
                currTypes.Add(tp)
                tp = tp.ParentType
            End While
        End If

        p.AppTypeRadios.Clear()
        Dim checkedOne As Boolean = False
        For Each app As clsApplicationTypeInfo In appTypes
            If app.Hidden Then Continue For
            Dim rad As New AppTypeRadioButton(Me, app)
            rad.Margin = New Padding(3, 5, 3, 3)
            p.AppTypeRadios.Add(rad)
            If currTypes.Contains(app) Then rad.Checked = True : checkedOne = True
        Next

        ' If we didn't check any radio buttons on the way in, just check the first
        If Not checkedOne AndAlso p.AppTypeRadios.Count > 0 Then _
         DirectCast(p.AppTypeRadios(0), StyledRadioButton).Checked = True

        Return p

    End Function

    Private Sub HandleApplicationRadioChecked(ByVal sender As Object, ByVal e As EventArgs)
        Dim appType As clsApplicationTypeInfo = CType(CType(sender, Control).Tag, clsApplicationTypeInfo)

        'If no application sub-types or application parameters then this is the last step
        Dim noSubTypes As Boolean = (appType.SubTypes Is Nothing) OrElse (appType.SubTypes.Count = 0)
        Dim noParameters As Boolean = (appType.Parameters Is Nothing) OrElse (appType.Parameters.Count = 0)
        If noSubTypes AndAlso noParameters Then
            SetFinishButton()
        Else
            UnSetFinishButton()
        End If
    End Sub

    ''' <summary>
    ''' Handler for the sizechanged event on the parameter panel
    ''' </summary>
    Private Shared Sub HandleParameterPageSizeChanged(ByVal sender As Object, ByVal e As EventArgs)
        'The intention here is to adjust the max size of the label to match the width
        'of its containing panel, and to adjust the input control underneath it according
        'to its new height (which may have changed following the change to the maxwidth).
        Dim parentPanel As Panel = TryCast(sender, Panel)
        If parentPanel IsNot Nothing Then
            Dim labelBottom As Integer = -1
            For Each c As Control In parentPanel.Controls
                If TypeOf c Is Label Then
                    CType(c, Label).MaximumSize = New Size(parentPanel.Width - 16, Integer.MaxValue)
                    labelBottom = c.Bottom
                    Exit For
                End If
            Next

            If labelBottom > -1 Then
                For Each c As Control In parentPanel.Controls
                    If Not TypeOf c Is Label Then
                        c.Top = labelBottom
                    End If
                Next
            End If

            'Resize panel down to 8 pixels within the bottom of the last control
            RemoveHandler parentPanel.SizeChanged, AddressOf HandleParameterPageSizeChanged
            Dim lowestBottom As Integer = -1
            For Each c As Control In parentPanel.Controls
                If c.Bottom > lowestBottom Then
                    lowestBottom = c.Bottom
                End If
            Next
            parentPanel.Height = lowestBottom + 16
            AddHandler parentPanel.SizeChanged, AddressOf HandleParameterPageSizeChanged
        End If
    End Sub

    ''' <summary>
    ''' Creates a page corresponding to the supplied parameter.
    ''' </summary>
    ''' <param name="param">The parameter to represent.</param>
    ''' <returns>Returns the newly created page.</returns>
    ''' <remarks>This is also used by frmIntegrationAssistant, where the panels are
    ''' stacked in a single page.</remarks>
    Public Shared Function CreatePageForParameter(ByVal param As clsApplicationParameter) As Panel
        Return CreatePageForParameter(param, Nothing, False)
    End Function

    ''' <summary>
    ''' Creates a Panel corresponding to the supplied parameter.
    ''' </summary>
    ''' <param name="param">The parameter to represent.</param>
    ''' <param name="changeHandler">An event handler that listens for control changed
    ''' events.</param>
    ''' <param name="readOnly">True to make the value read-only.</param>
    ''' <returns>The newly created panel.</returns>
    ''' <remarks>This is also used by frmIntegrationAssistant, where the panels are
    ''' stacked in a single page.</remarks>
    Public Shared Function CreatePageForParameter(ByVal param As clsApplicationParameter, ByVal changeHandler As EventHandler, ByVal [readOnly] As Boolean) As Panel
        Dim p As New Panel
        p.Tag = param

        Dim enableParameter As Boolean = param.Enabled AndAlso (Not [readOnly])

        'Create the label instructing the user
        Dim l As New Label
        l.AutoSize = True
        l.Text = param.HelpText
        l.Location = New Point(8, 8)
        l.Width = p.Width - 16
        l.MaximumSize = New Size(l.Width, Integer.MaxValue)
        l.Anchor = AnchorStyles.Top Or AnchorStyles.Left Or AnchorStyles.Right
        l.Font = New Font(l.Font, FontStyle.Regular)
        l.Text = param.HelpText
        p.Controls.Add(l)

        Const spacer As Integer = 4

        'Depending on the parameter type, add further controls for user input
        Select Case param.ParameterType
            Case clsApplicationParameter.ParameterTypes.File
                p.Controls.Remove(l)
                Dim pf As New ctlPathFinder
                pf.HintText = param.HelpText
                pf.Filter = param.FileExtensionFilter
                If param.FileExtensionFilter.Contains("exe") OrElse param.FileExtensionFilter.Contains("jar") Then
                    pf.InitialDirectory = clsFileSystem.ProgramFilesDirectory
                Else
                    pf.InitialDirectory = clsFileSystem.MyDocumentsDirectory
                End If
                pf.txtFile.Text = param.Value
                pf.txtFile.ReadOnly = Not enableParameter
                pf.btnBrowse.Enabled = enableParameter
                pf.Location = l.Location
                pf.CheckFileExists = param.CheckFileExists
                pf.Anchor = AnchorStyles.Top Or AnchorStyles.Left Or AnchorStyles.Right
                pf.Width = p.Width - 4 * spacer
                p.Controls.Add(pf)
                p.Controls.Remove(l)
                pf.BringToFront()
                AddHandler pf.PathTextChanged, changeHandler
            Case clsApplicationParameter.ParameterTypes.List
                Dim cb As New ComboBox
                cb.Location = New Point(l.Left, l.Bottom + spacer)
                cb.Size = New Size(p.Width - 2 * spacer - cb.Left, p.Height - 2 * spacer - cb.Top)
                cb.Anchor = AnchorStyles.Top Or AnchorStyles.Left Or AnchorStyles.Right
                cb.DropDownStyle = ComboBoxStyle.DropDownList
                cb.MaxDropDownItems = 30
                Dim values As List(Of String)
                If param.FriendlyValues IsNot Nothing Then
                    values = param.FriendlyValues
                Else
                    values = param.Values
                End If
                For Each value As String In values
                    cb.Items.Add(value)
                Next
                cb.SelectedIndex = param.Values.IndexOf(param.Value)
                cb.Enabled = enableParameter
                p.Controls.Add(cb)
                cb.BringToFront()
                cb.Select()
                AddHandler cb.SelectedIndexChanged, changeHandler
            Case clsApplicationParameter.ParameterTypes.Boolean
                'Create checkbox for boolean input
                Dim ch As New CheckBox
                ch.Bounds = l.Bounds
                ch.Anchor = l.Anchor
                ch.Text = param.HelpText
                p.Controls.Remove(l)
                p.Controls.Add(ch)
                ch.BringToFront()
                Dim Value As Boolean
                Boolean.TryParse(param.Value, Value)
                ch.Checked = Value
                ch.Enabled = enableParameter
                AddHandler ch.CheckStateChanged, changeHandler
            Case clsApplicationParameter.ParameterTypes.Number
                'Create textbox for number input
                Dim t As New ctlProcessNumber()
                t.Location = New Point(l.Left, l.Bottom + spacer)
                t.Width = p.Width - 8 - t.Left
                t.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right
                Dim decVal As Decimal
                Decimal.TryParse(param.Value, decVal)
                t.Value = decVal
                t.ReadOnly = Not enableParameter
                p.Controls.Add(t)
                t.Select()
                p.Size = New Size(400, t.Bottom + 8)
                t.BringToFront()
                AddHandler t.TextChanged, changeHandler
            Case clsApplicationParameter.ParameterTypes.Timespan
                Dim t As New ctlProcessTimespan()
                t.Location = New Point(l.Left, l.Bottom + spacer)
                t.Width = p.Width - 8 - t.Left
                t.Height = 30
                t.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right
                Dim timespan As TimeSpan = TimeSpan.Zero
                Dim numSeconds As Integer
                If Integer.TryParse(param.Value, numSeconds) Then
                    timespan = TimeSpan.FromSeconds(numSeconds)
                End If
                t.Value = timespan
                t.txtDays.ReadOnly = Not enableParameter
                t.txtHours.ReadOnly = Not enableParameter
                t.txtMins.ReadOnly = Not enableParameter
                t.txtSecs.ReadOnly = Not enableParameter
                p.Controls.Add(t)
                t.Select()
                p.Size = New Size(400, t.Bottom + 8)
                t.BringToFront()
                AddHandler t.Changed, changeHandler
            Case Else 'Includes string type
                'Create textbox for string input
                Dim t As New Textboxes.StyledTextBox()
                t.Location = New Point(l.Left, l.Bottom + spacer)
                t.Width = p.Width - 8 - t.Left
                t.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right
                t.Text = param.Value
                t.ReadOnly = Not enableParameter
                p.Controls.Add(t)
                t.Select()
                p.Size = New Size(400, t.Bottom + 8)
                t.BringToFront()
                AddHandler t.TextChanged, changeHandler
        End Select


        AddHandler p.SizeChanged, AddressOf HandleParameterPageSizeChanged
        Return p
    End Function

    ''' <summary>
    ''' Stores the user-selected value in the supplied panel (which must have been
    ''' created by CreatePageForParameter) back into the application parameter which
    ''' was originally supplied and stored as the Panel's Tag.
    ''' </summary>
    ''' <param name="p">The panel to process.</param>
    ''' <remarks>This is also used by frmIntegrationAssistant.</remarks>
    Public Shared Sub StoreParameterFromPanel(ByVal p As Panel)
        Dim param As clsApplicationParameter = CType(p.Tag, clsApplicationParameter)

        Select Case param.ParameterType
            Case clsApplicationParameter.ParameterTypes.String, clsApplicationParameter.ParameterTypes.Number
                For Each c As Control In p.Controls
                    If TypeOf c Is TextBox Then
                        param.Value = c.Text
                    End If
                Next
            Case clsApplicationParameter.ParameterTypes.File
                For Each c As Control In p.Controls
                    If TypeOf c Is ctlPathFinder Then
                        param.Value = CType(c, ctlPathFinder).ChosenFile
                    End If
                Next
            Case clsApplicationParameter.ParameterTypes.List
                For Each c As Control In p.Controls
                    If TypeOf c Is ComboBox Then
                        Dim cb As ComboBox = CType(c, ComboBox)
                        If cb.SelectedItem IsNot Nothing Then
                            Dim s As String = CStr(cb.SelectedItem)
                            If param.FriendlyValues IsNot Nothing Then
                                param.Value = param.Values(param.FriendlyValues.IndexOf(s))
                            Else
                                param.Value = s
                            End If
                        End If
                    End If
                Next

            Case clsApplicationParameter.ParameterTypes.Boolean
                For Each c As Control In p.Controls
                    If TypeOf c Is CheckBox Then
                        Dim ch As CheckBox = CType(c, CheckBox)
                        param.Value = ch.Checked.ToString()
                    End If
                Next

            Case clsApplicationParameter.ParameterTypes.Timespan
                For Each c As Control In p.Controls
                    If TypeOf c Is ctlProcessTimespan Then
                        Dim ch As ctlProcessTimespan = CType(c, ctlProcessTimespan)
                        param.Value = CType(ch.Value, TimeSpan).TotalSeconds.ToString()
                    End If
                Next
        End Select
    End Sub


    ''' <summary>
    ''' Validates the user input on the supplied page.
    ''' </summary>
    ''' <param name="page">The page to check.</param>
    ''' <param name="sErr">In the event of a problem (False returned) this contains
    ''' a description of it.</param>
    ''' <returns>Returns True if validation is ok; False if a mistake exists.</returns>
    Private Function ValidatePage(ByVal page As Panel, ByRef sErr As String) As Boolean
        Select Case True

            Case (TypeOf page.Tag Is clsApplicationParameter)
                StoreParameterFromPanel(page)
                Dim param As clsApplicationParameter = CType(page.Tag, clsApplicationParameter)

                'Check for null values
                If param.Value = "" Then
                    If Not param.AcceptNullValue Then
                        sErr = My.Resources.frmApplicationDefinitionCreate_AnEmptyValueIsNotPermittedHere
                        Return False
                    End If
                Else
                    Select Case param.ParameterType
                        Case clsApplicationParameter.ParameterTypes.File
                            'Check for files which do not exist
                            If param.CheckFileExists AndAlso (Not File.Exists(param.Value)) AndAlso Not Me.CommandExistsInSystemPath(param.Value) Then
                                If Not param.Value.StartsWith("<") OrElse Not param.Value.EndsWith(">") Then
                                    sErr = My.Resources.frmApplicationDefinitionCreate_SuppliedValueDoesNotRepresentAFileOnDiskOrACommandInTheSystemPath
                                    Return False
                                End If
                            End If
                        Case clsApplicationParameter.ParameterTypes.Number
                            Dim result As Decimal
                            If Not Decimal.TryParse(param.Value, result) Then
                                sErr = My.Resources.frmApplicationDefinitionCreate_SuppliedValueDoesNotRepresentAValidNumber
                                Return False
                            End If
                    End Select
                End If

                Return True
            Case (TypeOf page.Tag Is List(Of clsApplicationTypeInfo))
                'Nothing to validate on an app type page
                Return True

            Case Else
                Debug.Assert(False, "Unexpected configuration")
                Return False

        End Select
    End Function


    ''' <summary>
    ''' Checks to see if the supplied command exists in the system path.
    ''' </summary>
    ''' <param name="command">The command to check. File extension ".exe" is
    ''' optional.</param>
    ''' <returns>Returns True if the command exists in the path, False otherwise.
    ''' </returns>
    ''' <remarks>TODO - Is there a better way to implement this function?</remarks>
    Private Function CommandExistsInSystemPath(ByVal command As String) As Boolean
        If Not command.EndsWith(".exe") Then command &= ".exe"

        Dim pathDirectories() As String = Split(Environment.GetEnvironmentVariable("PATH"), ";")

        For Each folder As String In pathDirectories
            If File.Exists(folder & "\" & command) Then
                Return True
            End If
        Next

        Return False
    End Function


    ''' <summary>
    ''' Overridden from base class.
    ''' </summary>
    Protected Overrides Sub UpdateNavigation()

        ' Check parent object selected when sharing models
        If rbShared.Checked AndAlso cmbParentObject.SelectedItem Is Nothing Then
            UserMessage.Show(My.Resources.frmApplicationDefinitionCreate_PleaseSelectAParentObject)
            Exit Sub
        End If

        Try

            UpdatePanelTextToProcessOrObject(WizardType.BusinessObject, Me.pnlApplicationName)

            'Check whether we are at the end of the wizard, and if so save everything
            If (MyBase.GetStep >= MyBase.GetMaxSteps) Then
                mBackPages.Push(MyBase.CurrentPage)
                For Each p As Panel In mBackPages
                    'todo - record app type choices
                    Select Case True
                        Case (TypeOf p.Tag Is clsApplicationParameter)
                            StoreParameterFromPanel(p)
                    End Select
                Next

                If rbNew.Checked Then
                    ' Initialise new model definition
                    mParentObject = New KeyValuePair(Of Guid, String)(Guid.Empty, Nothing)
                    mApplicationDefinition.ApplicationInfo = mChosenApplication
                    mApplicationDefinition.RootApplicationElement.Name = txtAppName.Text.Trim
                ElseIf rbShared.Checked Then
                    ' Get model definition from selected parent
                    Dim i As ComboBoxItem = CType(cmbParentObject.SelectedItem, ComboBoxItem)
                    mParentObject = New KeyValuePair(Of Guid, String)(New Guid(i.Tag.ToString()), i.Text)
                    mApplicationDefinition = New clsApplicationDefinition()
                Else
                    ' Create blank application model
                    mParentObject = New KeyValuePair(Of Guid, String)(Guid.Empty, Nothing)
                    mApplicationDefinition = New clsApplicationDefinition()
                End If

                Me.DialogResult = System.Windows.Forms.DialogResult.OK
                Me.Close()
                Exit Sub
            End If


            Select Case MyBase.GetStep
                Case 0
                    If mParentObject.Value Is Nothing Then
                        ' Ask for an application name
                        rbNew.Checked = True
                        txtAppName.Text = mPrototypeName
                        txtAppName.Select()
                    Else
                        ' Ask for the parent object
                        rbShared.Checked = True
                        cmbParentObject.SelectedIndex = cmbParentObject.FindStringExact(mParentObject.Value)
                    End If
                    ShowPage(pnlApplicationName)
                Case Else

                    'Check that the application name is valid
                    If rbNew.Checked AndAlso txtAppName.Text.Trim.Length = 0 Then
                        UserMessage.Show(My.Resources.frmApplicationDefinitionCreate_PleaseEnterANameForYourApplication)
                        Exit Sub
                    End If

                    'Validate the input on the last viewed page.
                    If Not MyBase.CurrentPage.Tag Is Nothing Then
                        Dim sErr As String = ""
                        If Not Me.ValidatePage(MyBase.CurrentPage, sErr) Then
                            UserMessage.Show(My.Resources.frmApplicationDefinitionCreate_ThatChoiceIsNotValid & sErr)
                            Exit Sub
                        End If
                    End If

                    'Move to next page depending on choice on previous page
                    Dim lastPage As Boolean = False
                    Dim panelToShow As Panel = Nothing
                    Select Case True

                        'We have already presented an application type. Find out the next subtypes to show
                        Case (TypeOf CurrentPage Is AppTypePanel)
                            Dim pan As AppTypePanel = DirectCast(CurrentPage, AppTypePanel)

                            ' find out which apptype was selected
                            Dim appTp As clsApplicationTypeInfo = pan.SelectedApplicationType
                            If appTp IsNot Nothing AndAlso Not appTp.Enabled Then
                                UserMessage.Show(My.Resources.frmApplicationDefinitionCreate_InvalidSelectionThisApplicationTypeIsDisabled)
                                appTp = Nothing
                                Return
                            End If

                            'Move through forward history if appropriate, or clear it
                            If mForwardPages.Count > 0 Then
                                Dim nextForwardPage As Panel = mForwardPages.Pop()
                                Select Case True
                                    Case (TypeOf nextForwardPage.Tag Is List(Of clsApplicationTypeInfo))
                                        If nextForwardPage.Tag Is appTp.SubTypes Then
                                            panelToShow = nextForwardPage
                                        End If
                                    Case (TypeOf nextForwardPage.Tag Is clsApplicationParameter)
                                        If appTp.SubTypes.Count = 0 Then
                                            If appTp.Parameters.Count > 0 AndAlso appTp.Parameters(0) Is nextForwardPage.Tag Then
                                                panelToShow = nextForwardPage
                                            End If
                                        Else
                                            Me.ClearForwardStack()
                                            panelToShow = CreateAppTypePanel(appTp.SubTypes)
                                        End If
                                End Select
                            End If

                            'If nothing suitable found in forward stack to show then generate appropriate page
                            If panelToShow Is Nothing Then
                                Me.ClearForwardStack()
                                Select Case True
                                    Case appTp.SubTypes.Count > 0
                                        'There are more subtypes to show
                                        panelToShow = CreateAppTypePanel(appTp.SubTypes)
                                    Case appTp.Parameters.Count > 0
                                        'The apptype is now chosen. We show the first parameter
                                        mChosenApplication = appTp
                                        Dim ParamToShow As clsApplicationParameter = appTp.Parameters(0)
                                        Me.UpdateParamUsingPrototype(ParamToShow)
                                        panelToShow = CreatePageForParameter(ParamToShow)
                                        If appTp.Parameters.Count = 1 Then lastPage = True
                                    Case appTp.Parameters.Count = 0
                                        'App type now chosen. No parameters so skip to end.
                                        mChosenApplication = appTp
                                        mBackPages.Push(MyBase.CurrentPage)
                                        Me.ShowEndPanel()
                                        Exit Sub
                                End Select
                            End If

                            'We have finished with application types and are dealing with the parameters for the chosen type
                        Case (TypeOf MyBase.CurrentPage.Tag Is clsApplicationParameter)
                            Dim CurrentParameter As clsApplicationParameter = CType(MyBase.CurrentPage.Tag, clsApplicationParameter)
                            Dim CurrentIndex As Integer = mChosenApplication.Parameters.IndexOf(CurrentParameter)
                            If CurrentIndex < mChosenApplication.Parameters.Count - 1 Then
                                'There is another parameter to show
                                Dim ParamToShow As clsApplicationParameter = mChosenApplication.Parameters(CurrentIndex + 1)
                                Me.UpdateParamUsingPrototype(ParamToShow)

                                If Not ParamToShow.Enabled Then
                                    ' Parameter is disabled. Skip this page
                                    Dim originalTag = CurrentPage.Tag
                                    Dim originalPage = CurrentPage
                                    CurrentPage.Tag = ParamToShow
                                    UpdateNavigation()
                                    originalPage.Tag = originalTag
                                    Return
                                End If

                                panelToShow = CreatePageForParameter(ParamToShow)
                                If (CurrentIndex + 1) = mChosenApplication.Parameters.Count - 1 Then
                                    lastPage = True
                                End If
                            Else
                                'End of wizard
                                mBackPages.Push(MyBase.CurrentPage)
                                Me.ShowEndPanel()
                                Exit Sub
                            End If


                            'We have not yet presented any application types, show the root app type
                        Case Else
                            If mForwardPages.Count > 0 Then
                                Debug.Assert(TypeOf mForwardPages.Peek.Tag Is List(Of clsApplicationTypeInfo))
                                panelToShow = mForwardPages.Pop
                            Else
                                Dim info As clsGlobalInfo = If(clsAPC.ProcessLoader IsNot Nothing, clsAPC.ProcessLoader.GetAMIInfo, New clsGlobalInfo)
                                Dim ami As New clsAMI(info)
                                panelToShow = CreateAppTypePanel(ami.GetApplicationTypes())
                            End If
                    End Select

                    Me.Controls.Add(panelToShow)
                    mBackPages.Push(MyBase.CurrentPage)
                    Me.ShowPage(panelToShow)

                    If lastPage Then
                        SetFinishButton()
                    End If

            End Select

        Catch ex As Exception
            UserMessage.Show(My.Resources.frmApplicationDefinitionCreate_UnexpectedError, ex)
        Finally
            'Update the buttons
            btnBack.Enabled = mBackPages.Count > 0
            UpdateNextButtonText()
        End Try
    End Sub

    ''' <summary>
    ''' Updates the supplied parameter with a value taken from the application
    ''' definition prototype.
    ''' </summary>
    ''' <param name="param">The parameter to be updated.</param>
    ''' <remarks>If no prototype exists, then no action is taken</remarks>
    Private Sub UpdateParamUsingPrototype(ByVal param As clsApplicationParameter)
        If Not Me.PrototypeApplicationDefinition Is Nothing Then
            Dim CorrespondingParam As clsApplicationParameter = Me.GetCorrespondingParameter(param, Me.PrototypeApplicationDefinition.ApplicationInfo)
            If Not CorrespondingParam Is Nothing Then
                param.Value = CorrespondingParam.Value
            End If
        End If
    End Sub


    ''' <summary>
    ''' Clears the forward stack of pages, tidying up controls etc
    ''' </summary>
    Private Sub ClearForwardStack()
        For Each p As Panel In mForwardPages
            Me.Controls.Remove(p)
        Next
        mForwardPages.Clear()
    End Sub

    ''' <summary>
    ''' Sets the text on the 'next' button to read "Finish".
    ''' </summary>
    Private Sub SetFinishButton()
        MyBase.SetMaxSteps(MyBase.GetStep)
        MyBase.UpdateNextButtonText()
    End Sub

    ''' <summary>
    ''' Sets the text on the 'next' button to read 'next' instead of 'finish'
    ''' </summary>
    Private Sub UnSetFinishButton()
        'Assume lots of steps. We reduce this when we know the actual number.
        MyBase.SetMaxSteps(Integer.MaxValue)
        MyBase.UpdateNextButtonText()
    End Sub

    ''' <summary>
    ''' Shows the end panel and sets the 'next' button text to "Finish"
    ''' </summary>
    Private Sub ShowEndPanel()
        SetFinishButton()
        Me.Controls.Add(Me.pnlConclusion)
        Me.ShowPage(Me.pnlConclusion)
    End Sub

    ''' <summary>
    ''' Gets the help file
    ''' </summary>
    ''' <returns></returns>
    Public Overrides Function GetHelpFile() As String
        Dim Parameter As clsApplicationParameter = TryCast(MyBase.CurrentPage.Tag, clsApplicationParameter)
        If Parameter IsNot Nothing Then
            Return Parameter.HelpReference
        Else
            Return "frmApplicationDefinitionCreate.htm"
        End If
    End Function

    ''' <summary>
    ''' Opens the help file whether online or offline.
    ''' </summary>
    Public Overrides Sub OpenHelp()
        Try
            OpenHelpFile(Me, GetHelpFile())
        Catch
            UserMessage.Err(My.Resources.CannotOpenOfflineHelp)
        End Try
    End Sub

    ''' <summary>
    ''' Build list of objects suitable for model sharing
    ''' </summary>
    Private Sub LoadParents()
        ' Get list of shareable objects from the database
        Dim groupStore = DependencyResolver.Resolve(Of IGroupStore)()
        Dim tree = groupStore.GetTree(GroupTreeType.Objects,
                                ObjectGroupMember.ShareableAndNotRetired,
                                Nothing,
                                True,
                                False,
                                False)

        For Each member In tree.Root.FlattenedContents(Of clsSortedSet(Of IGroupMember))(False)
            If member.Name <> mObjectName Then
                cmbParentObject.Items.Add(New ComboBoxItem(member.Name, member.IdAsGuid))
            End If
        Next
    End Sub


    ''' <summary>
    ''' Handles radio button changes
    ''' </summary>
    Private Sub ModelType_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) _
     Handles rbNew.CheckedChanged, rbShared.CheckedChanged, rbNone.CheckedChanged

        ' Disable all options
        lblParentObject.Enabled = False
        cmbParentObject.Enabled = False
        lblAppName.Enabled = False
        txtAppName.Enabled = False

        If rbNew.Checked Then
            ' Enable entry of application name & next button
            lblAppName.Enabled = True
            txtAppName.Enabled = True
            UnSetFinishButton()
        ElseIf rbShared.Checked Then
            ' Enable selection of parent object & finish button
            lblParentObject.Enabled = True
            cmbParentObject.Enabled = True
            SetFinishButton()
        Else
            ' Just enable Finish button
            SetFinishButton()
        End If
    End Sub

End Class
