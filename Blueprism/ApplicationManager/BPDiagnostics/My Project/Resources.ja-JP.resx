<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="SampleText" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\SampleText.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="NotEnoughDatatypesInTheColumns" xml:space="preserve">
    <value>T_not enough datatypes in the columns</value>
  </data>
  <data name="CouldNotConnect0" xml:space="preserve">
    <value>T_Could not connect - {0}</value>
  </data>
  <data name="QueryTook0Ms" xml:space="preserve">
    <value>T_Query took {0}ms</value>
  </data>
  <data name="Working" xml:space="preserve">
    <value>T_... working ...</value>
  </data>
  <data name="Model0Entities" xml:space="preserve">
    <value>T_Model: {0} entities</value>
  </data>
  <data name="DISCONNECTED" xml:space="preserve">
    <value>T_>>DISCONNECTED</value>
  </data>
  <data name="FailedToLaunch0" xml:space="preserve">
    <value>T_Failed to launch - {0}</value>
  </data>
  <data name="Exception0" xml:space="preserve">
    <value>T_Exception: T_{0}</value>
  </data>
  <data name="SCRIPTFINISHED" xml:space="preserve">
    <value>T_---SCRIPT FINISHED---</value>
  </data>
  <data name="AbortingErrorDetected" xml:space="preserve">
    <value>T_Aborting, error detected</value>
  </data>
  <data name="Result0" xml:space="preserve">
    <value>T_Result: T_{0}</value>
  </data>
  <data name="Query0" xml:space="preserve">
    <value>T_Query: T_{0}</value>
  </data>
  <data name="InvalidCommand0" xml:space="preserve">
    <value>T_Invalid command {0}</value>
  </data>
  <data name="NoAbort01_equal" xml:space="preserve">
    <value>T_No Abort - '{0}' = '{1}'</value>
  </data>
  <data name="Abort01" xml:space="preserve">
    <value>T_Abort - '{0}' <> '{1}'</value>
  </data>
  <data name="NoAbort01_notEqual" xml:space="preserve">
    <value>T_No Abort - '{0}' <> '{1}'</value>
  </data>
  <data name="Abort" xml:space="preserve">
    <value>T_Abort</value>
  </data>
  <data name="Exiting" xml:space="preserve">
    <value>T_Exiting</value>
  </data>
  <data name="ConfigProblem0" xml:space="preserve">
    <value>T_Config problem: T_{0}</value>
  </data>
  <data name="xError" xml:space="preserve">
    <value>T_Error</value>
  </data>
  <data name="StepSizeMustBePositive" xml:space="preserve">
    <value>T_Step size must be positive</value>
  </data>
  <data name="StepSizeIsTooSmall" xml:space="preserve">
    <value>T_Step size is too small</value>
  </data>
  <data name="InvalidMinimumSize" xml:space="preserve">
    <value>T_Invalid minimum size</value>
  </data>
  <data name="MinSizeIsTooSmall" xml:space="preserve">
    <value>T_Min size is too small</value>
  </data>
  <data name="InvalidMaximumSize" xml:space="preserve">
    <value>T_Invalid maximum size</value>
  </data>
  <data name="MaxSizeIsTooLarge" xml:space="preserve">
    <value>T_Max size is too large</value>
  </data>
  <data name="TargetDirectoryDoesNotExist" xml:space="preserve">
    <value>T_Target directory does not exist</value>
  </data>
  <data name="x0Hours1Minutes2Seconds" xml:space="preserve">
    <value>T_{0} hours, {1} minutes, {2} seconds</value>
  </data>
  <data name="x0" xml:space="preserve">
    <value>T_({0})</value>
  </data>
  <data name="DeliberateCancellation" xml:space="preserve">
    <value>T_Deliberate Cancellation</value>
  </data>
  <data name="FailedCreatingFont0DoYouWantToContinueWithTheNextFont11PressYesToContinueNoToQu" xml:space="preserve">
    <value>T_Failed creating font '{0}'. T_Do you want to continue with the next font?{1}{1}Press Yes to continue, No to quit, Cancel to continue without interruption.</value>
  </data>
  <data name="x012" xml:space="preserve">
    <value>T_{0}({1}, {2})</value>
  </data>
  <data name="TheOutputDirectoryMustBeEmpty" xml:space="preserve">
    <value>T_The output directory must be empty</value>
  </data>
  <data name="XMLFileXmlXmlAllFiles" xml:space="preserve">
    <value>T_XML File (*.xml)|*.xml|All Files (*.*)|*.*</value>
  </data>
  <data name="InvalidResourceUrl" xml:space="preserve">
    <value>T_Invalid resource url </value>
  </data>
  <data name="InvalidCaptureFile" xml:space="preserve">
    <value>T_invalid capture file</value>
  </data>
  <data name="SomethingWentWrong0" xml:space="preserve">
    <value>T_Something went wrong - {0}</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>T_Success</value>
  </data>
  <data name="SourceCaptureFilesExtracted" xml:space="preserve">
    <value>T_Source Capture Files Extracted</value>
  </data>
  <data name="TheOutputDirectoryDoesNotExist" xml:space="preserve">
    <value>T_The output directory does not exist</value>
  </data>
  <data name="DimensionsOfTheStatemaskMustMatchTheSuppliedImage" xml:space="preserve">
    <value>T_Dimensions of the statemask must match the supplied image</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>T_Show</value>
  </data>
  <data name="AttemptNonVerticalSplit" xml:space="preserve">
    <value>T_Attempt non-vertical split</value>
  </data>
  <data name="TestFont" xml:space="preserve">
    <value>T_Test Font</value>
  </data>
  <data name="DoYouWantToTryYourNewFontOnAnAutomaticallyGeneratedSample" xml:space="preserve">
    <value>T_Do you want to try your new font on an automatically-generated sample?</value>
  </data>
  <data name="UnexpectedError0" xml:space="preserve">
    <value>T_Unexpected error - {0}</value>
  </data>
  <data name="AutoTrimTopAndBottom" xml:space="preserve">
    <value>T_Auto-trim top and bottom</value>
  </data>
  <data name="SliceBottomRowTrimOnePixel" xml:space="preserve">
    <value>T_Slice bottom Row (trim one pixel)</value>
  </data>
  <data name="SliceTopRowTrimOnePixel" xml:space="preserve">
    <value>T_Slice top Row (trim one pixel)</value>
  </data>
  <data name="WarningYouShouldOnlyTrimYourFontOnceALLOfYourCharactersHaveBeenAddedAreYouSureY" xml:space="preserve">
    <value>T_Warning - you should only trim your font once ALL of your characters have been added. T_Are you sure you wish to continue?</value>
  </data>
  <data name="SaveFailed" xml:space="preserve">
    <value>T_Save failed - </value>
  </data>
  <data name="LoadFailed" xml:space="preserve">
    <value>T_Load failed - </value>
  </data>
  <data name="CaptureErrorUnexpectedResultType0" xml:space="preserve">
    <value>T_Capture error - unexpected result type {0}</value>
  </data>
  <data name="CaptureFailed0" xml:space="preserve">
    <value>T_Capture failed - {0}</value>
  </data>
  <data name="x0X" xml:space="preserve">
    <value>T_{0}x</value>
  </data>
  <data name="TextColour0" xml:space="preserve">
    <value>T_Text Colour: T_{0}</value>
  </data>
  <data name="FailedToFindTopOfLeftCharacterIn01" xml:space="preserve">
    <value>T_Failed to find top of left character in {0}{1}</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>T_(unknown)</value>
  </data>
  <data name="Error0" xml:space="preserve">
    <value>T_Error - {0}</value>
  </data>
  <data name="ErrorLoadingFontFile0" xml:space="preserve">
    <value>T_Error loading font file - {0}</value>
  </data>
  <data name="InvalidFilePath0" xml:space="preserve">
    <value>T_Invalid file path - {0}</value>
  </data>
  <data name="InvalidColour0" xml:space="preserve">
    <value>T_Invalid colour - {0}</value>
  </data>
  <data name="PleaseFirstSelectSomeFontsToBeTestedUsingTheCheckboxesInTheListAbove" xml:space="preserve">
    <value>T_Please first select some fonts to be tested, using the checkboxes in the list above</value>
  </data>
  <data name="TheSpecifiedDirectoryDoesNotSeemToExist0" xml:space="preserve">
    <value>T_The specified directory does not seem to exist - {0}</value>
  </data>
  <data name="InvalidSize0" xml:space="preserve">
    <value>T_Invalid size - {0}</value>
  </data>
  <data name="ErrorLoadingImage0" xml:space="preserve">
    <value>T_Error loading image - {0}</value>
  </data>
  <data name="InvalidNumberOfRows" xml:space="preserve">
    <value>T_Invalid number of rows</value>
  </data>
  <data name="TrimValueMustBePositive" xml:space="preserve">
    <value>T_Trim value must be positive</value>
  </data>
  <data name="FontHeight0" xml:space="preserve">
    <value>T_Font Height: T_{0}</value>
  </data>
  <data name="SpaceBelow0" xml:space="preserve">
    <value>T_Space Below:  T_{0}</value>
  </data>
  <data name="SpaceAbove0" xml:space="preserve">
    <value>T_Space Above:  T_{0}</value>
  </data>
  <data name="FailedToLoadSnapshot0" xml:space="preserve">
    <value>T_Failed to load snapshot - {0}</value>
  </data>
  <data name="FailedToBrowse0" xml:space="preserve">
    <value>T_Failed to browse - {0}</value>
  </data>
  <data name="UnexpectedErrorPleaseReportThisErrorToBluePrism001" xml:space="preserve">
    <value>T_Unexpected Error. T_Please report this error to Blue Prism.{0}{0}{1}</value>
  </data>
  <data name="x0Version1" xml:space="preserve">
    <value>T_{0} Version {1}</value>
  </data>
  <data name="BluePrismDiscoveryTool" xml:space="preserve">
    <value>T_Blue Prism Discovery Tool</value>
  </data>
  <data name="xSelect" xml:space="preserve">
    <value>T_<select></value>
  </data>
  <data name="SelectTypeFirst" xml:space="preserve">
    <value>T_<select type first></value>
  </data>
  <data name="TargetApplicationDisconnected" xml:space="preserve">
    <value>T_Target application disconnected</value>
  </data>
  <data name="ProcessConnectionFailed0" xml:space="preserve">
    <value>T_Process connection failed - {0}</value>
  </data>
  <data name="ConnectedToProcess0" xml:space="preserve">
    <value>T_Connected to process "{0}"</value>
  </data>
  <data name="NotConnectedToAnApplication" xml:space="preserve">
    <value>T_Not connected to an application.</value>
  </data>
  <data name="DiscoveryIsInProgress0SelectAnElementOrCancelToContinue" xml:space="preserve">
    <value>T_Discovery is in progress.{0}Select an element or cancel to continue.</value>
  </data>
  <data name="LaunchSuccessful" xml:space="preserve">
    <value>T_Launch successful</value>
  </data>
  <data name="FailedToSetUpApplication0" xml:space="preserve">
    <value>T_Failed to set up application - {0}</value>
  </data>
  <data name="DiscoveryFailed_1" xml:space="preserve">
    <value>T_Discovery Failed</value>
  </data>
  <data name="DiscoveryFailed" xml:space="preserve">
    <value>T_Discovery failed</value>
  </data>
  <data name="DiscoveryCancelled" xml:space="preserve">
    <value>T_Discovery cancelled</value>
  </data>
  <data name="DiscoveryResults" xml:space="preserve">
    <value>T_Discovery Results</value>
  </data>
  <data name="Identifier01" xml:space="preserve">
    <value>T_Identifier:{0} - {1}</value>
  </data>
  <data name="ElementType01" xml:space="preserve">
    <value>T_Element type:{0} ({1})</value>
  </data>
  <data name="DiscoverySuccessfulElementOfType0Identified" xml:space="preserve">
    <value>T_Discovery successful - element of type {0} identified</value>
  </data>
  <data name="DiscoveryInProgress" xml:space="preserve">
    <value>T_Discovery in progress...</value>
  </data>
  <data name="SettingsSavedTo0" xml:space="preserve">
    <value>T_Settings Saved to {0}</value>
  </data>
  <data name="PleaseSelectAFont" xml:space="preserve">
    <value>T_Please select a font</value>
  </data>
  <data name="FailedToGetSnapshot0" xml:space="preserve">
    <value>T_Failed to get snapshot - {0}</value>
  </data>
  <data name="FailedToConnect0" xml:space="preserve">
    <value>T_Failed to connect - {0}</value>
  </data>
  <data name="YouMustChooseEitherASessionFileOrASessionID" xml:space="preserve">
    <value>T_You must choose either a session file or a session ID</value>
  </data>
  <data name="TheSpecifiedSessionFileDoesNotSeemToExistOnDisk" xml:space="preserve">
    <value>T_The specified session file does not seem to exist on disk.</value>
  </data>
  <data name="SessionIDMustBeASingleLetterFromAZ" xml:space="preserve">
    <value>T_SessionID must be a single letter from A..Z</value>
  </data>
  <data name="NotConnectedToATerminal" xml:space="preserve">
    <value>T_Not connected to a terminal.</value>
  </data>
  <data name="NoFieldIsSelectedFromTheListPleaseFirstSelectAField" xml:space="preserve">
    <value>T_No field is selected from the list. T_Please first select a field</value>
  </data>
  <data name="OperationFailed0" xml:space="preserve">
    <value>T_Operation failed - {0}</value>
  </data>
  <data name="ChooseSessionFile" xml:space="preserve">
    <value>T_Choose session file</value>
  </data>
  <data name="AllFiles" xml:space="preserve">
    <value>T_All Files (*.*)|*.*</value>
  </data>
  <data name="HummingbirdMainframeSessionFilesHepHep" xml:space="preserve">
    <value>T_Hummingbird Mainframe Session Files (*.hep)|*.hep</value>
  </data>
  <data name="IBMMainframeSessionFilesWsWs" xml:space="preserve">
    <value>T_IBM Mainframe Session Files (*.ws)|*.ws</value>
  </data>
  <data name="LocaleMissing" xml:space="preserve">
    <value>T_Locale Missing</value>
  </data>
  <data name="NotAValidCultureName" xml:space="preserve">
    <value>T_Not a valid culture name.</value>
  </data>
  <data name="FontIdentifierRegexTimeout" xml:space="preserve">
    <value>T_A timeout occurred trying to validate a specified file name. T_{0}</value>
  </data>
</root>