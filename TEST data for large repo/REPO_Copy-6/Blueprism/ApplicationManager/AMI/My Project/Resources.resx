<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NotConnected" xml:space="preserve">
    <value>Not connected</value>
  </data>
  <data name="WindowsApplication" xml:space="preserve">
    <value>Windows Application</value>
  </data>
  <data name="IfNecessaryEnterAnyOptionsSpecificToThisTargetApplicationAsDirectedByBluePrismT" xml:space="preserve">
    <value>If necessary, enter any options specific to this target application, as directed by Blue Prism technical support.</value>
  </data>
  <data name="ProvideTheTimeThatTheObjectWillWaitForTheApplicationToRespondBeforeThrowingAnEx" xml:space="preserve">
    <value>Provide the time that the object will wait for the application to respond before throwing an exception</value>
  </data>
  <data name="SelectTheApplicationManagerMode" xml:space="preserve">
    <value>Select the Application Manager mode</value>
  </data>
  <data name="PleaseEnterTheURLOfYourStartPageAndAnyOtherCommandLineParametersToBeUsedWhenThe" xml:space="preserve">
    <value>Please enter the URL of your start page, and any other command-line parameters to be used when the browser is launched.</value>
  </data>
  <data name="PleaseEnterThePathToYourBrowser" xml:space="preserve">
    <value>Please enter the path to your browser</value>
  </data>
  <data name="IfNotFoundForAttachingYourBrowserMayBeLaunchedAutomaticallyIfDesiredEnterThePat" xml:space="preserve">
    <value>If not found for attaching, your browser may be launched automatically if desired. Enter the path of your browser application, or leave blank to receive an error in this situation instead.</value>
  </data>
  <data name="EnterTheTitleOfTheTargetPageTheWildcardsAreValidAWildcardWillAutomaticallyBeAdd" xml:space="preserve">
    <value>Enter the title of the target page (the wildcards *, ?, # are valid). A * wildcard will automatically be added to the end.</value>
  </data>
  <data name="SessionIdentifier" xml:space="preserve">
    <value>Session Identifier</value>
  </data>
  <data name="PathToSessionFile" xml:space="preserve">
    <value>Path to session file</value>
  </data>
  <data name="RMDInterfacePort" xml:space="preserve">
    <value>RMD Interface Port</value>
  </data>
  <data name="HelpApplicationParametersHtmSessionFile" xml:space="preserve">
    <value>helpApplicationParameters.htm#SessionFile</value>
  </data>
  <data name="PleaseChooseTheAppropriateVariantOfYourAttachmateEmulatorBelow" xml:space="preserve">
    <value>Please choose the appropriate variant of your Attachmate emulator below</value>
  </data>
  <data name="TimeoutIntervalInSecondsDuringWaitOperations" xml:space="preserve">
    <value>Timeout interval (in seconds) during wait operations</value>
  </data>
  <data name="PollingIntervalInMillisecondsDuringWaitOperations" xml:space="preserve">
    <value>Polling interval (in milliseconds) during wait operations</value>
  </data>
  <data name="SessionType" xml:space="preserve">
    <value>Session Type</value>
  </data>
  <data name="CallingConvention" xml:space="preserve">
    <value>Calling Convention</value>
  </data>
  <data name="DLLName" xml:space="preserve">
    <value>DLL Name</value>
  </data>
  <data name="APICodePage" xml:space="preserve">
    <value>API Code Page</value>
  </data>
  <data name="ExcludeHTCComponentsImprovesPerformance" xml:space="preserve">
    <value>Exclude HTC components (improves performance)</value>
  </data>
  <data name="EnableJavaIntegrationTechniques" xml:space="preserve">
    <value>Enable java integration techniques</value>
  </data>
  <data name="OnlyInteractWithElementsOnTheActiveBrowserTab" xml:space="preserve">
    <value>Only interact with elements on the active browser tab</value>
  </data>
  <data name="PleaseEnterTheURLOfYourStartPageAndAnyOtherCommandLineParameters" xml:space="preserve">
    <value>Please enter the URL of your start page, and any other command-line parameters.</value>
  </data>
  <data name="EnterTheWindowTitleOfTheTargetApplicationTheWildcardsAreValid" xml:space="preserve">
    <value>Enter the window title of the target application (the wildcards *, ?, # are valid)</value>
  </data>
  <data name="EnterTheCommandLineParametersIfAnyToBePassedWhenTheSpecifiedExecutableIsLaunched" xml:space="preserve">
    <value>Enter the command line parameters (if any) to be passed, when the specified executable is launched</value>
  </data>
  <data name="EnterTheWorkingDirectoryWhichTheTargetApplicationWillUse" xml:space="preserve">
    <value>Enter the working directory which the target application will use</value>
  </data>
  <data name="EnterTheCommandLineParametersIfAnyToBePassedToTheTargetApplication" xml:space="preserve">
    <value>Enter the command line parameters (if any) to be passed to the target application</value>
  </data>
  <data name="EnterThePathToTheApplicationSJARFileOrUseTheBrowseButton" xml:space="preserve">
    <value>Enter the path to the application's JAR file, or use the Browse button</value>
  </data>
  <data name="RestrictToNonInvasiveAutomationTechniques" xml:space="preserve">
    <value>Disable invasive techniques (hooking)</value>
  </data>
  <data name="EnterThePathToTheApplicationExecutableOrUseTheBrowseButton" xml:space="preserve">
    <value>Enter the path to the application executable, or use the Browse button</value>
  </data>
  <data name="EnterTheWindowsProcessNameOfTheTargetApplication" xml:space="preserve">
    <value>Enter the Windows process name of the target application</value>
  </data>
  <data name="IfNotFoundForAttachingYourApplicationMayBeLaunchedAutomaticallyIfDesiredEnterTh" xml:space="preserve">
    <value>If not found for attaching, your application may be launched automatically if desired. Enter the path of your application executable, or leave blank to receive an error in this situation instead.</value>
  </data>
  <data name="IfNotFoundForAttachingYourApplicationMayBeLaunchedAutomaticallyIfDesiredEn_java" xml:space="preserve">
    <value>If not found for attaching, your application may be launched automatically if desired. Enter the path of your java application, or leave blank to receive an error in this situation instead.</value>
  </data>
  <data name="ABrowserThatIsLaunchedFromAnExecutableFile" xml:space="preserve">
    <value>A browser that is launched from an executable file</value>
  </data>
  <data name="ABrowserWhichIsAlreadyRunning" xml:space="preserve">
    <value>A browser which is already running</value>
  </data>
  <data name="BrowserBasedApplicationChromeFirefox" xml:space="preserve">
    <value>Browser-based Application (Chrome, Firefox or Edge Chromium)</value>
  </data>
  <data name="HostAccessWinHLLAPI" xml:space="preserve">
    <value>HostAccess (WinHLLAPI)</value>
  </data>
  <data name="RocketPASSPORTCOMAPI" xml:space="preserve">
    <value>Rocket PASSPORT (COM API)</value>
  </data>
  <data name="RMDHTTPXML" xml:space="preserve">
    <value>RMD (HTTP/XML)</value>
  </data>
  <data name="NDLActiveConductorHLLAPI" xml:space="preserve">
    <value>NDL Active Conductor (HLLAPI)</value>
  </data>
  <data name="HPTeemtalkEHLLAPI" xml:space="preserve">
    <value>HP Teemtalk (EHLLAPI)</value>
  </data>
  <data name="EricomPowerTermInterConnectHLLAPI" xml:space="preserve">
    <value>Ericom PowerTerm InterConnect (HLLAPI)</value>
  </data>
  <data name="OpenTextHostExplorerFormerlyHummingbirdEHLLAPI" xml:space="preserve">
    <value>OpenText HostExplorer (formerly Hummingbird) (EHLLAPI)</value>
  </data>
  <data name="OpenTextHostExplorerFormerlyHummingbirdCOMAPI" xml:space="preserve">
    <value>OpenText HostExplorer (formerly Hummingbird) (COM API)</value>
  </data>
  <data name="MicroFocusRumbaEHLLAPI" xml:space="preserve">
    <value>Micro Focus Rumba (EHLLAPI)</value>
  </data>
  <data name="MicroFocusReflectionForDesktop16NETAPI" xml:space="preserve">
    <value>Micro Focus Reflection for Desktop 16 (.NET API)</value>
  </data>
  <data name="MicroFocusReflection9XAndEarlierCOMAPI" xml:space="preserve">
    <value>Micro Focus Reflection 9.x and earlier (COM API)</value>
  </data>
  <data name="MicroFocusInfoconnectWinHLLAPI" xml:space="preserve">
    <value>Micro Focus Infoconnect (WinHLLAPI)</value>
  </data>
  <data name="MicroFocusAttachmateExtraXTreme93ATMAPI32" xml:space="preserve">
    <value>Micro Focus Attachmate Extra! X-treme 9.3 (ATMAPI32)</value>
  </data>
  <data name="IBMPersonalCommunicatorCOMAPI" xml:space="preserve">
    <value>IBM Personal Communicator (COM API)</value>
  </data>
  <data name="IBMIAccessEHLLAPI" xml:space="preserve">
    <value>IBM iAccess For Windows (We do not currently support IBM iAccess Client Solutions) (EHLLAPI)</value>
  </data>
  <data name="GenericHLLAPI" xml:space="preserve">
    <value>Generic HLLAPI</value>
  </data>
  <data name="MainframeApplication" xml:space="preserve">
    <value>Mainframe Application</value>
  </data>
  <data name="BrowserBasedApplicationInternetExplorer" xml:space="preserve">
    <value>Browser-based Application (Internet Explorer)</value>
  </data>
  <data name="MyApplicationWillAlreadyBeRunningIWantToAttachToAnExistingInstance" xml:space="preserve">
    <value>My application will already be running - I want to attach to an existing instance</value>
  </data>
  <data name="MyApplicationIsLaunchedFromAnExecutableFile" xml:space="preserve">
    <value>My application is launched from an executable file</value>
  </data>
  <data name="JavaBasedApplication" xml:space="preserve">
    <value>Java-based Application</value>
  </data>
  <data name="IBMPersonalCommunicatorHLLAPI" xml:space="preserve">
    <value>IBM Personal Communicator (HLLAPI)</value>
  </data>
  <data name="DLLEntryPoint" xml:space="preserve">
    <value>DLL Entry Point</value>
  </data>
  <data name="NeoWareLaterWallDataRumbaTerminalEmulatorViaTheHLLAPIInterfaceWithVersion6Rumba" xml:space="preserve">
    <value>NeoWare (later WallData) Rumba terminal emulator, via the HLLAPI interface. With version 6 (Rumba 2000) the working directory must be the one where the emulator's HLLAPI DLLs reside, otherwise attempting to connect results in an 'invalid presentation space' error message.</value>
  </data>
  <data name="PericomLaterHPTeemTalkTerminalEmulatorViaTheHLLAPIInterfaceVersion4OfTeemTalkDo" xml:space="preserve">
    <value>Pericom (later HP) TeemTalk terminal emulator, via the HLLAPI interface. Version 4 of TeemTalk does not work with HLLAPI when using IBM 5250 emulation. (See issue #4976). It is known to work with IBM 3270. The status for other emulation modes on that version is unknown.Support for HLLAPI was completely removed from TeemTalk from version 7 onwards. We have never tested with  versions 5 and 6.</value>
  </data>
  <data name="EricomPowerTermTerminalEmulatorViaStandardHLLAPIInterfaceVersion6IsNotSupported" xml:space="preserve">
    <value>Ericom PowerTerm terminal emulator, via standard HLLAPI interface. Version 6 is not supported due to a flawed HLLAPI implementation. Version 9 is fully supported. The status of versions 7 and 8 is unknown.</value>
  </data>
  <data name="UnableToLoadUnrecognisedApplicationType0" xml:space="preserve">
    <value>Unable to load unrecognised application type {0}</value>
  </data>
  <data name="MissingApplicationTypeID" xml:space="preserve">
    <value>Missing application type ID</value>
  </data>
  <data name="ExecutableFilesExeExe" xml:space="preserve">
    <value>Executable Files (*.exe)|*.exe</value>
  </data>
  <data name="PassportMainframeSessionFilesZwsZws" xml:space="preserve">
    <value>Passport Mainframe Session Files (*.zws)|*.zws</value>
  </data>
  <data name="HummingbirdMainframeSessionFilesHepHep" xml:space="preserve">
    <value>Hummingbird Mainframe Session Files (*.hep)|*.hep</value>
  </data>
  <data name="AttachmateReflectionSettingsFilesRd3xRd5xRd3xRd5x" xml:space="preserve">
    <value>Attachmate Reflection Settings Files (*.rd3x, *.rd5x)|*.rd3x;*.rd5x</value>
  </data>
  <data name="IBMMainframeSessionFilesWsWs" xml:space="preserve">
    <value>IBM Mainframe Session Files (*.ws)|*.ws</value>
  </data>
  <data name="JavaApplicationsJarJar" xml:space="preserve">
    <value>Java Applications (*.jar)|*.jar</value>
  </data>
  <data name="AttachmateReflectionSettingsFilesR2wR2w" xml:space="preserve">
    <value>Attachmate Reflection Settings Files (*.r2w)|*.r2w</value>
  </data>
  <data name="InternalAMIMisconfigurationUnknownMessageType0" xml:space="preserve">
    <value>Internal AMI misconfiguration - unknown message type {0}</value>
  </data>
  <data name="NoTargetApplicationInformationHasBeenSet" xml:space="preserve">
    <value>No target application information has been set</value>
  </data>
  <data name="NotConnected_2" xml:space="preserve">
    <value>Not Connected</value>
  </data>
  <data name="ExternalBluePrismAddressSize" xml:space="preserve">
    <value>External, Blue Prism address size</value>
  </data>
  <data name="ExternalCitrix32BitMode" xml:space="preserve">
    <value>External Citrix 32-bit mode</value>
  </data>
  <data name="ExternalCitrix64BitMode" xml:space="preserve">
    <value>External Citrix 64-bit mode</value>
  </data>
  <data name="ExternalOSAddressSize" xml:space="preserve">
    <value>External, OS address size</value>
  </data>
  <data name="External64BitMode" xml:space="preserve">
    <value>External, 64 bit mode</value>
  </data>
  <data name="External32BitMode" xml:space="preserve">
    <value>External, 32 bit mode</value>
  </data>
  <data name="EmbeddedDefault" xml:space="preserve">
    <value>Embedded (default)</value>
  </data>
  <data name="LocaleVariant0" xml:space="preserve">
    <value>Locale variant [0]</value>
  </data>
  <data name="KeaForHP" xml:space="preserve">
    <value>Kea! for HP</value>
  </data>
  <data name="Kea" xml:space="preserve">
    <value>Kea!</value>
  </data>
  <data name="Rally" xml:space="preserve">
    <value>Rally!</value>
  </data>
  <data name="Extra" xml:space="preserve">
    <value>Extra!</value>
  </data>
  <data name="Enhanced" xml:space="preserve">
    <value>Enhanced</value>
  </data>
  <data name="Standard" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="WindowsAPI" xml:space="preserve">
    <value>Windows API</value>
  </data>
  <data name="CDeclaration" xml:space="preserve">
    <value>C Declaration</value>
  </data>
  <data name="Irma" xml:space="preserve">
    <value>Irma</value>
  </data>
  <data name="ActionTerminateIsNotSupportedForApplicationOfType0" xml:space="preserve">
    <value>Action 'Terminate' is not supported for application of type '{0}'</value>
  </data>
  <data name="CouldNotLoad01" xml:space="preserve">
    <value>Could not load {0} - {1}</value>
  </data>
  <data name="ElementNumber" xml:space="preserve">
    <value>Element Number</value>
  </data>
  <data name="The1basedNumberIndicatingWhichElementOfTheListRegionToActOnDefaultIs1" xml:space="preserve">
    <value>The 1-based number indicating which element of the list region to act on. Default is 1</value>
  </data>
  <data name="ColumnNumber" xml:space="preserve">
    <value>Column Number</value>
  </data>
  <data name="The1basedColumnNumberIndicatingWhichColumnOfTheGridRegionToActOnDefaultIs1" xml:space="preserve">
    <value>The 1-based column number indicating which column of the grid region to act on. Default is 1</value>
  </data>
  <data name="RowNumber" xml:space="preserve">
    <value>Row Number</value>
  </data>
  <data name="The1basedRowNumberIndicatingWhichRowOfTheGridRegionToActOnDefaultIs1" xml:space="preserve">
    <value>The 1-based row number indicating which row of the grid region to act on. Default is 1</value>
  </data>
  <data name="GetWindowAttribute" xml:space="preserve">
    <value>Get Window Attribute</value>
  </data>
  <data name="GetTheCurrentValueOfAWindowAttribute" xml:space="preserve">
    <value>Get the current value of a window attribute.</value>
  </data>
  <data name="AttributeName" xml:space="preserve">
    <value>Attribute Name</value>
  </data>
  <data name="TheNameOfTheAttributeToGet" xml:space="preserve">
    <value>The name of the attribute to get.</value>
  </data>
  <data name="GetAAAttribute" xml:space="preserve">
    <value>Get AA Attribute</value>
  </data>
  <data name="GetTheCurrentValueOfAnActiveAccessibilityAttribute" xml:space="preserve">
    <value>Get the current value of an Active Accessibility attribute.</value>
  </data>
  <data name="GetHTMLAttribute" xml:space="preserve">
    <value>Get HTML Attribute</value>
  </data>
  <data name="GetTheCurrentValueOfAnHTMLAttribute" xml:space="preserve">
    <value>Get the current value of an HTML attribute.</value>
  </data>
  <data name="GetJABAttribute" xml:space="preserve">
    <value>Get JAB Attribute</value>
  </data>
  <data name="GetTheCurrentValueOfAJavaAccessBridgeAttribute" xml:space="preserve">
    <value>Get the current value of a Java Access Bridge attribute.</value>
  </data>
  <data name="GetUIAAttribute" xml:space="preserve">
    <value>Get UIA Attribute</value>
  </data>
  <data name="GetTheCurrentValueOfAUIAutomationAttribute" xml:space="preserve">
    <value>Get the current value of a UI Automation attribute.</value>
  </data>
  <data name="GetBounds" xml:space="preserve">
    <value>Get Bounds</value>
  </data>
  <data name="GetsInformationAboutTheBoundingRectangleOfTheElementInCoordinatesRelativeToThePa" xml:space="preserve">
    <value>Gets information about the bounding rectangle of the element, in coordinates relative to the parent.</value>
  </data>
  <data name="GetRelativeBounds" xml:space="preserve">
    <value>Get Relative Bounds</value>
  </data>
  <data name="GetScreenBounds" xml:space="preserve">
    <value>Get Screen Bounds</value>
  </data>
  <data name="GetsInformationAboutTheBoundingRectangleOfTheElementInScreenCoordinates" xml:space="preserve">
    <value>Gets information about the bounding rectangle of the element, in screen coordinates.</value>
  </data>
  <data name="ClickWindow" xml:space="preserve">
    <value>Click Window</value>
  </data>
  <data name="SendAClickMessageToTheWindowAtTheSpecifiedPositionThePositionIsRelativeToTheTopL" xml:space="preserve">
    <value>Send a click message to the window at the specified position. The position is relative to the top left of the window.</value>
  </data>
  <data name="TheXCoordinateOfThePointAtWhichToClickRelativeToTheWindow" xml:space="preserve">
    <value>The X coordinate of the point at which to click, relative to the window</value>
  </data>
  <data name="TheYCoordinateOfThePointAtWhichToClickRelativeToTheWindow" xml:space="preserve">
    <value>The Y coordinate of the point at which to click, relative to the window</value>
  </data>
  <data name="MouseButton" xml:space="preserve">
    <value>Mouse Button</value>
  </data>
  <data name="OptionalTheMouseButtonToUseValidValuesAreLeftAndRightANullValueImpliesLeft" xml:space="preserve">
    <value>Optional: the mouse button to use. Valid values are 'left' and 'right'; a null value implies 'left'</value>
  </data>
  <data name="ClickWindowCentre" xml:space="preserve">
    <value>Click Window Centre</value>
  </data>
  <data name="SendAClickMessageToTheCentreOfTheWindow" xml:space="preserve">
    <value>Send a click message to the centre of the window.</value>
  </data>
  <data name="ClickTheElementAtTheSpecifiedPositionUsingAGlobalMouseClickThePositionIsRelative" xml:space="preserve">
    <value>Click the element at the specified position, using a global mouse click. The position is relative to the top left of the element's bounding rectangle. The mouse cursor will appear to jump across the screen during this method.</value>
  </data>
  <data name="GlobalMouseClick" xml:space="preserve">
    <value>Global Mouse Click</value>
  </data>
  <data name="GlobalDoubleMouseClick" xml:space="preserve">
    <value>Global Double Mouse Click</value>
  </data>
  <data name="DoubleClickTheElementAtTheSpecifiedPositionUsingAGlobalMouseClickThePositionIsRe" xml:space="preserve">
    <value>Double click the element at the specified position, using a global mouse click. The position is relative to the top left of the element's bounding rectangle. The mouse cursor will appear to jump across the screen during this method.</value>
  </data>
  <data name="GlobalMouseClickCentre" xml:space="preserve">
    <value>Global Mouse Click Centre</value>
  </data>
  <data name="ClickTheElementAtItsCentreUsingAGlobalMouseClick" xml:space="preserve">
    <value>Click the element at its centre, using a global mouse click.</value>
  </data>
  <data name="GlobalDoubleMouseClickCentre" xml:space="preserve">
    <value>Global Double Mouse Click Centre</value>
  </data>
  <data name="DoubleClickTheElementAtItsCentreUsingAGlobalMouseClick" xml:space="preserve">
    <value>Double click the element at its centre, using a global mouse click.</value>
  </data>
  <data name="ClickTheRegionAtTheSpecifiedPositionUsingAGlobalMouseClickThePositionIsRelativeT" xml:space="preserve">
    <value>Click the region at the specified position, using a global mouse click. The position is relative to the top left of the region. The mouse cursor will appear to jump across the screen during this method.</value>
  </data>
  <data name="ClickTheRegionAtItsCentreUsingAGlobalMouseClickTheMouseCursorWillAppearToJumpAcr" xml:space="preserve">
    <value>Click the region at its centre, using a global mouse click.  The mouse cursor will appear to jump across the screen during this method.</value>
  </data>
  <data name="ClickCentre" xml:space="preserve">
    <value>Click Centre</value>
  </data>
  <data name="ClickTheParentWindowOfTheRegionAtTheCentreOfTheRegion" xml:space="preserve">
    <value>Click the parent window of the region at the centre of the region.</value>
  </data>
  <data name="StartDrag" xml:space="preserve">
    <value>Start Drag</value>
  </data>
  <data name="StartADragdropOperationByDraggingFromTheCentreOfTheRegionMustBeFollowedByADropOp" xml:space="preserve">
    <value>Start a drag-drop operation by dragging from the centre of the region. Must be followed by a drop operation on another element.</value>
  </data>
  <data name="DropOnto" xml:space="preserve">
    <value>Drop Onto</value>
  </data>
  <data name="EndADragdropOperationByDroppingOntoTheRegionAtItsCentreMustBePrecededByADragOper" xml:space="preserve">
    <value>End a drag-drop operation by dropping onto the region, at its centre. Must be preceded by a drag operation on another element.</value>
  </data>
  <data name="Drag" xml:space="preserve">
    <value>Drag</value>
  </data>
  <data name="StartDraggingFromAGivenPositionOverTheWindow" xml:space="preserve">
    <value>Start dragging from a given position over the window</value>
  </data>
  <data name="TheXCoordinateOfThePointAtWhichToStartDraggingRelativeToTheWindow" xml:space="preserve">
    <value>The X coordinate of the point at which to start dragging, relative to the window</value>
  </data>
  <data name="TheYCoordinateOfThePointAtWhichToStartDraggingRelativeToTheWindow" xml:space="preserve">
    <value>The Y coordinate of the point at which to start dragging, relative to the window</value>
  </data>
  <data name="Drop" xml:space="preserve">
    <value>Drop</value>
  </data>
  <data name="DropAtTheGivenPositionOverTheWindowMustFollowADrag" xml:space="preserve">
    <value>Drop at the given position over the window - must follow a drag</value>
  </data>
  <data name="TheXCoordinateOfThePointAtWhichToPerformTheDropRelativeToTheWindow" xml:space="preserve">
    <value>The X coordinate of the point at which to perform the drop, relative to the window</value>
  </data>
  <data name="TheYCoordinateOfThePointAtWhichToPerformTheDropRelativeToTheWindow" xml:space="preserve">
    <value>The Y coordinate of the point at which to perform the drop, relative to the window</value>
  </data>
  <data name="DragListviewItem" xml:space="preserve">
    <value>Drag Listview Item</value>
  </data>
  <data name="StartDraggingTheListviewItemWithTheSpecifiedText" xml:space="preserve">
    <value>Start dragging the listview item with the specified text</value>
  </data>
  <data name="ItemText" xml:space="preserve">
    <value>Item Text</value>
  </data>
  <data name="TheTextOfTheListviewItemToBeDraggedIfNotUniqueThenTheFirstMatchingItemFoundWillB" xml:space="preserve">
    <value>The text of the listview item to be dragged. If not unique, then the first matching item found will be dragged.</value>
  </data>
  <data name="DropOntoListviewItem" xml:space="preserve">
    <value>Drop Onto Listview Item</value>
  </data>
  <data name="DropOntoTheListviewItemWithTheSpecifiedTextMustFollowADrag" xml:space="preserve">
    <value>Drop onto the listview item with the specified text - must follow a drag</value>
  </data>
  <data name="TheTextOfTheListviewItemOntoWhichTheDropShouldBePerformedIfNotUniqueThenTheFirst" xml:space="preserve">
    <value>The text of the listview item onto which the drop should be performed. If not unique, then the first matching item found will be chosen.</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="AsksAWindowToClose" xml:space="preserve">
    <value>Asks a window to close.</value>
  </data>
  <data name="Focus" xml:space="preserve">
    <value>Focus</value>
  </data>
  <data name="Hover" xml:space="preserve">
    <value>Hover</value>
  </data>
  <data name="HoverMouseOnElement" xml:space="preserve">
    <value>Global Mouse Hover</value>
  </data>
  <data name="FocusesAnHTMLElement" xml:space="preserve">
    <value>Focuses an HTML element.</value>
  </data>
  <data name="HoversOverAnHTMLElement" xml:space="preserve">
    <value>Hovers over an HTML element.</value>
  </data>
  <data name="HoverMouseOnAnHTMLElement" xml:space="preserve">
    <value>Moves the mouse over an HTML element to simulate hover. This action requires that the element is in view and the application is in the screen foreground.</value>
  </data>
  <data name="Press" xml:space="preserve">
    <value>Press</value>
  </data>
  <data name="PressAButton" xml:space="preserve">
    <value>Press a button</value>
  </data>
  <data name="SetField" xml:space="preserve">
    <value>Set Field</value>
  </data>
  <data name="SetTheContentsOfATerminalField" xml:space="preserve">
    <value>Set the contents of a terminal field</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TheNewTextToBeEnteredIntoTheField" xml:space="preserve">
    <value>The new text to be entered into the field.</value>
  </data>
  <data name="ReadField" xml:space="preserve">
    <value>Read Field</value>
  </data>
  <data name="ReadTheContentsOfATerminalField" xml:space="preserve">
    <value>Read the contents of a terminal field</value>
  </data>
  <data name="SearchTerminal" xml:space="preserve">
    <value>Search Terminal</value>
  </data>
  <data name="SearchTheWholeTerminalForInstancesOfTheGivenTextCaseInsensitive" xml:space="preserve">
    <value>Search the whole terminal for instances of the given text. Case insensitive.</value>
  </data>
  <data name="TheTextToSearchFor" xml:space="preserve">
    <value>The text to search for.</value>
  </data>
  <data name="GetCursorPosition" xml:space="preserve">
    <value>Get Cursor Position</value>
  </data>
  <data name="GetsTheRowcolumnPositionOfTheCursorInThePresentationSpace" xml:space="preserve">
    <value>Gets the row/column position of the cursor in the presentation space</value>
  </data>
  <data name="SetCursorPosition" xml:space="preserve">
    <value>Set Cursor Position</value>
  </data>
  <data name="SetsTheRowcolumnPositionOfTheCursorInThePresentationSpace" xml:space="preserve">
    <value>Sets the row/column position of the cursor in the presentation space</value>
  </data>
  <data name="RowIndex" xml:space="preserve">
    <value>Row Index</value>
  </data>
  <data name="The1basedIndexOfTheRowAtWhichTheCursorShouldBeLocatedThisValueMustNotExceedTheNu" xml:space="preserve">
    <value>The 1-based index of the row at which the cursor should be located. This value must not exceed the number of rows available.</value>
  </data>
  <data name="ColumnIndex" xml:space="preserve">
    <value>Column Index</value>
  </data>
  <data name="The1basedIndexOfTheColumnAtWhichTheCursorShouldBeLocatedThisValueMustNotExceedTh" xml:space="preserve">
    <value>The 1-based index of the column at which the cursor should be located. This value must not exceed the number of columns available.</value>
  </data>
  <data name="GetWindowTitle" xml:space="preserve">
    <value>Get Window Title</value>
  </data>
  <data name="GetsTheTitleOfTheWindowInWhichTheTerminalEmulatorResides" xml:space="preserve">
    <value>Gets the title of the window in which the terminal emulator resides</value>
  </data>
  <data name="SetWindowTitle" xml:space="preserve">
    <value>Set Window Title</value>
  </data>
  <data name="SetsTheTitleOfTheWindowInWhichTheTerminalEmulatorResides" xml:space="preserve">
    <value>Sets the title of the window in which the terminal emulator resides</value>
  </data>
  <data name="NewTitle" xml:space="preserve">
    <value>New Title</value>
  </data>
  <data name="TheNewTitleOfTheMainframeEmulatorWindow" xml:space="preserve">
    <value>The new title of the mainframe emulator window.</value>
  </data>
  <data name="RunMacro" xml:space="preserve">
    <value>Run Macro</value>
  </data>
  <data name="RunsTheSpecifiedMacroDefinedOnTheEmulatorInstance" xml:space="preserve">
    <value>Runs the specified macro defined on the emulator instance</value>
  </data>
  <data name="MacroName" xml:space="preserve">
    <value>Macro Name</value>
  </data>
  <data name="TheNameOfTheMacroToBeRunOnlyFilePathsAreNotSupported" xml:space="preserve">
    <value>The name of the macro to be run, only. File paths are not supported.</value>
  </data>
  <data name="SetText" xml:space="preserve">
    <value>Set Text</value>
  </data>
  <data name="SetTheWindowtextForAWindow" xml:space="preserve">
    <value>Set the windowtext for a window.</value>
  </data>
  <data name="TheNewTextToBeSentToTheWindow" xml:space="preserve">
    <value>The new text to be sent to the window.</value>
  </data>
  <data name="ReadTextWithOCR" xml:space="preserve">
    <value>Read Text with OCR</value>
  </data>
  <data name="ReadTextUsingOCRFromARectangularAreaOnAWindow" xml:space="preserve">
    <value>Read text using OCR from a rectangular area on a window</value>
  </data>
  <data name="ReadTextWithOCRPlus" xml:space="preserve">
    <value>Read Text with OCR Plus</value>
  </data>
  <data name="ReadTextUsingOCRPlusFromARectangularAreaOnAWindow" xml:space="preserve">
    <value>Read text using OCR Plus from a rectangular area on a window</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="TheTesseractLanguageCodeToUseDefaultIsEng" xml:space="preserve">
    <value>The Tesseract language code to use. Default is 'eng'.</value>
  </data>
  <data name="PageSegmentationMode" xml:space="preserve">
    <value>Page Segmentation Mode</value>
  </data>
  <data name="TheTesseractPageSegmentationModeToUseDefaultIsAuto" xml:space="preserve">
    <value>The Tesseract page segmentation mode to use. Default is 'Auto'.</value>
  </data>
  <data name="CharacterWhitelist" xml:space="preserve">
    <value>Character Whitelist</value>
  </data>
  <data name="WhitelistOfCharactersToRecognise" xml:space="preserve">
    <value>Whitelist of characters to recognise.</value>
  </data>
  <data name="DiagnosticsPath" xml:space="preserve">
    <value>Diagnostics Path</value>
  </data>
  <data name="OptionalCanBeUsedToSpecifyADirectoryWhereDiagnosticsFilesWillBeSavedEgIntermedia" xml:space="preserve">
    <value>Optional. Can be used to specify a directory where diagnostics files will be saved - e.g. intermediate processed images.</value>
  </data>
  <data name="Scale" xml:space="preserve">
    <value>Scale</value>
  </data>
  <data name="SetTheInternalImageScaleFactorDefaultIs4" xml:space="preserve">
    <value>Set the internal image scale factor. Default is 4.</value>
  </data>
  <data name="ReadText" xml:space="preserve">
    <value>Read Text</value>
  </data>
  <data name="ReadTextDiscoveredUsingInvasiveTechniquesWithinARectangularAreaOfAWindow" xml:space="preserve">
    <value>Read text discovered using invasive techniques within a rectangular area of a window</value>
  </data>
  <data name="RecogniseText" xml:space="preserve">
    <value>Recognise Text</value>
  </data>
  <data name="ReadTextUsingCharacterMatchingFromARectangularAreaOnAWindow" xml:space="preserve">
    <value>Read text using character matching from a rectangular area on a window</value>
  </data>
  <data name="Font" xml:space="preserve">
    <value>Font</value>
  </data>
  <data name="TheNameOfTheFontToUseDefaultIsSystem" xml:space="preserve">
    <value>The name of the font to use. Default is 'System'.</value>
  </data>
  <data name="Colour" xml:space="preserve">
    <value>Colour</value>
  </data>
  <data name="TheTextColourEgFF0000DefaultIsBlack" xml:space="preserve">
    <value>The text colour, e.g. FF0000. Default is black.</value>
  </data>
  <data name="BackgroundColour" xml:space="preserve">
    <value>Background Colour</value>
  </data>
  <data name="OptionalUsedToSpecifyTheBackgroundColourAgainstWhichTheTextIsSetIfUsedTheColourO" xml:space="preserve">
    <value>Optional. Used to specify the background colour against which the text is set. If used, the colour of the text must not be specified. Input format must be a six-character hex sequence specifying the background colour, e.g. FF0000.</value>
  </data>
  <data name="RecogniseSingleLineText" xml:space="preserve">
    <value>Recognise Single Line Text</value>
  </data>
  <data name="ReadTextUsingCharacterMatchingFromARectangularAreaOnAWindowWhichIsKnownToReprese" xml:space="preserve">
    <value>Read text using character matching from a rectangular area on a window, which is known to represent a single line of text.</value>
  </data>
  <data name="TheNameOfTheFontToUse" xml:space="preserve">
    <value>The name of the font to use.</value>
  </data>
  <data name="RecogniseMultilineText" xml:space="preserve">
    <value>Recognise Multi-line Text</value>
  </data>
  <data name="ReadTextUsingCharacterMatchingFromARectangularAreaOnAWindowWhichIsKnownToReprese_1" xml:space="preserve">
    <value>Read text using character matching from a rectangular area on a window, which is known to represent more than one line of text.</value>
  </data>
  <data name="EraseBlocks" xml:space="preserve">
    <value>Erase Blocks</value>
  </data>
  <data name="OptionalDefaultFalseSetToTrueToAutomaticallyDetectAndEraseColouredBlocksSurround" xml:space="preserve">
    <value>Optional; default False. Set to True to automatically detect and erase coloured blocks surrounding text, such as a highlighted selection in a listview.</value>
  </data>
  <data name="SplitLines" xml:space="preserve">
    <value>Split Lines</value>
  </data>
  <data name="TrueToSplitEachSubregionIntoLinesBeforeMatchingDefaultFalse" xml:space="preserve">
    <value>True to split each subregion into lines before matching. Default: False</value>
  </data>
  <data name="UseOriginalAlgorithm" xml:space="preserve">
    <value>Use Original Algorithm</value>
  </data>
  <data name="TrueToUseTheBackwardsCompatibleAlgorithmForReadingCharactersWhichScansAcrossThen" xml:space="preserve">
    <value>True to use the backwards compatible algorithm for reading characters which scans across then down. Default: False</value>
  </data>
  <data name="ReadImage" xml:space="preserve">
    <value>Read Image</value>
  </data>
  <data name="ReadImageFromARectangularAreaOnAWindow" xml:space="preserve">
    <value>Read image from a rectangular area on a window</value>
  </data>
  <data name="RecogniseTextInRange" xml:space="preserve">
    <value>Recognise Text In Range</value>
  </data>
  <data name="ReadTextUsingCharacterMatchingFromASeriesOfRectangularAreasOnAWindowWhichAreKnow" xml:space="preserve">
    <value>Read text using character matching from a series of rectangular areas on a window, which are known to represent a single line of text.</value>
  </data>
  <data name="FirstElement" xml:space="preserve">
    <value>First Element</value>
  </data>
  <data name="TheFirstElementInTheListRegionToReadDefaultIs1" xml:space="preserve">
    <value>The first element in the list region to read. Default is 1</value>
  </data>
  <data name="LastElement" xml:space="preserve">
    <value>Last Element</value>
  </data>
  <data name="TheLastElementInTheListRegionToReadDefaultIs1" xml:space="preserve">
    <value>The last element in the list region to read. Default is 1</value>
  </data>
  <data name="RecogniseTextInTable" xml:space="preserve">
    <value>Recognise Text In Table</value>
  </data>
  <data name="ReadsTheTextInEachCellDefinedInTheGridRegion" xml:space="preserve">
    <value>Reads the text in each cell defined in the grid region.</value>
  </data>
  <data name="GetConflictingFontCharacters" xml:space="preserve">
    <value>Get Conflicting Font Characters</value>
  </data>
  <data name="GetACollectionOfConflictingCharacterGroupsEachRowContainsAStringUnderTheCharacte" xml:space="preserve">
    <value>Get a collection of conflicting character groups. Each row contains a string under the 'Character Group' field, representing a group of characters whose appearance is identical within the font of interest.</value>
  </data>
  <data name="TheNameOfTheFontOfInterest" xml:space="preserve">
    <value>The name of the font of interest.</value>
  </data>
  <data name="GetText" xml:space="preserve">
    <value>Get Text</value>
  </data>
  <data name="GetTheTextForAWindow" xml:space="preserve">
    <value>Get the text for a window</value>
  </data>
  <data name="GetWin32ParentText" xml:space="preserve">
    <value>Get Win32 Parent Text</value>
  </data>
  <data name="GetTheTextForARegionsWin32ParentControlwindow" xml:space="preserve">
    <value>Get the text for a region's Win32 parent control/window</value>
  </data>
  <data name="IsWindowActive" xml:space="preserve">
    <value>Is Window Active</value>
  </data>
  <data name="IndicatesWhetherAWindowIsTheActiveWindowTheWindowWhichReceivesUserInput" xml:space="preserve">
    <value>Indicates whether a window is the active window - the window which receives user input</value>
  </data>
  <data name="GetChecked" xml:space="preserve">
    <value>Get Checked</value>
  </data>
  <data name="ReadsTheCheckedValueFromACheckboxRadioButtonEtc" xml:space="preserve">
    <value>Reads the 'checked' value from a checkbox, radio button, etc</value>
  </data>
  <data name="ShowDropdown" xml:space="preserve">
    <value>Show Dropdown</value>
  </data>
  <data name="ShowTheDropdownListOnAComboboxOrMenu" xml:space="preserve">
    <value>Show the dropdown list on a combobox or menu</value>
  </data>
  <data name="HideDropdown" xml:space="preserve">
    <value>Hide Dropdown</value>
  </data>
  <data name="HideTheDropdownListOnAComboboxOrMenu" xml:space="preserve">
    <value>Hide the dropdown list on a combobox or menu</value>
  </data>
  <data name="ReadTheTextOfAJavaElement" xml:space="preserve">
    <value>Read the text of a java element</value>
  </data>
  <data name="GetSelectedText" xml:space="preserve">
    <value>Get Selected Text</value>
  </data>
  <data name="ReadTheSelectedTextOfAJavaElement" xml:space="preserve">
    <value>Read the selected text of a java element</value>
  </data>
  <data name="SelectText" xml:space="preserve">
    <value>Select Text</value>
  </data>
  <data name="SelectAPortionOfTheTextInAnEditableJavaElement" xml:space="preserve">
    <value>Select a portion of the text in an editable java element</value>
  </data>
  <data name="StartPosition" xml:space="preserve">
    <value>Start Position</value>
  </data>
  <data name="TheOnebasedStartIndexOfTheTextToBeSelectedThisMustBeWithinTheRangeOfAvailableCha" xml:space="preserve">
    <value>The one-based start index of the text to be selected. This must be within the range of available characters.</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="TheNumberOfCharactersToBeSelectedThisMustBeWithinTheRangeOfAvailableCharactersRe" xml:space="preserve">
    <value>The number of characters to be selected. This must be within the range of available characters, relative to the specified start position.</value>
  </data>
  <data name="SelectAllText" xml:space="preserve">
    <value>Select All Text</value>
  </data>
  <data name="JABGetChecked" xml:space="preserve">
    <value>JABGetChecked</value>
  </data>
  <data name="SelectAllOfTheTextInAnEditableJavaElement" xml:space="preserve">
    <value>Select all of the text in an editable java element</value>
  </data>
  <data name="ReadsTheCheckedValueFromAJavaCheckboxRadioButtonToggleButtonEtc" xml:space="preserve">
    <value>Reads the 'checked' value from a java checkbox, radio button, toggle button, etc</value>
  </data>
  <data name="IsSelected" xml:space="preserve">
    <value>Is Selected</value>
  </data>
  <data name="ReadsTheSelectedValueFromAJavaElementSuchAsAListItemATabPageEtc" xml:space="preserve">
    <value>Reads the 'selected' value from a java element, such as a list item, a tab page, etc</value>
  </data>
  <data name="IsExpanded" xml:space="preserve">
    <value>Is Expanded</value>
  </data>
  <data name="ReadsTheExpandedValueFromAJavaElementSuchAsATreeNodeAComboBoxEtc" xml:space="preserve">
    <value>Reads the 'expanded' value from a java element, such as a tree node, a combo box, etc</value>
  </data>
  <data name="HideDropDown_1" xml:space="preserve">
    <value>Hide Drop Down</value>
  </data>
  <data name="HidesTheDropdownPortionOfAJavaElementSuchAsAMenuComboboxEtc" xml:space="preserve">
    <value>Hides the drop-down portion of a java element such as a menu, combobox, etc</value>
  </data>
  <data name="ShowDropDown_1" xml:space="preserve">
    <value>Show Drop Down</value>
  </data>
  <data name="ShowsTheDropdownPortionOfAJavaElementSuchAsAMenuComboboxEtc" xml:space="preserve">
    <value>Shows the drop-down portion of a java element such as a menu, combobox, etc</value>
  </data>
  <data name="CollapseItem" xml:space="preserve">
    <value>Collapse Item</value>
  </data>
  <data name="CollapseAJavaTreeNodeIfItIsExpanded" xml:space="preserve">
    <value>Collapse a java tree node, if it is expanded</value>
  </data>
  <data name="ExpandItem" xml:space="preserve">
    <value>Expand Item</value>
  </data>
  <data name="ExpandAJavaTreeNodeIfItIsExpanded" xml:space="preserve">
    <value>Expand a java tree node, if it is expanded</value>
  </data>
  <data name="ToggleItemExpansion" xml:space="preserve">
    <value>Toggle Item Expansion</value>
  </data>
  <data name="TogglesTheExpandedStateOfAJavaTreeNodeIfItHasChildren" xml:space="preserve">
    <value>Toggles the expanded state of a java tree node, if it has children</value>
  </data>
  <data name="SelectItem" xml:space="preserve">
    <value>Select Item</value>
  </data>
  <data name="SelectsAJavaItemIdentifiedByItsTextOrItsPositionEgFromAMenuDropdownAComboBoxATab" xml:space="preserve">
    <value>Selects a java item identified by its text or its position - eg from a menu dropdown, a combo box, a tab control, etc</value>
  </data>
  <data name="TheTextOfTheItemToBeSelectedIfNotUniqueThenTheFirstMatchingItemFoundWillBeSelect" xml:space="preserve">
    <value>The text of the item to be selected. If not unique, then the first matching item found will be selected.</value>
  </data>
  <data name="ItemPosition" xml:space="preserve">
    <value>Item Position</value>
  </data>
  <data name="The1basedIndexOfTheItemToBeSelectedThisParameterIsIgnoredUnlessTheItemTextParame" xml:space="preserve">
    <value>The 1-based index of the item to be selected. This parameter is ignored unless the 'Item Text' parameter is blank.</value>
  </data>
  <data name="EnsureItemVisible" xml:space="preserve">
    <value>Ensure Item Visible</value>
  </data>
  <data name="TheTextOfTheItemOnlyUsedWhenNoValueIsSuppliedToThePositionParameter" xml:space="preserve">
    <value>The text of the item. Only used when no value is supplied to the Position parameter</value>
  </data>
  <data name="The1basedIndexOfTheItemIfThisParameterIsUsedThenTheTextParameterWillBeIgnored" xml:space="preserve">
    <value>The 1-based index of the item. If this parameter is used then the Text parameter will be ignored</value>
  </data>
  <data name="SelectAllItems" xml:space="preserve">
    <value>Select All Items</value>
  </data>
  <data name="SelectsAllChildItemsEgInAList" xml:space="preserve">
    <value>Selects all child items - eg in a list</value>
  </data>
  <data name="ClearSelection" xml:space="preserve">
    <value>Clear Selection</value>
  </data>
  <data name="ClearsTheSelectionOfChildItemsEgInAList" xml:space="preserve">
    <value>Clears the selection of child items - eg in a list</value>
  </data>
  <data name="SetChecked" xml:space="preserve">
    <value>Set Checked</value>
  </data>
  <data name="WritesTheCheckedValueToAJavaCheckboxRadioButtonToggleButtonEtc" xml:space="preserve">
    <value>Writes the 'checked' value to a java checkbox, radio button, toggle button, etc</value>
  </data>
  <data name="CountSelectedItems" xml:space="preserve">
    <value>Count Selected Items</value>
  </data>
  <data name="CountsAndReturnsTheNumberOfSelectedItemsContainedInAJavaListviewTreeviewListBoxE" xml:space="preserve">
    <value>Counts and returns the number of selected items contained in a java listview, Treeview, ListBox, etc.</value>
  </data>
  <data name="GetAllItems" xml:space="preserve">
    <value>Get All Items</value>
  </data>
  <data name="GetsAllRowsAndColumnsOfAListviewComboboxDatagridEtcAsACollectionForSimpleControl" xml:space="preserve">
    <value>Gets all rows and columns (of a listview, combobox, datagrid etc) as a collection. For simple controls, the collection has a single field called 'Item Text'. For multi-column controls, the fields will be named as they are in the control, where possible - otherwise names such as 'Column1', 'Column2' will be used.</value>
  </data>
  <data name="GetTreenodeChildItems" xml:space="preserve">
    <value>Get Treenode Child Items</value>
  </data>
  <data name="GetsAllChildItemsOfTheSpecifiedItemInATreeviewAsACollection" xml:space="preserve">
    <value>Gets all child items of the specified item in a treeview, as a collection.</value>
  </data>
  <data name="TheTextOfTheTreenodeOfInterestIfNotUniqueThenTheFirstMatchingItemWillBeRetrieved" xml:space="preserve">
    <value>The text of the treenode of interest. If not unique, then the first matching item will be retrieved.</value>
  </data>
  <data name="GetTreenodeSiblingItems" xml:space="preserve">
    <value>Get Treenode Sibling Items</value>
  </data>
  <data name="GetsAllSiblingItemsOfTheSpecifiedItemInATreeviewAsACollectionTheReturnedCollecti" xml:space="preserve">
    <value>Gets all sibling items of the specified item in a treeview, as a collection. The returned collection includes the item specified, as well as its siblings.</value>
  </data>
  <data name="GoToCell" xml:space="preserve">
    <value>Go To Cell</value>
  </data>
  <data name="SetTheCurrentPositionToAParticularCell" xml:space="preserve">
    <value>Set the current position to a particular cell</value>
  </data>
  <data name="Row" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="The1basedRowNumber" xml:space="preserve">
    <value>The 1-based row number</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="The1basedColumnNumber" xml:space="preserve">
    <value>The 1-based column number</value>
  </data>
  <data name="SetTopRow" xml:space="preserve">
    <value>Set Top Row</value>
  </data>
  <data name="SetTheTopVisibleRowThisRowMayNotActuallyGoToTheTopIfThereAreNotEnoughRowsBelowIt" xml:space="preserve">
    <value>Set the top visible row - this row may not actually go to the top if there are not enough rows below it.</value>
  </data>
  <data name="GetRowOffset" xml:space="preserve">
    <value>Get Row Offset</value>
  </data>
  <data name="GetTheOffsetInPixelsOfTheTopOfTheGivenRowFromTheTopOfTheGrid" xml:space="preserve">
    <value>Get the offset, in pixels, of the top of the given row from the top of the grid.</value>
  </data>
  <data name="SelectRange" xml:space="preserve">
    <value>Select Range</value>
  </data>
  <data name="SelectARangeOfCells" xml:space="preserve">
    <value>Select a range of cells</value>
  </data>
  <data name="EndRow" xml:space="preserve">
    <value>End Row</value>
  </data>
  <data name="TheEndColumnNumber" xml:space="preserve">
    <value>The end column number</value>
  </data>
  <data name="EndColumn" xml:space="preserve">
    <value>End Column</value>
  </data>
  <data name="GetItem" xml:space="preserve">
    <value>Get Item</value>
  </data>
  <data name="GetsAllDataAssociatedWithAnItemAsACollectionEgEveryColumnOfAListviewForTheItemIn" xml:space="preserve">
    <value>Gets all data associated with an item, as a collection (eg every column of a listview, for the item in question).</value>
  </data>
  <data name="TheMainTextOfTheItemOfInterestEgTheTextOfTheFirstColumnInAListviewItemIfNotUniqu" xml:space="preserve">
    <value>The main text of the item of interest (eg the text of the first column in a listview item). If not unique, then the first matching item will be retrieved.</value>
  </data>
  <data name="The1basedIndexOfTheItemOfInterestThisParameterIsIgnoredUnlessTheItemTextParamete" xml:space="preserve">
    <value>The 1-based index of the item of interest. This parameter is ignored unless the 'Item Text' parameter is blank.</value>
  </data>
  <data name="GetSelectedItems" xml:space="preserve">
    <value>Get Selected Items</value>
  </data>
  <data name="GetsAllSelectedRowsAndColumnsOfAListviewComboboxDatagridEtcAsACollection" xml:space="preserve">
    <value>Gets all selected rows and columns (of a listview, combobox, datagrid etc) as a collection.</value>
  </data>
  <data name="IsItemSelected" xml:space="preserve">
    <value>Is Item Selected</value>
  </data>
  <data name="ReadsTheSelectedValueFromAChildOfTheChosenElementEgFromAnItemInAListviewEtc" xml:space="preserve">
    <value>Reads the 'selected' value from a child of the chosen element. Eg from an item in a listview, etc</value>
  </data>
  <data name="IsItemChecked" xml:space="preserve">
    <value>Is Item Checked</value>
  </data>
  <data name="ReadsTheCheckedValueFromAChildOfTheChosenElementEgFromAnItemInAListviewEtc" xml:space="preserve">
    <value>Reads the 'checked' value from a child of the chosen element. Eg from an item in a listview, etc</value>
  </data>
  <data name="IsItemExpanded" xml:space="preserve">
    <value>Is Item Expanded</value>
  </data>
  <data name="ReadsTheExpandedValueFromAChildOfTheChosenElementEgFromAnItemInATreeviewEtc" xml:space="preserve">
    <value>Reads the 'expanded' value from a child of the chosen element. Eg from an item in a treeview, etc</value>
  </data>
  <data name="IsItemFocused" xml:space="preserve">
    <value>Is Item Focused</value>
  </data>
  <data name="ReadsTheFocusedValueFromAChildOfTheChosenElementEgFromAnItemInATreeviewEtc" xml:space="preserve">
    <value>Reads the 'focused' value from a child of the chosen element. Eg from an item in a treeview, etc.</value>
  </data>
  <data name="GetItemImageIndex" xml:space="preserve">
    <value>Get Item Image Index</value>
  </data>
  <data name="ReadsTheImageIndexOfAChildOfTheChosenElementEgFromAnItemInAListviewTreeviewEtc" xml:space="preserve">
    <value>Reads the Image Index of a child of the chosen element. Eg from an item in a listview, treeview, etc.</value>
  </data>
  <data name="GetCurrentValue" xml:space="preserve">
    <value>Get Current Value</value>
  </data>
  <data name="GetsTheCurrentValueOfATextboxComboboxListviewCurrentRowCheckboxEtcTheDataTypeWil" xml:space="preserve">
    <value>Gets the current value (of a textbox, combobox, listview current row, checkbox, etc). The data type will be that of the calling control (eg flag for a checkbox).</value>
  </data>
  <data name="MakesSureThatTheSpecifiedItemIsVisibleInAListviewOrTreeviewByAdjustingTheScrollb" xml:space="preserve">
    <value>Makes sure that the specified item is visible in a Listview or Treeview, by adjusting the scrollbars where necessary.</value>
  </data>
  <data name="TheTextOfTheItemOnlyUsedWhenNoValueIsSuppliedToTheIndexParameter" xml:space="preserve">
    <value>The text of the item. Only used when no value is supplied to the Index parameter</value>
  </data>
  <data name="ScrollToTop" xml:space="preserve">
    <value>Scroll To Top</value>
  </data>
  <data name="ScrollsAListviewToTheTopWhenInDetailsMode" xml:space="preserve">
    <value>Scrolls a listview to the top when in details mode.</value>
  </data>
  <data name="ScrollToBottom" xml:space="preserve">
    <value>Scroll To Bottom</value>
  </data>
  <data name="ScrollsAListviewToTheBottomWhenInDetailsMode" xml:space="preserve">
    <value>Scrolls a listview to the bottom when in details mode.</value>
  </data>
  <data name="CountItems" xml:space="preserve">
    <value>Count Items</value>
  </data>
  <data name="CountsAndReturnsTheNumberOfItemsContainedInAListviewOrTreeview" xml:space="preserve">
    <value>Counts and returns the number of items contained in a listview or Treeview.</value>
  </data>
  <data name="CountsAndReturnsTheNumberOfSelectedItemsContainedInAListviewOrTreeview" xml:space="preserve">
    <value>Counts and returns the number of selected items contained in a listview or Treeview.</value>
  </data>
  <data name="GetPageCapacity" xml:space="preserve">
    <value>Get Page Capacity</value>
  </data>
  <data name="GetsTheNumberOfItemsThatCanBeDisplayedOnOnePageInAListviewInDetailsModeOrATreevi" xml:space="preserve">
    <value>Gets the number of items that can be displayed on one page, in a Listview (in details mode) or a Treeview.</value>
  </data>
  <data name="GetSelectedItemText" xml:space="preserve">
    <value>Get Selected Item Text</value>
  </data>
  <data name="GetsTheTextOfTheFirstSelectedItemReturnsAnErrorIfNoItemsAreSelected" xml:space="preserve">
    <value>Gets the text of the first selected item. Returns an error if no items are selected.</value>
  </data>
  <data name="ExpandsTheSpecifiedTreeviewItem" xml:space="preserve">
    <value>Expands the specified Treeview item.</value>
  </data>
  <data name="TheTextOfTheTreenodeToBeExpandedIfNotUniqueThenTheFirstMatchingNodeWillBeExpande" xml:space="preserve">
    <value>The text of the treenode to be expanded. If not unique, then the first matching node will be expanded.</value>
  </data>
  <data name="CollapsesTheSpecifiedTreeviewItem" xml:space="preserve">
    <value>Collapses the specified Treeview item.</value>
  </data>
  <data name="TheTextOfTheTreenodeToBeCollapsedIfNotUniqueThenTheFirstMatchingNodeWillBeCollap" xml:space="preserve">
    <value>The text of the treenode to be collapsed. If not unique, then the first matching node will be collapsed.</value>
  </data>
  <data name="TogglesTheExpandedStateOfTheSpecifiedTreeviewItem" xml:space="preserve">
    <value>Toggles the expanded state of the specified Treeview item.</value>
  </data>
  <data name="TheTextOfTheTreenodeToBeToggledIfNotUniqueThenTheFirstMatchingNodeWillBeToggled" xml:space="preserve">
    <value>The text of the treenode to be toggled. If not unique, then the first matching node will be toggled.</value>
  </data>
  <data name="GetValue" xml:space="preserve">
    <value>Get Value</value>
  </data>
  <data name="GetsTheNumericValueOfAControlSuchAsThePositionOnATrackbarAScrollbarOrTheValueInA" xml:space="preserve">
    <value>Gets the numeric value of a control such as the position on a trackbar, a scrollbar, or the value in a numeric up/down control.</value>
  </data>
  <data name="SetValue" xml:space="preserve">
    <value>Set Value</value>
  </data>
  <data name="SetsTheNumericValueOfAControlSuchAsThePositionOnATrackbarAScrollbarOrTheValueInA" xml:space="preserve">
    <value>Sets the numeric value of a control such as the position on a trackbar, a scrollbar, or the value in a numeric up/down control.</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="TheNewValueToBeSetInTheControl" xml:space="preserve">
    <value>The new value to be set in the control.</value>
  </data>
  <data name="GetMaxValue" xml:space="preserve">
    <value>Get Max Value</value>
  </data>
  <data name="GetsTheMaximumNumericValueAllowedByAControlSuchAsATrackbarAScrollbarOrANumericUp" xml:space="preserve">
    <value>Gets the maximum numeric value allowed by a control such as a trackbar, a scrollbar, or a numeric up/down control.</value>
  </data>
  <data name="GetMinValue" xml:space="preserve">
    <value>Get Min Value</value>
  </data>
  <data name="GetsTheMinimumNumericValueAllowedByAControlSuchAsATrackbarAScrollbarOrANumericUp" xml:space="preserve">
    <value>Gets the minimum numeric value allowed by a control such as a trackbar, a scrollbar or a numeric up/down control.</value>
  </data>
  <data name="GetsTheNumericValueOfAControlSuchAsAJavaTrackbarAJavaScrollbarOrAJavaNumericUpdo" xml:space="preserve">
    <value>Gets the numeric value of a control such as a java trackbar, a java scrollbar or a java numeric up/down control.</value>
  </data>
  <data name="SetsTheNumericValueOfAControlSuchAsAJavaTrackbarAJavaScrollbarOrAJavaNumericUpdo" xml:space="preserve">
    <value>Sets the numeric value of a control such as a java trackbar, a java scrollbar or a java numeric up/down control.</value>
  </data>
  <data name="GetsTheMaximumNumericValueAllowedByAControlSuchAsAJavaTrackbarAJavaScrollbarOrAJ" xml:space="preserve">
    <value>Gets the maximum numeric value allowed by a control such as a java trackbar, a java scrollbar or a java numeric up/down control.</value>
  </data>
  <data name="GetsTheMinimumNumericValueAllowedByAControlSuchAsAJavaTrackbarAJavaScrollbarOrAJ" xml:space="preserve">
    <value>Gets the minimum numeric value allowed by a control such as a java trackbar, a java scrollbar or a java numeric up/down control.</value>
  </data>
  <data name="GetsTheDatetimeValueOfAVB6DatePickerControl" xml:space="preserve">
    <value>Gets the datetime value of a VB6 date picker control.</value>
  </data>
  <data name="GetsTheDatetimeValueOfAControlSuchAsADatePicker" xml:space="preserve">
    <value>Gets the datetime value of a control such as a date picker.</value>
  </data>
  <data name="SetsTheDatetimeValueOfAControlSuchAsADatePicker" xml:space="preserve">
    <value>Sets the datetime value of a control such as a date picker.</value>
  </data>
  <data name="GetsTheMaximumAllowableDatetimeValueOfAControlSuchAsADatePicker" xml:space="preserve">
    <value>Gets the maximum allowable datetime value of a control such as a date picker.</value>
  </data>
  <data name="SetsTheMinimumAllowableDatetimeValueOfAControlSuchAsADatePicker" xml:space="preserve">
    <value>Sets the minimum allowable datetime value of a control such as a date picker.</value>
  </data>
  <data name="GetMaxSelectedValue" xml:space="preserve">
    <value>Get Max Selected Value</value>
  </data>
  <data name="GetsTheMaximumSelectedDatetimeValueOfAControlSuchAsADatePicker" xml:space="preserve">
    <value>Gets the maximum selected datetime value of a control such as a date picker.</value>
  </data>
  <data name="GetMinSelectedValue" xml:space="preserve">
    <value>Get Min Selected Value</value>
  </data>
  <data name="GetsTheMinimumSelectedDatetimeValueOfAControlSuchAsADatePicker" xml:space="preserve">
    <value>Gets the minimum selected datetime value of a control such as a date picker.</value>
  </data>
  <data name="ScrollToMinimum" xml:space="preserve">
    <value>Scroll To Minimum</value>
  </data>
  <data name="SetsAScrollbarToItsMinimumValueIeEitherTheExtremeLeftOrToTheTopDependingOnItsOri" xml:space="preserve">
    <value>Sets a scrollbar to its minimum value - ie either the extreme left, or to the top depending on its orientation.</value>
  </data>
  <data name="ScrollToMaximum" xml:space="preserve">
    <value>Scroll To Maximum</value>
  </data>
  <data name="SetsAScrollbarToItsMaximumValueIeEitherTheExtremeRightOrToTheBottomDependingOnIt" xml:space="preserve">
    <value>Sets a scrollbar to its maximum value - ie either the extreme right, or to the bottom  depending on its orientation.</value>
  </data>
  <data name="ScrollByAmount" xml:space="preserve">
    <value>Scroll By Amount</value>
  </data>
  <data name="AdjustsTheValueOfAScrollBarByTheSpecifiedAmountInPagesWhereOnePageIsTheSizeRepre" xml:space="preserve">
    <value>Adjusts the value of a scroll bar by the specified amount in pages, where one page is the size represented by the "thumb" on the scroll bar. Both positive and negative values are permitted, as well as fractional values.</value>
  </data>
  <data name="NumberOfPages" xml:space="preserve">
    <value>Number of Pages</value>
  </data>
  <data name="TheNumberOfPagesToScrollFractionalValuesSuchAs05AreValidAsWellAsWholeValuesSuchA" xml:space="preserve">
    <value>The number of pages to scroll. Fractional values such as '0.5' are valid as well as whole values such as '3'. A negative value indicates scrolling up/left; a positive value indicates scrolling down/right.</value>
  </data>
  <data name="SetsAJavaScrollbarToItsMinimumValueIeEitherTheExtremeLeftOrToTheTopDependingOnIt" xml:space="preserve">
    <value>Sets a java scrollbar to its minimum value - ie either the extreme left, or to the top depending on its orientation.</value>
  </data>
  <data name="SetsAJavaScrollbarToItsMaximumValueIeEitherTheExtremeRightOrToTheBottomDepending" xml:space="preserve">
    <value>Sets a java scrollbar to its maximum value - ie either the extreme right, or to the bottom  depending on its orientation.</value>
  </data>
  <data name="AdjustsTheValueOfAJavaScrollBarByTheSpecifiedAmountInPagesWhereOnePageIsTheSizeR" xml:space="preserve">
    <value>Adjusts the value of a java scroll bar by the specified amount in pages, where one page is the size represented by the "thumb" on the scroll bar. Both positive and negative values are permitted, as well as fractional values.</value>
  </data>
  <data name="MultiSelectItem" xml:space="preserve">
    <value>Multi Select Item</value>
  </data>
  <data name="AddsTheItemToAMultipleSelectionInAWindowsListBoxThatMatchesTheGivenText" xml:space="preserve">
    <value>Adds the item to a multiple selection in a Windows ListBox that matches the given text.</value>
  </data>
  <data name="TheTextOfTheItemToBeSelectedIfNotUniqueThenTheFirstMatchingItemWillBeSelected" xml:space="preserve">
    <value>The text of the item to be selected. If not unique, then the first matching item will be selected.</value>
  </data>
  <data name="SelectsTheItemInAWindowsComboBoxListBoxListviewOrTreeviewThatMatchesTheGivenText" xml:space="preserve">
    <value>Selects the item in a Windows ComboBox, ListBox, Listview or Treeview that matches the given text.</value>
  </data>
  <data name="The1basedIndexOfTheItemToBeModifiedThisParameterIsIgnoredUnlessTheItemTextParame" xml:space="preserve">
    <value>The 1-based index of the item to be modified. This parameter is ignored unless the 'Item Text' parameter is blank.</value>
  </data>
  <data name="ClickItem" xml:space="preserve">
    <value>Click Item</value>
  </data>
  <data name="ClicksTheItemInAWindowsListviewThatMatchesTheGivenText" xml:space="preserve">
    <value>Clicks the item in a Windows Listview that matches the given text.</value>
  </data>
  <data name="TheTextOfTheItemToBeClickedIfNotUniqueThenTheFirstMatchingItemFoundWillBeSelecte" xml:space="preserve">
    <value>The text of the item to be clicked. If not unique, then the first matching item found will be selected.</value>
  </data>
  <data name="The1basedIndexOfTheItemToBeClickedThisParameterIsIgnoredUnlessTheItemTextParamet" xml:space="preserve">
    <value>The 1-based index of the item to be clicked. This parameter is ignored unless the 'Item Text' parameter is blank.</value>
  </data>
  <data name="GetItemBounds" xml:space="preserve">
    <value>Get Item Bounds</value>
  </data>
  <data name="GetsTheBoundsOfAnItemWithinAListviewRelativeToTheListviewsTopLeftCorner" xml:space="preserve">
    <value>Gets the bounds of an item within a Listview, relative to the listview's top left corner.</value>
  </data>
  <data name="TheTextOfTheItemOfInterestIfNotUniqueThenTheFirstMatchingItemFoundWillBeUsed" xml:space="preserve">
    <value>The text of the item of interest. If not unique, then the first matching item found will be used.</value>
  </data>
  <data name="GetItemScreenBounds" xml:space="preserve">
    <value>Get Item Screen Bounds</value>
  </data>
  <data name="GetsTheBoundsOfAnItemWithinAListviewInScreenCoordinates" xml:space="preserve">
    <value>Gets the bounds of an item within a Listview, in screen coordinates.</value>
  </data>
  <data name="SelectTreeNode" xml:space="preserve">
    <value>Select Tree Node</value>
  </data>
  <data name="SelectsANodeInATreeView" xml:space="preserve">
    <value>Selects a node in a TreeView.</value>
  </data>
  <data name="NodeText" xml:space="preserve">
    <value>Node Text</value>
  </data>
  <data name="TheTextOfTheNodeToBeSelectedIfNotUniqueThenTheFirstMatchingItemFoundWillBeSelect" xml:space="preserve">
    <value>The text of the node to be selected. If not unique, then the first matching item found will be selected.</value>
  </data>
  <data name="ClicksTheItemInAWindowsToolbarOrSimilarThatMatchesTheGivenText" xml:space="preserve">
    <value>Clicks the item in a Windows Toolbar (or similar) that matches the given text.</value>
  </data>
  <data name="IsButtonEnabled" xml:space="preserve">
    <value>Is Button Enabled</value>
  </data>
  <data name="ReadsTheEnabledValueOfAToolbarButton" xml:space="preserve">
    <value>Reads the 'enabled' value of a toolbar button.</value>
  </data>
  <data name="IsButtonChecked" xml:space="preserve">
    <value>Is Button Checked</value>
  </data>
  <data name="ReadsTheCheckedValueOfAToolbarButton" xml:space="preserve">
    <value>Reads the 'checked' value of a toolbar button.</value>
  </data>
  <data name="IsButtonPressed" xml:space="preserve">
    <value>Is Button Pressed</value>
  </data>
  <data name="ReadsThePressedValueOfAToolbarButton" xml:space="preserve">
    <value>Reads the 'pressed' value of a toolbar button.</value>
  </data>
  <data name="SelectMenuItem" xml:space="preserve">
    <value>Select Menu Item</value>
  </data>
  <data name="SelectsTheSpecifiedMenuItemFromTheMainMenu" xml:space="preserve">
    <value>Selects the specified menu item from the main menu.</value>
  </data>
  <data name="MenuPath" xml:space="preserve">
    <value>Menu Path</value>
  </data>
  <data name="ThePathToTheMenuItemOfInterestAsADescentThroughTheMenuTreestructureEgFileBackupO" xml:space="preserve">
    <value>The path to the menu item of interest, as a descent through the menu tree-structure. Eg "{File}{Backup Options}{Backup Configuration}". The escape character for the special "{","}" characters is the backslash: "\".</value>
  </data>
  <data name="IsMenuItemChecked" xml:space="preserve">
    <value>Is Menu Item Checked</value>
  </data>
  <data name="ReadsTheCheckedValueOfAMenuItem" xml:space="preserve">
    <value>Reads the 'checked' value of a menu item.</value>
  </data>
  <data name="ThePathToTheMenuItemOfInterestAsADescentThroughTheMenuTreestructureEgFileBack_1" xml:space="preserve">
    <value>The path to the menu item of interest, as a descent through the menu tree-structure. Eg "{File}{Backup Options}{Backup Configuration}". The escape character for the special "{","}" characters is the backslash: "\".</value>
  </data>
  <data name="IsMenuItemEnabled" xml:space="preserve">
    <value>Is Menu Item Enabled</value>
  </data>
  <data name="ReadsTheEnabledValueOfAMenuItem" xml:space="preserve">
    <value>Reads the 'enabled' value of a menu item.</value>
  </data>
  <data name="ThePathToTheMenuItemOfInterestAsADescentThroughTheMenuTreestructureEgFileBack_2" xml:space="preserve">
    <value>The path to the menu item of interest, as a descent through the menu tree-structure. Eg "{File}{Backup Options}{Backup Configuration}". The escape character for the special "{","}" characters is the backslash: "\".</value>
  </data>
  <data name="ClickTab" xml:space="preserve">
    <value>Click Tab</value>
  </data>
  <data name="SendsAClickMessageToATabControlLocatedAtTheCentreOfTheSpecifiedTab" xml:space="preserve">
    <value>Sends a click message to a tab control, located at the centre of the specified tab.</value>
  </data>
  <data name="TabText" xml:space="preserve">
    <value>Tab Text</value>
  </data>
  <data name="TheTextOfTheTabToReceiveTheClickMessagesIfNotUniqueThenTheFirstMatchingTabFoundW" xml:space="preserve">
    <value>The text of the tab to receive the click messages. If not unique, then the first matching tab found will be used.</value>
  </data>
  <data name="The1basedIndexOfTheTabToBeUsedThisParameterIsIgnoredUnlessTheTabTextParameterIsB" xml:space="preserve">
    <value>The 1-based index of the tab to be used. This parameter is ignored unless the 'Tab Text' parameter is blank.</value>
  </data>
  <data name="GlobalMouseClickTab" xml:space="preserve">
    <value>Global Mouse Click Tab</value>
  </data>
  <data name="ClicksATabControlAtTheCentreOfTheSpecifiedTabUsingAGlobalMouseClick" xml:space="preserve">
    <value>Clicks a tab control, at the centre of the specified tab, using a global mouse click.</value>
  </data>
  <data name="TheTextOfTheTabToBeClickedIfNotUniqueThenTheFirstMatchingTabFoundWillBeUsed" xml:space="preserve">
    <value>The text of the tab to be clicked. If not unique, then the first matching tab found will be used.</value>
  </data>
  <data name="The1basedIndexOfTheTabToBeClickedThisParameterIsIgnoredUnlessTheTabTextParameter" xml:space="preserve">
    <value>The 1-based index of the tab to be clicked. This parameter is ignored unless the 'Tab Text' parameter is blank.</value>
  </data>
  <data name="SetItemChecked" xml:space="preserve">
    <value>Set Item Checked</value>
  </data>
  <data name="SetsTheCheckedValueOfTheItemInAWindowsListviewOrTreeviewThatMatchesTheGivenText" xml:space="preserve">
    <value>Sets the 'checked' value of the item in a Windows Listview or Treeview that matches the given text.</value>
  </data>
  <data name="TheTextOfTheItemToBeModifiedIfNotUniqueThenTheFirstMatchingItemFoundWillBeUsed" xml:space="preserve">
    <value>The text of the item to be modified. If not unique, then the first matching item found will be used.</value>
  </data>
  <data name="AFlagValueIndicatingWhetherTheItemSpecifiedShouldBeCheckedOrUnchecked" xml:space="preserve">
    <value>A flag value indicating whether the item specified should be checked or unchecked.</value>
  </data>
  <data name="SelectsAChildItemIdentifiedByItsTextOrByItsIndexEgFromAMenuDropdownOrAComboBoxEt" xml:space="preserve">
    <value>Selects a child item identified by its text, or by its index - eg from a menu dropdown, or a combo box, etc</value>
  </data>
  <data name="CountsAndReturnsTheNumberOfItemsContainedInAnActiveAccessibilityElementSuchAsALi" xml:space="preserve">
    <value>Counts and returns the number of items contained in an active accessibility element such as a listview, Treeview or ComboBox.</value>
  </data>
  <data name="GetsAllRowsAndColumnsOfAListviewComboboxDatagridListboxEtcAsACollectionForSimple" xml:space="preserve">
    <value>Gets all rows and columns (of a listview, combobox, datagrid, listbox etc) as a collection.  For simple controls, the collection has a single field called 'Item Text'. For multi-column controls, the fields will be named as they are in the control, where possible - otherwise names such as 'Column1', 'Column2' will be used.</value>
  </data>
  <data name="GetsAllSelectedRowsAndColumnsOfAListviewComboboxDatagridListboxEtcAsACollection" xml:space="preserve">
    <value>Gets all selected rows and columns (of a listview, combobox, datagrid, listbox etc) as a collection.</value>
  </data>
  <data name="GetsTheTextOfThePrincipalSelectionOfAListviewComboboxDatagridListboxEtc" xml:space="preserve">
    <value>Gets the text of the principal selection (of a listview, combobox, datagrid, listbox etc).</value>
  </data>
  <data name="ReadsTheCurrentValueFromAnActiveAccessibilityElement" xml:space="preserve">
    <value>Reads the current value from an active accessibility element</value>
  </data>
  <data name="ReadsTheCheckedValueFromAnActiveAccessibilityCheckboxRadioButtonEtc" xml:space="preserve">
    <value>Reads the 'checked' value from an active accessibility checkbox, radio button, etc</value>
  </data>
  <data name="ShowTheDropdownListOnAComboboxOrMenuEtc" xml:space="preserve">
    <value>Show the dropdown list on a combobox or menu, etc</value>
  </data>
  <data name="HideTheDropdownListOnAComboboxOrMenuEtc" xml:space="preserve">
    <value>Hide the dropdown list on a combobox or menu, etc</value>
  </data>
  <data name="ClearsTheSelectionOfChildItemsWhereAppropriateEgInAEditFieldListviewListboxEtc" xml:space="preserve">
    <value>Clears the selection (of child items where appropriate) - eg in a edit field, listview, listbox, etc</value>
  </data>
  <data name="SetsTheCheckedStatusOfARadioButtonOrCheckbox" xml:space="preserve">
    <value>Sets the checked status of a radio button or checkbox</value>
  </data>
  <data name="Checked" xml:space="preserve">
    <value>Checked</value>
  </data>
  <data name="TheNewValueToBeApplied" xml:space="preserve">
    <value>The new value to be applied.</value>
  </data>
  <data name="LaunchMainframe" xml:space="preserve">
    <value>Launch Mainframe</value>
  </data>
  <data name="LaunchTheMainframeTheParametersSuppliedInTheApplicationModellerWizardMayBeOption" xml:space="preserve">
    <value>Launch the mainframe. The parameters supplied in the Application Modeller wizard may be optionally overridden in this call. To use the value supplied in the wizard, leave the corresponding parameter blank. To supply an empty string to a parameter, use an expression which represents an empty string (eg "", or use a data item with an empty value).</value>
  </data>
  <data name="AttachMainframe" xml:space="preserve">
    <value>Attach Mainframe</value>
  </data>
  <data name="AttachToTheTargetMainframe" xml:space="preserve">
    <value>Attach to the target mainframe.</value>
  </data>
  <data name="OftenCalledTheSessionShortNameThisIsASingleLetterInTheRangeAZ" xml:space="preserve">
    <value>Often called the session short name this is a single letter in the range A..Z.</value>
  </data>
  <data name="DetachMainframe" xml:space="preserve">
    <value>Detach Mainframe</value>
  </data>
  <data name="DetachFromTheMainframe" xml:space="preserve">
    <value>Detach from the mainframe.</value>
  </data>
  <data name="TerminateMainframe" xml:space="preserve">
    <value>Terminate Mainframe</value>
  </data>
  <data name="TerminateTheMainframe" xml:space="preserve">
    <value>Terminate the mainframe.</value>
  </data>
  <data name="SendKeysMainframe" xml:space="preserve">
    <value>Send Keys Mainframe</value>
  </data>
  <data name="SendKeysToTheMainframeSeeTheMainframeIntegrationHelpPageForMoreDetails" xml:space="preserve">
    <value>Send keys to the mainframe. See the 'Mainframe Integration' help page for more details.</value>
  </data>
  <data name="TheKeycodesToBeSentToTheTargetApplication" xml:space="preserve">
    <value>The key-codes to be sent to the target application.</value>
  </data>
  <data name="Launch" xml:space="preserve">
    <value>Launch</value>
  </data>
  <data name="LaunchTheTargetApplicationTheParametersSuppliedInTheApplicationModellerWizardMay" xml:space="preserve">
    <value>Launch the target application. The parameters supplied in the Application Modeller wizard may be optionally overridden in this call. To use the value supplied in the wizard, leave the corresponding parameter blank. To supply an empty string to a parameter, use an expression which represents an empty string (eg "", or use a data item with an empty value).</value>
  </data>
  <data name="AttachesToAnExistingInstanceOfTheTargetApplicationTheParametersSuppliedInTheAppl" xml:space="preserve">
    <value>Attaches to an existing instance of the target application. The parameters supplied in the Application Modeller wizard may be optionally overridden in this call. To use the value supplied in the wizard, leave the corresponding parameter blank. To supply an empty string to a parameter, use an expression which represents an empty string (eg "", or use a data item with an empty value).</value>
  </data>
  <data name="Attach" xml:space="preserve">
    <value>Attach</value>
  </data>
  <data name="WindowTitlesAsCollection" xml:space="preserve">
    <value>Window Titles (as Collection)</value>
  </data>
  <data name="OptionalParameterACollectionOfDifferentPatternsDesignedToMatchAnyOneOfANumberOfW" xml:space="preserve">
    <value>Optional Parameter. A collection of different patterns designed to match any one of a number of window titles. Window title matching patterns should be contained in a field called "Window Title". A successful match amongst any of the patterns will cause the matching application to be attached. The wildcard characters "*", "?", "#" are valid, and may be escaped with a backslash character ("\").</value>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value>Window Title</value>
  </data>
  <data name="OptionalParameterAPatternSpecifyingASingleWindowTitleToBeMatchedTheWildcardChara" xml:space="preserve">
    <value>Optional parameter. A pattern specifying a single window title to be matched. The wildcard characters "*", "?", "#" are valid, and may be escaped with a backslash character ("\").</value>
  </data>
  <data name="ProcessName" xml:space="preserve">
    <value>Process Name</value>
  </data>
  <data name="OptionalParameterAPatternSpecifyingTheProcessNameOfTheApplicationTheWildcardChar" xml:space="preserve">
    <value>Optional parameter. A pattern specifying the process name of the application. The wildcard characters "*", "?", "#" are valid, and may be escaped with a backslash character ("\").</value>
  </data>
  <data name="ProcessID" xml:space="preserve">
    <value>Process ID</value>
  </data>
  <data name="OptionalParameterTheProcessIdentifierPidOfTheProcess" xml:space="preserve">
    <value>Optional parameter. The process identifier (pid) of the process.</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="OptionalParameterTheUsernameOfTheUserWhoTheProcessIsRunningAs" xml:space="preserve">
    <value>Optional parameter. The username of the user who the process is running as.</value>
  </data>
  <data name="ChildIndex" xml:space="preserve">
    <value>Child Index</value>
  </data>
  <data name="OptionalParameterTheChildProcessIndex" xml:space="preserve">
    <value>Optional parameter. The child process index</value>
  </data>
  <data name="Detach" xml:space="preserve">
    <value>Detach</value>
  </data>
  <data name="DetachesFromTheCurrentlyConnectedApplication" xml:space="preserve">
    <value>Detaches from the currently connected application.</value>
  </data>
  <data name="Terminate" xml:space="preserve">
    <value>Terminate</value>
  </data>
  <data name="TerminateTheTargetApplicationForEmergencyUseOnly" xml:space="preserve">
    <value>Terminate the target application. For emergency use only</value>
  </data>
  <data name="IsConnected" xml:space="preserve">
    <value>Is Connected</value>
  </data>
  <data name="DetectsWhetherTheBusinessObjectIsCurrentlyConnectedToTheApplicationBeItThroughLa" xml:space="preserve">
    <value>Detects whether the business object is currently connected to the application (be it through launching or attaching).</value>
  </data>
  <data name="GlobalSendKeys" xml:space="preserve">
    <value>Global Send Keys</value>
  </data>
  <data name="SendKeysToTheActiveApplication" xml:space="preserve">
    <value>Send keys to the active application</value>
  </data>
  <data name="TheKeycodesToBeSentToTheTargetApplicationFullDetailsAtHttpmsdn2microsoftcomenusl" xml:space="preserve">
    <value>The key-codes to be sent to the target application. Full details at [http://msdn2.microsoft.com/en-us/library/system.windows.forms.sendkeys.send.aspx MSDN Sendkeys.Send()].</value>
  </data>
  <data name="Interval" xml:space="preserve">
    <value>Interval</value>
  </data>
  <data name="TheNumberOfSecondsToWaitBetweenEachKeypressNoteThatIfThisIsSetToANonzeroValueTex" xml:space="preserve">
    <value>The number of seconds to wait between each keypress. Note that if this is set to a non-zero value, 'Text' must not contain any control characters or an error will occur</value>
  </data>
  <data name="GlobalSendKeyEvents" xml:space="preserve">
    <value>Global Send Key Events</value>
  </data>
  <data name="SendKeysToTheApplicationUsingEventsTheseEventsTakePlaceAtTheLowestLevelAndAreRec" xml:space="preserve">
    <value>Send keys to the application using events. These events take place at the lowest level, and are received by whichever application is currently focused. The SendKeys method is preferred unless there is a special reason for using this method.</value>
  </data>
  <data name="TheKeyEventsToBeSentToTheTargetApplicationSpecialCharactersShouldBeEnclosedInCur" xml:space="preserve">
    <value>The key events to be sent to the target application. Special characters should be enclosed in curly braces (eg {{SPACE}}, {{ESC}}, {{PGUP}}, {{PGDN}}, {{LEFT}}, {{RIGHT}}, {{UP}}, {{DOWN}}). The modifiers "&lt;" and "&gt;" change the following letter into a key-down or key-up operation (respectively), instead of a full key-press (ie key-down followed by key-up operation).{0}For example "hello" sends those keystrokes; "&lt;{{CTRL}}s&gt;{{CTRL}}" simulates depressing the control key, pressing "s" and releasing the control key again. Special characters (such as "&lt;", "&gt;", "{{", "}}") should be enclosed in curly braces if meant literally. Any key name listed at [https://msdn.microsoft.com/en-us/library/system.windows.forms.keys.aspx MSDN Keys Enumeration] can also be used.</value>
  </data>
  <data name="TheNumberOfSecondsToWaitBetweenEachKeypressDefaultIs01Ie100ms" xml:space="preserve">
    <value>The number of seconds to wait between each keypress. Default is 0.1, ie. 100ms</value>
  </data>
  <data name="ActivateApplication" xml:space="preserve">
    <value>Activate Application</value>
  </data>
  <data name="ActivateTheApplicationIeBringsToTheForegroundTargetElementShouldBeTheAppsMainWin" xml:space="preserve">
    <value>Activate the application, i.e. brings to the foreground. Target element should be the app's main window.</value>
  </data>
  <data name="WindowPressKeys" xml:space="preserve">
    <value>Window Press Keys</value>
  </data>
  <data name="SendKeypressesToTheGivenWindowNoteThatCareMustSometimesBeTakenToDirectTheKeypres" xml:space="preserve">
    <value>Send keypresses to the given window. Note that care must sometimes be taken to direct the keypresses to the correct window. For example, in Notepad, sending to the main window will have no effect, but sending to the 'Edit' window contained within it will work.</value>
  </data>
  <data name="TheTextToBeSentEachLetterRepresentsADifferentKeystrokeWhichWillBeSentOneByOne" xml:space="preserve">
    <value>The text to be sent. Each letter represents a different keystroke, which will be sent one by one.</value>
  </data>
  <data name="TheNumberOfSecondsToWaitBetweenEachKeystroke" xml:space="preserve">
    <value>The number of seconds to wait between each keystroke.</value>
  </data>
  <data name="WindowPressKeysWithAlt" xml:space="preserve">
    <value>Window Press Keys with Alt</value>
  </data>
  <data name="SendKeypressesToTheGivenWindowWithTheAltKeyDown" xml:space="preserve">
    <value>Send keypresses to the given window with the alt key down</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="PerformTheDefaultActionForTheApplicationElement" xml:space="preserve">
    <value>Perform the default action for the application element</value>
  </data>
  <data name="Move" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="MoveAWindowToTheSpecifiedLocation" xml:space="preserve">
    <value>Move a window to the specified location.</value>
  </data>
  <data name="TheXCoordinateOfTheNewWindowLocationRelativeToTheTopleftCornerOfTheScreen" xml:space="preserve">
    <value>The X coordinate of the new window location, relative to the top-left corner of the screen.</value>
  </data>
  <data name="TheYCoordinateOfTheNewWindowLocationRelativeToTheTopleftCornerOfTheScreen" xml:space="preserve">
    <value>The Y coordinate of the new window location, relative to the top-left corner of the screen.</value>
  </data>
  <data name="Resize" xml:space="preserve">
    <value>Resize</value>
  </data>
  <data name="ResizeAWindow" xml:space="preserve">
    <value>Resize a window.</value>
  </data>
  <data name="Width" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="TheNewWidthOfTheWindowInPixels" xml:space="preserve">
    <value>The new width of the window, in pixels.</value>
  </data>
  <data name="Height" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="Maximise" xml:space="preserve">
    <value>Maximise</value>
  </data>
  <data name="MaximisesTheWindowToFillTheScreen" xml:space="preserve">
    <value>Maximises the window to fill the screen.</value>
  </data>
  <data name="Minimise" xml:space="preserve">
    <value>Minimise</value>
  </data>
  <data name="MinimisesTheWindowToTheTaskTray" xml:space="preserve">
    <value>Minimises the window to the task tray.</value>
  </data>
  <data name="Restore" xml:space="preserve">
    <value>Restore</value>
  </data>
  <data name="RestoresTheWindowFromItsMinimisedOrMaximisedState" xml:space="preserve">
    <value>Restores the window from its minimised or maximised state.</value>
  </data>
  <data name="HideAllWindows" xml:space="preserve">
    <value>Hide All Windows</value>
  </data>
  <data name="HidesAllToplevelWindowsBelongingToAnApplicationUseHideWindowToHideAnIndividualWi" xml:space="preserve">
    <value>Hides all top-level windows belonging to an application. Use 'Hide Window' to hide an individual window</value>
  </data>
  <data name="HideWindow" xml:space="preserve">
    <value>Hide Window</value>
  </data>
  <data name="HidesAToplevelWindowByMovingItOffscreenAndRemovingFromTheTaskbar" xml:space="preserve">
    <value>Hides a top-level window by moving it offscreen, and removing from the taskbar.</value>
  </data>
  <data name="UnhideWindow" xml:space="preserve">
    <value>Unhide Window</value>
  </data>
  <data name="UnhidesAToplevelWindowWhichHasPreviouslyBeenHidden" xml:space="preserve">
    <value>Unhides a top-level window which has previously been hidden.</value>
  </data>
  <data name="IsWindowHidden" xml:space="preserve">
    <value>Is Window Hidden</value>
  </data>
  <data name="DeterminesWhetherAWindowHasPreviouslyBeenHiddenUsingACallToHideWindow" xml:space="preserve">
    <value>Determines whether a window has previously been hidden using a call to 'Hide Window'.</value>
  </data>
  <data name="PerformsAnAction" xml:space="preserve">
    <value>Performs an action</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="BringsAJavaElementIntoFocusReadyToReceiveKeyboardInput" xml:space="preserve">
    <value>Brings a java element into focus, ready to receive keyboard input</value>
  </data>
  <data name="SelectTab" xml:space="preserve">
    <value>Select Tab</value>
  </data>
  <data name="SelectsAJavaTabFromAJavaTabControl" xml:space="preserve">
    <value>Selects a java tab from a java tab control</value>
  </data>
  <data name="GetsTheNumberOfItemsContainedInAJavaComponentEgTheNumberOfRowsInATableEgTheNumbe" xml:space="preserve">
    <value>Gets the number of items contained in a java component, eg the number of rows in a table, eg the number of items in a combo box</value>
  </data>
  <data name="GetsAllItemsFromAJavaTableComboBoxEtcForSimpleControlsTheCollectionHasASingleFie" xml:space="preserve">
    <value>Gets all items from a java table, combo box, etc.  For simple controls, the collection has a single field called 'Item Text'. For multi-column controls, the fields will be named as they are in the control, where possible - otherwise names such as 'Column1', 'Column2' will be used.</value>
  </data>
  <data name="GetsAllSelectedItemsFromAJavaTableComboBoxEtc" xml:space="preserve">
    <value>Gets all selected items from a java table, combo box, etc</value>
  </data>
  <data name="ClickAtTheCentreOfTheActiveAccessibilityElement" xml:space="preserve">
    <value>Click at the centre of the Active Accessibility element.</value>
  </data>
  <data name="GetName" xml:space="preserve">
    <value>Get Name</value>
  </data>
  <data name="GetsTheNameOfTheAccessibilityElementSomeApplicationsExposeCurrentValueInformatio" xml:space="preserve">
    <value>Gets the name of the Accessibility element. Some applications expose current value information in the Name Attribute</value>
  </data>
  <data name="GetDescription" xml:space="preserve">
    <value>Get Description</value>
  </data>
  <data name="GetsTheDescriptionOfTheAccessibilityElementSomeApplicationsExposeCurrentValueInf" xml:space="preserve">
    <value>Gets the description of the Accessibility element. Some applications expose current value information in the Description Attribute</value>
  </data>
  <data name="GetTable" xml:space="preserve">
    <value>Get Table</value>
  </data>
  <data name="GetTheActiveAccessibilityTableSpecified" xml:space="preserve">
    <value>Get the Active Accessibility table specified</value>
  </data>
  <data name="FocusTheActiveAccessibilityElement" xml:space="preserve">
    <value>Focus the Active Accessibility element.</value>
  </data>
  <data name="TheNumberOfSecondsToWaitBeforeEachKeypressNoteThatIfThisIsSetToANonzeroValueText" xml:space="preserve">
    <value>The number of seconds to wait before each keypress. Note that if this is set to a non-zero value, 'Text' must not contain any control characters or an error will occur</value>
  </data>
  <data name="GetDocumentURL" xml:space="preserve">
    <value>Get Document URL</value>
  </data>
  <data name="RetrievesTheURLOfTheCurrentlyLoadedDocument" xml:space="preserve">
    <value>Retrieves the URL of the currently loaded document</value>
  </data>
  <data name="GetDocumentURLDomain" xml:space="preserve">
    <value>Get Document URL Domain</value>
  </data>
  <data name="RetrievesTheURLDomainOfTheCurrentlyLoadedDocument" xml:space="preserve">
    <value>Retrieves the URL domain of the currently loaded document</value>
  </data>
  <data name="Navigate" xml:space="preserve">
    <value>Navigate</value>
  </data>
  <data name="NavigateToAURL" xml:space="preserve">
    <value>Navigate to a URL</value>
  </data>
  <data name="URL" xml:space="preserve">
    <value>URL</value>
  </data>
  <data name="TheURLToNavigateTo" xml:space="preserve">
    <value>The URL to navigate to.</value>
  </data>
  <data name="ClickTheCentreOfAnHTMLElement" xml:space="preserve">
    <value>Click the centre of an HTML element.</value>
  </data>
  <data name="DoubleClickCentre" xml:space="preserve">
    <value>Double Click Centre</value>
  </data>
  <data name="DoubleClickTheCentreOfAnHTMLElement" xml:space="preserve">
    <value>Double click the centre of an HTML element.</value>
  </data>
  <data name="GetAllChildItemsOfAnHTMLElementAsACollectionForSimpleControlsTheCollectionHasASi" xml:space="preserve">
    <value>Get all child items of an HTML element, as a collection. For simple controls, the collection has a single field called 'Item Text'. For multi-column controls, the fields will be named as they are in the control, where possible - otherwise names such as 'Column1', 'Column2' will be used.</value>
  </data>
  <data name="GetsAllElementsOfAHTMLTableAsACollection" xml:space="preserve">
    <value>Gets all elements of a HTML table, as a collection.</value>
  </data>
  <data name="GetAllChildItemsOfAnHTMLElementWhichAreSelectedAsACollection" xml:space="preserve">
    <value>Get all child items of an HTML element which are selected, as a collection.</value>
  </data>
  <data name="SelectsTheItemInAComboBoxThatMatchesTheGivenParameters" xml:space="preserve">
    <value>Selects the item in a ComboBox that matches the given parameters.</value>
  </data>
  <data name="ItemValue" xml:space="preserve">
    <value>Item Value</value>
  </data>
  <data name="TheValueOfTheItemToSelectedThisParameterIsIgnoredUnlessTheItemTextAndItemPositio" xml:space="preserve">
    <value>The value of the item to selected. This parameter is ignored unless the 'Item Text' and 'Item Position' parameter is blank.</value>
  </data>
  <data name="GetTheNumberOfChildItemsOfAnHTMLElement" xml:space="preserve">
    <value>Get the number of child items of an HTML element.</value>
  </data>
  <data name="GetTheNumberOfChildItemsOfAnHTMLElementWhichAreSelected" xml:space="preserve">
    <value>Get the number of child items of an HTML element, which are selected.</value>
  </data>
  <data name="InvokeJavascriptFunction" xml:space="preserve">
    <value>Invoke Javascript Function</value>
  </data>
  <data name="CallsTheSpecifiedJavascriptFunctionThisCanBeAStandardJavascriptFunctionOrOneWhic" xml:space="preserve">
    <value>Calls the specified javascript function. This can be a standard javascript function, or one which is defined in the target HTML page.</value>
  </data>
  <data name="FunctionName" xml:space="preserve">
    <value>Function Name</value>
  </data>
  <data name="TheNameOfTheFunctionToBeCalled" xml:space="preserve">
    <value>The name of the function to be called.</value>
  </data>
  <data name="Arguments" xml:space="preserve">
    <value>Arguments</value>
  </data>
  <data name="TheArgumentsToPassToTheFunctionAsAnArrayOfObjectsInJSONFormat" xml:space="preserve">
    <value>The arguments to pass to the function, as an array of objects in JSON format</value>
  </data>
  <data name="InsertJavascriptFragment" xml:space="preserve">
    <value>Insert Javascript Fragment</value>
  </data>
  <data name="InsertsTheSuppliedJavascriptFragmentIntoTheTargetDocumentThisCanBeAMixtureOfMeth" xml:space="preserve">
    <value>Inserts the supplied javascript fragment into the target document. This can be a mixture of methods and variables. The methods can later be invoked using the corresponding method.</value>
  </data>
  <data name="Fragment" xml:space="preserve">
    <value>Fragment</value>
  </data>
  <data name="TheJavascriptFragmentToBeInsertedEg0varSuccess0functionDoSomethingAlerthello0Suc" xml:space="preserve">
    <value>The javascript fragment to be inserted. Eg {0}var Success;{0}function doSomething() {{ alert('hello');{0}Success = true;{0}}}</value>
  </data>
  <data name="UpdateCookie" xml:space="preserve">
    <value>Update Cookie</value>
  </data>
  <data name="UpdatesTheGivenCookieOnTheTargetDocumentCookiesNeedToBeSpecifiedInTheFormatNamev" xml:space="preserve">
    <value>Updates the given cookie on the target document. Cookies need to be specified in the format "name=value". By default the cookie will expire when the browser is closed, but to have the cookie persist set an expiry date using "name=value; expires=date". To delete a cookie use "name=; expires=date", where name is the name of the cookie and date is in the past. Dates should be in UTC format e.g. Thu, 18 Dec 2013 12:00:00 UTC</value>
  </data>
  <data name="Cookie" xml:space="preserve">
    <value>Cookie</value>
  </data>
  <data name="TheCookieDataToBeSet" xml:space="preserve">
    <value>The cookie data to be set</value>
  </data>
  <data name="HTMLSnapshot" xml:space="preserve">
    <value>HTML Snapshot</value>
  </data>
  <data name="TakeASnapshotOfAllHTMLDocumentElements" xml:space="preserve">
    <value>Take a snapshot of all HTML document elements.</value>
  </data>
  <data name="SourceCapture" xml:space="preserve">
    <value>Source Capture</value>
  </data>
  <data name="CaptureTheSourceOfTheHTMLDocument" xml:space="preserve">
    <value>Capture the source of the HTML document.</value>
  </data>
  <data name="GetHTML" xml:space="preserve">
    <value>Get HTML</value>
  </data>
  <data name="GetsTheHTMLOfAnElement" xml:space="preserve">
    <value>Gets the HTML of an element.</value>
  </data>
  <data name="GetPath" xml:space="preserve">
    <value>Get Path</value>
  </data>
  <data name="GetsPathOfTheHTMLElement" xml:space="preserve">
    <value>Gets Path of the HTML element.</value>
  </data>
  <data name="Snapshot" xml:space="preserve">
    <value>Snapshot</value>
  </data>
  <data name="TakeASnapshotOfAllElements" xml:space="preserve">
    <value>Take a snapshot of all elements.</value>
  </data>
  <data name="ClickLink" xml:space="preserve">
    <value>Click Link</value>
  </data>
  <data name="ClicksANetLinkLabel" xml:space="preserve">
    <value>Clicks a .Net Link Label</value>
  </data>
  <data name="ReadTextDDE" xml:space="preserve">
    <value>Read Text (DDE)</value>
  </data>
  <data name="ReadsTheValueOfADDEField" xml:space="preserve">
    <value>Reads the value of a DDE field</value>
  </data>
  <data name="ExecuteCommandDDE" xml:space="preserve">
    <value>Execute Command (DDE)</value>
  </data>
  <data name="ExecutesTheCommandRepresentedByTheCurrentDDEElement" xml:space="preserve">
    <value>Executes the command represented by the current DDE element.</value>
  </data>
  <data name="TheValueIfAnyToSupplyToTheDDECommand" xml:space="preserve">
    <value>The value (if any) to supply to the DDE command.</value>
  </data>
  <data name="NoCheck" xml:space="preserve">
    <value>No Check</value>
  </data>
  <data name="IfTrueThenNoCheckWillBeMadeAsToTheSuccessOfTheOperationThisProvidesAWorkaroundFo" xml:space="preserve">
    <value>If true, then no check will be made as to the success of the operation. This provides a workaround for a badly behaved application which performs the requested command, but fails to feed back a success status. Defaults to False.</value>
  </data>
  <data name="Verify" xml:space="preserve">
    <value>Verify</value>
  </data>
  <data name="VerifiesThatAnElementExistsAndOptionallyHighlightsTheElement" xml:space="preserve">
    <value>Verifies that an element exists, and optionally highlights the element</value>
  </data>
  <data name="Highlight" xml:space="preserve">
    <value>Highlight</value>
  </data>
  <data name="SpecifiesThatTheElementShouldBeHighlighted" xml:space="preserve">
    <value>Specifies that the element should be highlighted</value>
  </data>
  <data name="Click" xml:space="preserve">
    <value>Click</value>
  </data>
  <data name="ClicksOnTheGivenElement" xml:space="preserve">
    <value>Clicks on the given element</value>
  </data>
  <data name="DoubleClick" xml:space="preserve">
    <value>Double Click</value>
  </data>
  <data name="DoubleClickTheGivenElement" xml:space="preserve">
    <value>Double click the given element</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="SelectsTheCurrentElementAndAnyDescendantElements" xml:space="preserve">
    <value>Selects the current element and any descendant elements</value>
  </data>
  <data name="SetsTheKeyboardFocusToTheGivenElement" xml:space="preserve">
    <value>Sets the keyboard focus to the given element</value>
  </data>
  <data name="SetAttribute" xml:space="preserve">
    <value>Set Attribute</value>
  </data>
  <data name="SetsTheGivenAttributeOnTheElement" xml:space="preserve">
    <value>Sets the given attribute on the element</value>
  </data>
  <data name="TheNameOfTheAttributeToSet" xml:space="preserve">
    <value>The name of the attribute to set</value>
  </data>
  <data name="TheValueToSetTheAttributeTo" xml:space="preserve">
    <value>The value to set the attribute to</value>
  </data>
  <data name="SetsTheCheckedStateOfTheElement" xml:space="preserve">
    <value>Sets the checked state of the element</value>
  </data>
  <data name="WhetherTheControlShouldBeChecked" xml:space="preserve">
    <value>Whether the control should be checked</value>
  </data>
  <data name="ScrollTo" xml:space="preserve">
    <value>Scroll To</value>
  </data>
  <data name="ScrollTheParentToTheElement" xml:space="preserve">
    <value>Scroll the parent to the element</value>
  </data>
  <data name="SetAddress" xml:space="preserve">
    <value>Set Address</value>
  </data>
  <data name="NavigatesToTheGivenAddress" xml:space="preserve">
    <value>Navigates to the given address</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="TheWebAddressToNavigateTo" xml:space="preserve">
    <value>The Web address to navigate to</value>
  </data>
  <data name="UpdatesTheGivenCookieOnTheTargetDocumentCookiesNeedToBeSpecifiedInTheFormatNa_1" xml:space="preserve">
    <value>Updates the given cookie on the target document. Cookies need to be specified in the format "name=value". By default the cookie will expire when the browser is closed, but to have the cookie persist set an expiry date using "name=value; expires=date". To delete a cookie use "name=; expires=date", where name is the name of the cookie and date is in the past. Dates should be in UTC format e.g. Thu, 18 Dec 2013 12:00:00 UTC</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="SubmitsTheForm" xml:space="preserve">
    <value>Submits the form</value>
  </data>
  <data name="SelectListItem" xml:space="preserve">
    <value>Select List Item</value>
  </data>
  <data name="SelectsAnItemInTheListByNameOrIndex" xml:space="preserve">
    <value>Selects an item in the list by name or index</value>
  </data>
  <data name="ItemIndex" xml:space="preserve">
    <value>Item Index</value>
  </data>
  <data name="TheIndexOfTheItemToSelect" xml:space="preserve">
    <value>The index of the item to select</value>
  </data>
  <data name="TheTextOfTheItemToSelect" xml:space="preserve">
    <value>The text of the item to select</value>
  </data>
  <data name="AddToSelection" xml:space="preserve">
    <value>Add To Selection</value>
  </data>
  <data name="AddsAnItemToTheListsSelectedItemsByNameOrIndex" xml:space="preserve">
    <value>Adds an item to the list's selected items by name or index</value>
  </data>
  <data name="TheIndexOfTheItem" xml:space="preserve">
    <value>The index of the item</value>
  </data>
  <data name="TheTextOfTheItem" xml:space="preserve">
    <value>The text of the item</value>
  </data>
  <data name="RemoveFromSelection" xml:space="preserve">
    <value>Remove From Selection</value>
  </data>
  <data name="RemovesAnItemFromTheListsSelectedItemsByNameOrIndex" xml:space="preserve">
    <value>Removes an item from the list's selected items by name or index</value>
  </data>
  <data name="ClickMenuItem" xml:space="preserve">
    <value>Click Menu Item</value>
  </data>
  <data name="ClicksTheMenuItemIdentifiedByNameOrIndex" xml:space="preserve">
    <value>Clicks the menu item identified by name or index</value>
  </data>
  <data name="TheIndexOfTheItemToClick" xml:space="preserve">
    <value>The index of the item to click</value>
  </data>
  <data name="TheTextOfTheItemToClick" xml:space="preserve">
    <value>The text of the item to click</value>
  </data>
  <data name="ToggleExpandCollapse" xml:space="preserve">
    <value>Toggle Expand/Collapse</value>
  </data>
  <data name="TogglesWhetherTheElementIsExpandedOrCollapsed" xml:space="preserve">
    <value>Toggles whether the element is expanded or collapsed</value>
  </data>
  <data name="Expand" xml:space="preserve">
    <value>Expand</value>
  </data>
  <data name="ExpandsTheElement" xml:space="preserve">
    <value>Expands the element</value>
  </data>
  <data name="Collapse" xml:space="preserve">
    <value>Collapse</value>
  </data>
  <data name="CollapsesTheElement" xml:space="preserve">
    <value>Collapses the element</value>
  </data>
  <data name="CheckRadio" xml:space="preserve">
    <value>Check Radio</value>
  </data>
  <data name="SetsTheRadioButtonToBeTheOneInItsGroupThatsChecked" xml:space="preserve">
    <value>Sets the radio button to be the one in its group that's checked</value>
  </data>
  <data name="SelectTextRange" xml:space="preserve">
    <value>Select Text Range</value>
  </data>
  <data name="SelectsARangeOfTextWithinTheElement" xml:space="preserve">
    <value>Selects a range of text within the element</value>
  </data>
  <data name="StartIndex" xml:space="preserve">
    <value>Start Index</value>
  </data>
  <data name="TheCharacterToStartTheSelectionAt" xml:space="preserve">
    <value>The character to start the selection at</value>
  </data>
  <data name="TheNumberOfCharactersToSelect" xml:space="preserve">
    <value>The number of characters to select</value>
  </data>
  <data name="GetAttribute" xml:space="preserve">
    <value>Get Attribute</value>
  </data>
  <data name="GetsTheGivenAttributeOfTheElement" xml:space="preserve">
    <value>Gets the given attribute of the element</value>
  </data>
  <data name="GetsTheBoundsOfTheElementRelativeToThePage" xml:space="preserve">
    <value>Gets the bounds of the element relative to the page</value>
  </data>
  <data name="GetCheckState" xml:space="preserve">
    <value>Get Check State</value>
  </data>
  <data name="GetsTheCheckedStateOfTheElement" xml:space="preserve">
    <value>Gets the checked state of the element</value>
  </data>
  <data name="GetColumnCount" xml:space="preserve">
    <value>Get Column Count</value>
  </data>
  <data name="GetsTheNumberOfColumnsInTheTable" xml:space="preserve">
    <value>Gets the number of columns in the table</value>
  </data>
  <data name="GetFormValues" xml:space="preserve">
    <value>Get Form Values</value>
  </data>
  <data name="GetsTheValuesFromEachInputElementInAForm" xml:space="preserve">
    <value>Gets the values from each input element in a form</value>
  </data>
  <data name="GetID" xml:space="preserve">
    <value>Get ID</value>
  </data>
  <data name="GetsTheIDOfTheElement" xml:space="preserve">
    <value>Gets the ID of the element</value>
  </data>
  <data name="GetIsOnScreen" xml:space="preserve">
    <value>Get Is On Screen</value>
  </data>
  <data name="GetsAValueIndicatingWhetherTheElementIsVisibleOnScreen" xml:space="preserve">
    <value>Gets a value indicating whether the element is visible on screen</value>
  </data>
  <data name="GetIsSelected" xml:space="preserve">
    <value>Get Is Selected</value>
  </data>
  <data name="GetsAValueIndicatingWhetherTheListItemIsSelected" xml:space="preserve">
    <value>Gets a value indicating whether the list item is selected</value>
  </data>
  <data name="GetIsVisible" xml:space="preserve">
    <value>Get Is Visible</value>
  </data>
  <data name="GetsAValueIndicatingWhetherTheElementIsVisible" xml:space="preserve">
    <value>Gets a value indicating whether the element is visible</value>
  </data>
  <data name="GetItems" xml:space="preserve">
    <value>Get Items</value>
  </data>
  <data name="GetsAllItemsFromAList" xml:space="preserve">
    <value>Gets all items from a list</value>
  </data>
  <data name="GetLabel" xml:space="preserve">
    <value>Get Label</value>
  </data>
  <data name="GetsTheLabelAssociatedWithAnElement" xml:space="preserve">
    <value>Gets the label associated with an element</value>
  </data>
  <data name="GetLinkAddress" xml:space="preserve">
    <value>Get Link Address</value>
  </data>
  <data name="GetsTheWebAddressThatALinkPointsTo" xml:space="preserve">
    <value>Gets the web address that a link points to</value>
  </data>
  <data name="GetsTheMaximumValueOfANumericElement" xml:space="preserve">
    <value>Gets the maximum value of a numeric element</value>
  </data>
  <data name="GetsTheMinimumValueOfANumericElement" xml:space="preserve">
    <value>Gets the minimum value of a numeric element</value>
  </data>
  <data name="GetPageURL" xml:space="preserve">
    <value>Get Page URL</value>
  </data>
  <data name="GetsTheURLOfTheWebPageThatContainsThisElement" xml:space="preserve">
    <value>Gets the URL of the web page that contains this element</value>
  </data>
  <data name="GetRowCount" xml:space="preserve">
    <value>Get Row Count</value>
  </data>
  <data name="GetsTheNumberOfRowsInTheTable" xml:space="preserve">
    <value>Gets the number of rows in the table</value>
  </data>
  <data name="GetsTheItemsInAListWhichAreSelected" xml:space="preserve">
    <value>Gets the items in a list which are selected</value>
  </data>
  <data name="GetSelectedItemsText" xml:space="preserve">
    <value>Get Selected Items Text</value>
  </data>
  <data name="GetsTheTextSelectedInAnElement" xml:space="preserve">
    <value>Gets the text selected in an element</value>
  </data>
  <data name="GetTableItem" xml:space="preserve">
    <value>Get Table Item</value>
  </data>
  <data name="GetsTheItemInATableAtTheGivenRowAndColumn" xml:space="preserve">
    <value>Gets the item in a table at the given row and column</value>
  </data>
  <data name="ColumnIndex_1" xml:space="preserve">
    <value>Column index</value>
  </data>
  <data name="RowIndex_1" xml:space="preserve">
    <value>Row index</value>
  </data>
  <data name="GetTableItems" xml:space="preserve">
    <value>Get Table Items</value>
  </data>
  <data name="GetsAllItemsInATable" xml:space="preserve">
    <value>Gets all items in a table</value>
  </data>
  <data name="GetsTheTextContainedInAnElement" xml:space="preserve">
    <value>Gets the text contained in an element</value>
  </data>
  <data name="ReadsTheCurrentValueFromAWebElement" xml:space="preserve">
    <value>Reads the current value from a Web element</value>
  </data>
  <data name="GetsTheNameOfTheUIAElementSomeApplicationsExposeCurrentValueInformationInTheName" xml:space="preserve">
    <value>Gets the name of the UIA element. Some applications expose current value information in the Name Attribute</value>
  </data>
  <data name="FocusTheUIAElement" xml:space="preserve">
    <value>Focus the UIA element.</value>
  </data>
  <data name="PressTheUIAutomationButtonElementThisWillInvokeToggleOrExpandcollapseTheButtonDe" xml:space="preserve">
    <value>Press the UI Automation button element (this will invoke, toggle or expand/collapse the button depending which action the button supports.</value>
  </data>
  <data name="PressTheUIAutomationElement" xml:space="preserve">
    <value>Press the UI Automation element</value>
  </data>
  <data name="DeselectsAnySelectedItemsAndThenSelectsTheUIAutomationElement" xml:space="preserve">
    <value>Deselects any selected items and then selects the UI Automation element</value>
  </data>
  <data name="PressMenuItem" xml:space="preserve">
    <value>Press Menu Item</value>
  </data>
  <data name="PressTheUIAutomationMenuItemElementEitherByExpandingASubmenuOrInvokingTheMenuIte" xml:space="preserve">
    <value>Press the UI Automation menu item element, either by expanding a submenu or invoking the menu item itself</value>
  </data>
  <data name="Toggle" xml:space="preserve">
    <value>Toggle</value>
  </data>
  <data name="ChangeTheToggleStateOfTheUIAutomationElement" xml:space="preserve">
    <value>Change the toggle state of the UI Automation element</value>
  </data>
  <data name="GetTheCheckedStateOfTheUIAutomationElement" xml:space="preserve">
    <value>Get the checked state of the UI Automation element</value>
  </data>
  <data name="UIAGetToggleState" xml:space="preserve">
    <value>UIAGetToggleState</value>
  </data>
  <data name="GetPressed" xml:space="preserve">
    <value>Get Pressed</value>
  </data>
  <data name="GetThePressedStateOfTheUIAutomationElement" xml:space="preserve">
    <value>Get the pressed state of the UI Automation element</value>
  </data>
  <data name="SetsTheCheckedStateOfTheUIAutomationElement" xml:space="preserve">
    <value>Sets the checked state of the UI Automation element</value>
  </data>
  <data name="ReadsTheCurrentValueFromAUIAutomationElement" xml:space="preserve">
    <value>Reads the current value from a UI Automation element</value>
  </data>
  <data name="SetCurrentValue" xml:space="preserve">
    <value>Set Current Value</value>
  </data>
  <data name="WritesTheCurrentValueToAUIAutomationElement" xml:space="preserve">
    <value>Writes the current value to a UI Automation element</value>
  </data>
  <data name="ExpandCollapse" xml:space="preserve">
    <value>Expand/Collapse</value>
  </data>
  <data name="ExpandsOrCollapsesTheUIAutomationElement" xml:space="preserve">
    <value>Expands or collapses the UI Automation element.</value>
  </data>
  <data name="SetsTheCheckedStatusOfAUIARadioButton" xml:space="preserve">
    <value>Sets the checked status of a UIA radio button</value>
  </data>
  <data name="GetsTheTextOfTheSelectedItem" xml:space="preserve">
    <value>Gets the text of the selected item.</value>
  </data>
  <data name="GetsTheTextSelectedInTheElement" xml:space="preserve">
    <value>Gets the text selected in the element</value>
  </data>
  <data name="ReadsTheCurrentStateOfWhetherTheElementIsExpandedOrCollapsedIfTheElementCannotBe" xml:space="preserve">
    <value>Reads the current state of whether the element is expanded or collapsed. If the element cannot be expanded, this will return False</value>
  </data>
  <data name="GetsTheSelectedItemsInTheList" xml:space="preserve">
    <value>Gets the selected items in the list</value>
  </data>
  <data name="GetItemCount" xml:space="preserve">
    <value>Get Item Count</value>
  </data>
  <data name="GetsTheNumberOfItemsInTheList" xml:space="preserve">
    <value>Gets the number of items in the list</value>
  </data>
  <data name="GetsAllItemsInTheList" xml:space="preserve">
    <value>Gets all items in the list</value>
  </data>
  <data name="DeselectsAnySelectedItemsAndThenSelectsTheCurrentElementIfTheItemTextParameterIs" xml:space="preserve">
    <value>Deselects any selected items and then selects the current element. If the Item Text parameter is supplied, this takes precedence over the Item Position parameter.</value>
  </data>
  <data name="TheOnebasedIndexOfTheItemToSelect" xml:space="preserve">
    <value>The one-based index of the item to select</value>
  </data>
  <data name="SelectsTheSpecifiedItemInAUIAComboBoxIfTheItemTextParameterIsSuppliedThisTakesPr" xml:space="preserve">
    <value>Selects the specified item in a UIA combo box. If the Item Text parameter is supplied, this takes precedence over the Item Position parameter.</value>
  </data>
  <data name="GetsTheNumberOfItemsInTheListInAUIAComboBox" xml:space="preserve">
    <value>Gets the number of items in the list in a UIA combo box.</value>
  </data>
  <data name="GetsAllItemsInTheListInAUIAComboBox" xml:space="preserve">
    <value>Gets all items in the list in a UIA combo box.</value>
  </data>
  <data name="ScrollVertically" xml:space="preserve">
    <value>Scroll Vertically</value>
  </data>
  <data name="ScrollsAnElementVertically" xml:space="preserve">
    <value>Scrolls an element vertically</value>
  </data>
  <data name="BigStep" xml:space="preserve">
    <value>Big Step</value>
  </data>
  <data name="WhetherTheScrollShouldBeABigStep" xml:space="preserve">
    <value>Whether the scroll should be a big step.</value>
  </data>
  <data name="ScrollUp" xml:space="preserve">
    <value>Scroll Up</value>
  </data>
  <data name="WhetherTheScrollShouldBeInTheUpwardsDirection" xml:space="preserve">
    <value>Whether the scroll should be in the upwards direction.</value>
  </data>
  <data name="ScrollHorizontally" xml:space="preserve">
    <value>Scroll Horizontally</value>
  </data>
  <data name="ScrollsAnElementHorizontally" xml:space="preserve">
    <value>Scrolls an element horizontally</value>
  </data>
  <data name="AddsAnItemToItsParentsSelectedItems" xml:space="preserve">
    <value>Adds an item to its parent's selected items</value>
  </data>
  <data name="RemovesAnItemFromItsParentsSelectedItems" xml:space="preserve">
    <value>Removes an item from its parent's selected items</value>
  </data>
  <data name="ScrollIntoView" xml:space="preserve">
    <value>Scroll Into View</value>
  </data>
  <data name="ScrollsTheElementIntoView" xml:space="preserve">
    <value>Scrolls the element into view</value>
  </data>
  <data name="AddsTheSpecfiedItemToTheListsSelectedItemsIfTheItemTextParameterIsSuppliedThisTa" xml:space="preserve">
    <value>Adds the specfied item to the list's selected items. If the Item Text parameter is supplied, this takes precedence over the Item Position parameter.</value>
  </data>
  <data name="RemovesTheGivenItemFromTheListsSelectedItemsIfTheItemTextParameterIsSuppliedThis" xml:space="preserve">
    <value>Removes the given item from the list's selected items. If the Item Text parameter is supplied, this takes precedence over the Item Position parameter.</value>
  </data>
  <data name="TheOnebasedIndexOfTheItemToDeselect" xml:space="preserve">
    <value>The one-based index of the item to de-select</value>
  </data>
  <data name="TheTextOfTheItemToDeselect" xml:space="preserve">
    <value>The text of the item to de-select</value>
  </data>
  <data name="WhetherTheItemIsCurrentlySelected" xml:space="preserve">
    <value>Whether the item is currently selected</value>
  </data>
  <data name="GetAllTabsText" xml:space="preserve">
    <value>Get All Tabs Text</value>
  </data>
  <data name="ReturnsACollectionOfTheTextOfAllTheTabsContainedWithinTheTabControl" xml:space="preserve">
    <value>Returns a collection of the text of all the tabs contained within the tab control</value>
  </data>
  <data name="SelectsTheTabItem" xml:space="preserve">
    <value>Selects the Tab Item</value>
  </data>
  <data name="SelectsTheTabWithinAUIATabControlIfTheTabTextParameterIsSuppliedThisTakesPrecede" xml:space="preserve">
    <value>Selects the Tab within a UIA Tab Control. If the Tab Text parameter is supplied, this takes precedence over the Tab Position parameter.</value>
  </data>
  <data name="TabPosition" xml:space="preserve">
    <value>Tab Position</value>
  </data>
  <data name="TheOnebasedIndexOfTheTabToSelect" xml:space="preserve">
    <value>The one-based index of the tab to select</value>
  </data>
  <data name="TheTextValueOfTheTabToSelect" xml:space="preserve">
    <value>The text value of the tab to select</value>
  </data>
  <data name="TheTextOfTheTreeViewItemOfInterest" xml:space="preserve">
    <value>The text of the tree view item of interest.</value>
  </data>
  <data name="The1basedIndexOfTheTreeViewItemOfInterestThisParameterIsIgnoredUnlessTheItemText" xml:space="preserve">
    <value>The 1-based index of the tree view item of interest. This parameter is ignored unless the 'Item Text' parameter is blank.</value>
  </data>
  <data name="SelectsAnItemInATree" xml:space="preserve">
    <value>Selects an item in a tree</value>
  </data>
  <data name="AddsTheGivenItemToTheTreesSelectedItems" xml:space="preserve">
    <value>Adds the given item to the tree's selected items.</value>
  </data>
  <data name="RemovesTheGivenItemFromTheTreesSelectedItems" xml:space="preserve">
    <value>Removes the given item from the tree's selected items.</value>
  </data>
  <data name="The1basedColumnNumberIndicatingWhichColumnToActOn" xml:space="preserve">
    <value>The 1-based column number indicating which column to act on.</value>
  </data>
  <data name="The1basedRowNumberIndicatingWhichRowToActOn" xml:space="preserve">
    <value>The 1-based row number indicating which row to act on.</value>
  </data>
  <data name="ComponentIndexWithinTheCell0IndicatesTheCellItself" xml:space="preserve">
    <value>Component index within the cell, 0 indicates the cell itself.</value>
  </data>
  <data name="ReadCellText" xml:space="preserve">
    <value>Read Cell Text</value>
  </data>
  <data name="ReadsTheTextFromTheCell" xml:space="preserve">
    <value>Reads the text from the cell</value>
  </data>
  <data name="WriteCellText" xml:space="preserve">
    <value>Write Cell Text</value>
  </data>
  <data name="SetsTheTextIntoTheSpecifiedCell" xml:space="preserve">
    <value>Sets the text into the specified cell</value>
  </data>
  <data name="CellText" xml:space="preserve">
    <value>Cell Text</value>
  </data>
  <data name="TheNewTextForTheCellDefaultIsBlank" xml:space="preserve">
    <value>The new text for the cell. Default is blank.</value>
  </data>
  <data name="ScrollsTheTableCellIntoView" xml:space="preserve">
    <value>Scrolls the table cell into view</value>
  </data>
  <data name="GetRows" xml:space="preserve">
    <value>Get Rows</value>
  </data>
  <data name="GetsTheDataInTheSpecifiedRows" xml:space="preserve">
    <value>Gets the data in the specified rows</value>
  </data>
  <data name="FirstRowNumber" xml:space="preserve">
    <value>First Row Number</value>
  </data>
  <data name="The1basedRowNumberIndicatingTheFirstRowToIncludeInTheCollectionDefaultsTo1IfNotS" xml:space="preserve">
    <value>The 1-based row number indicating the first row to include in the collection. Defaults to 1 if not specified.</value>
  </data>
  <data name="LastRowNumber" xml:space="preserve">
    <value>Last Row Number</value>
  </data>
  <data name="The1basedRowNumberIndicatingTheLastRowToIncludeInTheCollectionDefaultsToTheLastR" xml:space="preserve">
    <value>The 1-based row number indicating the last row to include in the collection. Defaults to the last row in the table if not specified.</value>
  </data>
  <data name="AddRowToSelection" xml:space="preserve">
    <value>Add Row To Selection</value>
  </data>
  <data name="AddsARowToTheCurrentSelection" xml:space="preserve">
    <value>Adds a row to the current selection.</value>
  </data>
  <data name="RemoveRowFromSelection" xml:space="preserve">
    <value>Remove Row From Selection</value>
  </data>
  <data name="RemovesARowFromTheCurrentSelection" xml:space="preserve">
    <value>Removes a row from the current selection.</value>
  </data>
  <data name="ClearsTheCurrentSelection" xml:space="preserve">
    <value>Clears the current selection.</value>
  </data>
  <data name="GetSelectedRows" xml:space="preserve">
    <value>Get Selected Rows</value>
  </data>
  <data name="GetsTheSelectedRowsAsACollection" xml:space="preserve">
    <value>Gets the selected rows as a collection.</value>
  </data>
  <data name="GetTheNumberOfRowsInTheTable" xml:space="preserve">
    <value>Get the number of rows in the table.</value>
  </data>
  <data name="GetTheNumberOfColumnsInTheTable" xml:space="preserve">
    <value>Get the number of columns in the table.</value>
  </data>
  <data name="GetSelectedRowNumber" xml:space="preserve">
    <value>Get Selected Row Number</value>
  </data>
  <data name="GetsTheNumberOfTheFirstSelectedRowInTheTable" xml:space="preserve">
    <value>Gets the number of the first selected row in the table.</value>
  </data>
  <data name="GetSelectedColumnNumber" xml:space="preserve">
    <value>Get Selected Column Number</value>
  </data>
  <data name="GetsNumberOfTheFirstSelectedColumnInTheTable" xml:space="preserve">
    <value>Gets number of the first selected column in the table.</value>
  </data>
  <data name="ToggleCell" xml:space="preserve">
    <value>Toggle Cell</value>
  </data>
  <data name="ChangesTheToggleStateOfTheTableCell" xml:space="preserve">
    <value>Changes the Toggle state of the table cell.</value>
  </data>
  <data name="GetsCheckedStateOfTheTableCell" xml:space="preserve">
    <value>Gets checked state of the table cell.</value>
  </data>
  <data name="ExpandCollapseCell" xml:space="preserve">
    <value>Expand/Collapse Cell</value>
  </data>
  <data name="ExpandsOrCollapsesTheTableCell" xml:space="preserve">
    <value>Expands or collapses the table cell.</value>
  </data>
  <data name="GetExpandedCell" xml:space="preserve">
    <value>Get Expanded Cell</value>
  </data>
  <data name="ReadsTheCurrentStateOfWhetherTheCellElementIsExpandedOrCollapsed" xml:space="preserve">
    <value>Reads the current state of whether the cell element is expanded or collapsed.</value>
  </data>
  <data name="SelectComboboxItem" xml:space="preserve">
    <value>Select Combobox Item</value>
  </data>
  <data name="SelectsAnItemFromAComboboxWithinTheTableCellElementIfTheItemTextParameterIsSuppl" xml:space="preserve">
    <value>Selects an item from a combobox within the table cell element. If the Item Text parameter is supplied, this takes precedence over the Item Position parameter.</value>
  </data>
  <data name="TheTextValueOfTheItemToSelect" xml:space="preserve">
    <value>The text value of the item to select</value>
  </data>
  <data name="CountComboboxItems" xml:space="preserve">
    <value>Count Combobox Items</value>
  </data>
  <data name="TheNumberOfItemsWithinAComboboxInsideTheUIAutomationElementCell" xml:space="preserve">
    <value>The number of items within a combobox inside the UI Automation element cell.</value>
  </data>
  <data name="GetAllComboboxItems" xml:space="preserve">
    <value>Get All Combobox Items</value>
  </data>
  <data name="GetAllItemsFromAComboboxWithinTheCellElementAsACollection" xml:space="preserve">
    <value>Get all items from a combobox within the cell element as a collection.</value>
  </data>
  <data name="GetSelectedComboboxItem" xml:space="preserve">
    <value>Get Selected Combobox Item</value>
  </data>
  <data name="GetsTheValueOfTheSelectedItemFromAComboboxInATableCell" xml:space="preserve">
    <value>Gets the value of the selected item from a combobox in a table cell.</value>
  </data>
  <data name="ClickAtTheCentreOfTheUIAElement" xml:space="preserve">
    <value>Click at the centre of the UIA element.</value>
  </data>
  <data name="MissingDataTypeForArgument0" xml:space="preserve">
    <value>Missing data type for argument {0}</value>
  </data>
  <data name="MissingDescriptionForArgument0" xml:space="preserve">
    <value>Missing description for argument {0}</value>
  </data>
  <data name="MissingNameForArgument0" xml:space="preserve">
    <value>Missing name for argument {0}</value>
  </data>
  <data name="MissingIDForAction" xml:space="preserve">
    <value>Missing ID for action</value>
  </data>
  <data name="MissingNameForAction0" xml:space="preserve">
    <value>Missing name for action {0}</value>
  </data>
  <data name="MissingHelptextForAction0" xml:space="preserve">
    <value>Missing helptext for action {0}</value>
  </data>
  <data name="ComparesAgainstDrawnTextRetrievedFromARectangularRegion" xml:space="preserve">
    <value>Compares against drawn text retrieved from a rectangular region</value>
  </data>
  <data name="ComparesAgainstDrawnTextRetrievedFromAListElementInARectangularRegion" xml:space="preserve">
    <value>Compares against drawn text retrieved from a list element in a rectangular region</value>
  </data>
  <data name="TheElementNumberToCheckDefaultIs1" xml:space="preserve">
    <value>The element number to check. Default is 1.</value>
  </data>
  <data name="ComparesAgainstDrawnTextRetrievedFromAGridCellInARectangularRegion" xml:space="preserve">
    <value>Compares against drawn text retrieved from a grid cell in a rectangular region</value>
  </data>
  <data name="TheColumnNumberOfTheGridToCheckDefaultIs1" xml:space="preserve">
    <value>The column number of the grid to check. Default is 1.</value>
  </data>
  <data name="TheRowNumberOfTheGridToCheckDefaultIs1" xml:space="preserve">
    <value>The row number of the grid to check. Default is 1.</value>
  </data>
  <data name="MatchesImage" xml:space="preserve">
    <value>Matches Image</value>
  </data>
  <data name="ComparesAgainstAnImageRetrievedFromARectangularRegion" xml:space="preserve">
    <value>Compares against an image retrieved from a rectangular region</value>
  </data>
  <data name="Image" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="TheImageToCompareAgainstIfEmptyItWillCheckForAnElementSnapshotOnTheImageIfNoneFo" xml:space="preserve">
    <value>The image to compare against. If empty, it will check for an 'Element Snapshot' on the image. If none found, an error will occur</value>
  </data>
  <data name="ComparesAgainstAnImageRetrievedFromAListElementInARectangularRegion" xml:space="preserve">
    <value>Compares against an image retrieved from a list element in a rectangular region</value>
  </data>
  <data name="ComparesAgainstAnImageRetrievedFromAGridElementInARectangularRegion" xml:space="preserve">
    <value>Compares against an image retrieved from a grid element in a rectangular region</value>
  </data>
  <data name="ContainsImage" xml:space="preserve">
    <value>Contains Image</value>
  </data>
  <data name="DeterminesIfTheRegionContainsAParticularImage" xml:space="preserve">
    <value>Determines if the region contains a particular image.</value>
  </data>
  <data name="DeterminesIfTheSpecifiedElementInTheListRegionContainsAParticularImage" xml:space="preserve">
    <value>Determines if the specified element in the list region contains a particular image.</value>
  </data>
  <data name="DeterminesIfTheSpecifiedElementInTheGridRegionContainsAParticularImage" xml:space="preserve">
    <value>Determines if the specified element in the grid region contains a particular image.</value>
  </data>
  <data name="ContainsColour" xml:space="preserve">
    <value>Contains Colour</value>
  </data>
  <data name="DeterminesIfTheRegionContainsAParticularColour" xml:space="preserve">
    <value>Determines if the region contains a particular colour.</value>
  </data>
  <data name="TheColourToCheckForThisCanBeEnteredAsAColourNameEgRedOrAHexColourCodeEgFF0000" xml:space="preserve">
    <value>The colour to check for. This can be entered as a colour name (e.g. red) or a Hex colour code (e.g. #FF0000).</value>
  </data>
  <data name="DeterminesIfTheSpecifiedElementInTheListRegionContainsAParticularColour" xml:space="preserve">
    <value>Determines if the specified element in the list region contains a particular colour.</value>
  </data>
  <data name="DeterminesIfTheSpecifiedElementInTheGridRegionContainsAParticularColour" xml:space="preserve">
    <value>Determines if the specified element in the grid region contains a particular colour.</value>
  </data>
  <data name="UniformColour" xml:space="preserve">
    <value>Uniform Colour</value>
  </data>
  <data name="DeterminesIfTheRegionConsistsOfAUniformColour" xml:space="preserve">
    <value>Determines if the region consists of a uniform colour.</value>
  </data>
  <data name="TheColourToCheckForThisCanBeEnteredAsAColourNameEgRedOrAHexColourCodeEgFF0000IfN" xml:space="preserve">
    <value>The colour to check for. This can be entered as a colour name (e.g. red) or a Hex colour code (e.g. #FF0000). If not specified _then returns true if the region consists of any uniform colour.</value>
  </data>
  <data name="DeterminesIfTheSpecifiedElementInTheListRegionConsistsOfAUniformColour" xml:space="preserve">
    <value>Determines if the specified element in the list region consists of a uniform colour.</value>
  </data>
  <data name="DeterminesIfTheSpecifiedElementInTheGridRegionConsistsOfAUniformColour" xml:space="preserve">
    <value>Determines if the specified element in the grid region consists of a uniform colour.</value>
  </data>
  <data name="ComparesTextUsingCharacterMatchingFromARectangularAreaOnAWindow" xml:space="preserve">
    <value>Compares text using character matching from a rectangular area on a window</value>
  </data>
  <data name="ComparesTextUsingCharacterMatchingFromAListElementInARectangularAreaOnAWindow" xml:space="preserve">
    <value>Compares text using character matching from a list element in a rectangular area on a window</value>
  </data>
  <data name="ComparesTextUsingCharacterMatchingFromAGridCellInARectangularAreaOnAWindow" xml:space="preserve">
    <value>Compares text using character matching from a grid cell in a rectangular area on a window</value>
  </data>
  <data name="ComparesAgainstTextRetrievedFromAJavaElement" xml:space="preserve">
    <value>Compares against text retrieved from a java element</value>
  </data>
  <data name="IsFocused" xml:space="preserve">
    <value>IsFocused</value>
  </data>
  <data name="DeterminesWhetherAJavaElementIsFocused" xml:space="preserve">
    <value>Determines whether a java element is focused</value>
  </data>
  <data name="GetField" xml:space="preserve">
    <value>Get Field</value>
  </data>
  <data name="ComparesContentsOfATerminalField" xml:space="preserve">
    <value>Compares contents of a terminal field</value>
  </data>
  <data name="GetWindowText" xml:space="preserve">
    <value>Get Window Text</value>
  </data>
  <data name="ComparesMainTextOfAWindowOrControl" xml:space="preserve">
    <value>Compares main text of a window or control</value>
  </data>
  <data name="CheckExists" xml:space="preserve">
    <value>Check Exists</value>
  </data>
  <data name="CheckTheElementExistsTrueOrFalse" xml:space="preserve">
    <value>Check the element exists - True or False</value>
  </data>
  <data name="CheckThatTheActiveAccessibilityElementExistsTrueOrFalse" xml:space="preserve">
    <value>Check that the Active Accessibility element exists - True or False</value>
  </data>
  <data name="CheckThatTheJavaElementExistsTrueOrFalse" xml:space="preserve">
    <value>Check that the Java element exists - True or False</value>
  </data>
  <data name="CheckIfTheTerminalFieldExistsWithTheTextContainedWhenSpiedTrueOrFalse" xml:space="preserve">
    <value>Check if the terminal field exists, with the text contained when spied - True or False</value>
  </data>
  <data name="CheckIfTheItemEgACheckboxIsCheckedTrueOrFalse" xml:space="preserve">
    <value>Check if the item (e.g a checkbox) is checked - True or False</value>
  </data>
  <data name="DocumentLoaded" xml:space="preserve">
    <value>Document Loaded</value>
  </data>
  <data name="CheckIfTheCurrentDocumentHasLoadedTrueOrFalseRelevantOnlyForBrowserApplicationsD" xml:space="preserve">
    <value>Check if the current document has loaded - True or False. Relevant only for browser applications. Do not use this unless you know you are already on the page which you are waiting to load, otherwise it is more appropriate to use Parent Document Loaded on an element on the target page. Parent Document Loaded includes an implicit Check exists on the element as well as a Document Loaded check.</value>
  </data>
  <data name="ParentDocumentLoaded" xml:space="preserve">
    <value>Parent Document Loaded</value>
  </data>
  <data name="CheckTheElementExistsAndThatTheEntirePageAndAllOfItsChildFramesAreFullyLoadedPar" xml:space="preserve">
    <value>Check the element exists and that the entire page and all of its child frames are fully loaded. Parent Document Loaded includes an implicit Check exists on the element as well as a Document Loaded check.</value>
  </data>
  <data name="CheckURL" xml:space="preserve">
    <value>Check URL</value>
  </data>
  <data name="CheckIfTheURLOfTheCurrentlyLoadedDocumentEqualsAParticularValueRelevantOnlyForBr" xml:space="preserve">
    <value>Check if the URL of the currently loaded document equals a particular value. Relevant only for browser applications</value>
  </data>
  <data name="CheckURLDomain" xml:space="preserve">
    <value>Check URL Domain</value>
  </data>
  <data name="CheckIfTheDomainOfTheURLOfTheCurrentlyLoadedDocumentEqualsAParticularValueReleva" xml:space="preserve">
    <value>Check if the domain of the URL of the currently loaded document equals a particular value. Relevant only for browser applications</value>
  </data>
  <data name="CheckValue" xml:space="preserve">
    <value>Check Value</value>
  </data>
  <data name="CheckIfTheHTMLElementIsASpecificValue" xml:space="preserve">
    <value>Check if the HTML element is a specific value</value>
  </data>
  <data name="CheckDDEElementReadable" xml:space="preserve">
    <value>Check DDE Element Readable</value>
  </data>
  <data name="ChecksWhetherTheSuppliedDDEElementCanBeLocatedAndItsValueCanBeRead" xml:space="preserve">
    <value>Checks whether the supplied DDE element can be located and its value can be read.</value>
  </data>
  <data name="CheckDDETopicAvailable" xml:space="preserve">
    <value>Check DDE Topic Available</value>
  </data>
  <data name="ChecksWhetherADDEConversationCanBeInitiatedWithTheSpecifiedServerTopicPairTheIte" xml:space="preserve">
    <value>Checks whether a DDE conversation can be initiated with the specified Server/Topic pair. The Item attribute of the supplied element is ignored.</value>
  </data>
  <data name="Pressed" xml:space="preserve">
    <value>Pressed</value>
  </data>
  <data name="CheckIfTheButtonHasBeenPressed" xml:space="preserve">
    <value>Check if the button has been pressed</value>
  </data>
  <data name="MouseLeftDown" xml:space="preserve">
    <value>MouseLeftDown</value>
  </data>
  <data name="CheckIfTheLeftMouseButtonHasBeenPressed" xml:space="preserve">
    <value>Check if the left mouse button has been pressed</value>
  </data>
  <data name="ChecksWhetherTheBusinessObjectIsCurrentlyConnectedToTheApplicationBeItThroughLau" xml:space="preserve">
    <value>Checks whether the business object is currently connected to the application (be it through launching or attaching).</value>
  </data>
  <data name="CheckWindowActive" xml:space="preserve">
    <value>Check Window Active</value>
  </data>
  <data name="ChecksWhetherAWindowIsTheCurrentActiveWindowTheWindowWhichReceivesUserInput" xml:space="preserve">
    <value>Checks whether a window is the current active window - the window which receives user input.</value>
  </data>
  <data name="Focused" xml:space="preserve">
    <value>Focused</value>
  </data>
  <data name="ChecksIfTheElementHasFocus" xml:space="preserve">
    <value>Checks if the element has focus</value>
  </data>
  <data name="GetsTheNumberOfItemsInTheComboBox" xml:space="preserve">
    <value>Gets the number of items in the combo box</value>
  </data>
  <data name="GetsIfTheElementIsChecked" xml:space="preserve">
    <value>Gets if the element is checked</value>
  </data>
  <data name="CheckThatTheWebElementExistsTrueOrFalse" xml:space="preserve">
    <value>Check that the Web element exists - True or False</value>
  </data>
  <data name="CheckWindowAttribute" xml:space="preserve">
    <value>Check Window Attribute</value>
  </data>
  <data name="CheckTheCurrentValueOfAWindowAttribute" xml:space="preserve">
    <value>Check the current value of a window attribute.</value>
  </data>
  <data name="TheNameOfTheAttributeToCheck" xml:space="preserve">
    <value>The name of the attribute to check.</value>
  </data>
  <data name="CheckAAAttribute" xml:space="preserve">
    <value>Check AA Attribute</value>
  </data>
  <data name="CheckHTMLAttribute" xml:space="preserve">
    <value>Check HTML Attribute</value>
  </data>
  <data name="CheckJABAttribute" xml:space="preserve">
    <value>Check JAB Attribute</value>
  </data>
  <data name="CheckUIAutomationAttribute" xml:space="preserve">
    <value>Check UI Automation Attribute</value>
  </data>
  <data name="Application" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="AnElementRepresentingTheTargetApplicationAsAWhole" xml:space="preserve">
    <value>An element representing the target application as a whole.</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="AStandardWindowsTextEditField" xml:space="preserve">
    <value>A standard Windows text edit field.</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="AWindowsPasswordTextBox" xml:space="preserve">
    <value>A Windows password text box.</value>
  </data>
  <data name="ListBox" xml:space="preserve">
    <value>List Box</value>
  </data>
  <data name="AStandardWindowsListBox" xml:space="preserve">
    <value>A standard Windows List Box.</value>
  </data>
  <data name="RadioButton" xml:space="preserve">
    <value>Radio button</value>
  </data>
  <data name="AStandardWindowsRadioButton" xml:space="preserve">
    <value>A standard Windows Radio Button</value>
  </data>
  <data name="CheckBox" xml:space="preserve">
    <value>Check box</value>
  </data>
  <data name="AStandardWindowsCheckBox" xml:space="preserve">
    <value>A standard Windows check box</value>
  </data>
  <data name="CheckBoxNET" xml:space="preserve">
    <value>Check box (.NET)</value>
  </data>
  <data name="ANETCheckBox" xml:space="preserve">
    <value>A .NET check box</value>
  </data>
  <data name="Button" xml:space="preserve">
    <value>Button</value>
  </data>
  <data name="AStandardWindowsButton" xml:space="preserve">
    <value>A standard Windows Button</value>
  </data>
  <data name="ComboBox" xml:space="preserve">
    <value>Combo Box</value>
  </data>
  <data name="AStandardWindowsComboBox" xml:space="preserve">
    <value>A standard Windows Combo Box</value>
  </data>
  <data name="ListView" xml:space="preserve">
    <value>List View</value>
  </data>
  <data name="AStandardWindowsListView" xml:space="preserve">
    <value>A standard Windows List View</value>
  </data>
  <data name="AnActiveXListView" xml:space="preserve">
    <value>An ActiveX List View</value>
  </data>
  <data name="TreeView" xml:space="preserve">
    <value>Tree View</value>
  </data>
  <data name="AStandardWindowsTreeView" xml:space="preserve">
    <value>A standard Windows Tree View</value>
  </data>
  <data name="AnActiveXTreeView" xml:space="preserve">
    <value>An ActiveX Tree View</value>
  </data>
  <data name="StatusBar" xml:space="preserve">
    <value>Status Bar</value>
  </data>
  <data name="AnActiveXStatusBar" xml:space="preserve">
    <value>An ActiveX Status Bar</value>
  </data>
  <data name="TabControl" xml:space="preserve">
    <value>Tab Control</value>
  </data>
  <data name="AStandardWindowsTabControl" xml:space="preserve">
    <value>A standard Windows Tab Control</value>
  </data>
  <data name="TrackBar" xml:space="preserve">
    <value>Track Bar</value>
  </data>
  <data name="AStandardWindowsTrackBarControl" xml:space="preserve">
    <value>A standard Windows Track Bar Control</value>
  </data>
  <data name="UpDownBox" xml:space="preserve">
    <value>Up-Down Box</value>
  </data>
  <data name="AStandardWindowsUpDownControl" xml:space="preserve">
    <value>A standard Windows Up-Down Control</value>
  </data>
  <data name="DateTimePicker" xml:space="preserve">
    <value>DateTime Picker</value>
  </data>
  <data name="AStandardWindowsDateTimePickerControl" xml:space="preserve">
    <value>A standard Windows DateTime-Picker Control</value>
  </data>
  <data name="MonthCalendarPicker" xml:space="preserve">
    <value>Month Calendar Picker</value>
  </data>
  <data name="AStandardWindowsMonthCalendarPickerControl" xml:space="preserve">
    <value>A standard Windows Month Calendar Picker Control</value>
  </data>
  <data name="ScrollBar" xml:space="preserve">
    <value>Scroll Bar</value>
  </data>
  <data name="AStandardWindowsScrollBar" xml:space="preserve">
    <value>A standard Windows Scroll Bar</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="AStandardWindowsLabel" xml:space="preserve">
    <value>A standard Windows Label</value>
  </data>
  <data name="LinkLabelNET" xml:space="preserve">
    <value>Link Label (.NET)</value>
  </data>
  <data name="AStandardNETLinkLabel" xml:space="preserve">
    <value>A standard .NET Link Label</value>
  </data>
  <data name="Toolbar" xml:space="preserve">
    <value>Toolbar</value>
  </data>
  <data name="AStandardWindowsToolbar" xml:space="preserve">
    <value>A standard Windows Toolbar</value>
  </data>
  <data name="NETDataGrid" xml:space="preserve">
    <value>.NET DataGrid</value>
  </data>
  <data name="ANETDataGridControl" xml:space="preserve">
    <value>A .NET DataGrid control</value>
  </data>
  <data name="NETDataGridView" xml:space="preserve">
    <value>.NET DataGridView</value>
  </data>
  <data name="ANETDataGridViewControl" xml:space="preserve">
    <value>A .NET DataGridView control</value>
  </data>
  <data name="Window" xml:space="preserve">
    <value>Window</value>
  </data>
  <data name="AStandardWindowsWindow" xml:space="preserve">
    <value>A standard Windows Window.</value>
  </data>
  <data name="MSFlexGrid" xml:space="preserve">
    <value>MSFlexGrid</value>
  </data>
  <data name="AMicrosoftFlexGridActiveXControl" xml:space="preserve">
    <value>A Microsoft FlexGrid ActiveX Control</value>
  </data>
  <data name="ApexGrid" xml:space="preserve">
    <value>ApexGrid</value>
  </data>
  <data name="AnApexGridActiveXControl" xml:space="preserve">
    <value>An Apex Grid ActiveX Control</value>
  </data>
  <data name="DTPicker" xml:space="preserve">
    <value>DTPicker</value>
  </data>
  <data name="AVB6DatePickerControl" xml:space="preserve">
    <value>A VB6 Date Picker control</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>Region</value>
  </data>
  <data name="ARectangularRegionWithinAWindowIdentifiedUsingEitherCoordinatesOrAnImageForRegio" xml:space="preserve">
    <value>A rectangular region within a Window identified using either coordinates or an image. For regions located using an image, actions and conditions will search the parent element in the application window for the region's image to identify its location - actions will raise an error if the region cannot be found.</value>
  </data>
  <data name="ListRegion" xml:space="preserve">
    <value>List Region</value>
  </data>
  <data name="AListOfContiguousRegionsWithinAWindow" xml:space="preserve">
    <value>A list of contiguous regions within a window</value>
  </data>
  <data name="GridRegion" xml:space="preserve">
    <value>Grid Region</value>
  </data>
  <data name="ATableOfRegionsWithinAWindow" xml:space="preserve">
    <value>A table of regions within a window</value>
  </data>
  <data name="Field" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="ATerminalEmulatorField" xml:space="preserve">
    <value>A terminal emulator field</value>
  </data>
  <data name="ActiveAccessibility" xml:space="preserve">
    <value>Active Accessibility</value>
  </data>
  <data name="AnActiveAccessibilityElement" xml:space="preserve">
    <value>An Active Accessibility element.</value>
  </data>
  <data name="ButtonAA" xml:space="preserve">
    <value>Button (AA)</value>
  </data>
  <data name="AnActiveAccessibilityButtonElement" xml:space="preserve">
    <value>An Active Accessibility Button element.</value>
  </data>
  <data name="CheckBoxAA" xml:space="preserve">
    <value>Check Box (AA)</value>
  </data>
  <data name="AnActiveAccessibilityCheckboxElement" xml:space="preserve">
    <value>An Active Accessibility Checkbox element.</value>
  </data>
  <data name="ComboBoxAA" xml:space="preserve">
    <value>Combo Box (AA)</value>
  </data>
  <data name="AnActiveAccessibilityComboBoxElement" xml:space="preserve">
    <value>An Active Accessibility Combo Box element.</value>
  </data>
  <data name="ListBoxAA" xml:space="preserve">
    <value>List Box (AA)</value>
  </data>
  <data name="AnActiveAccessibilityListBoxElement" xml:space="preserve">
    <value>An Active Accessibility List Box element.</value>
  </data>
  <data name="RadioButtonAA" xml:space="preserve">
    <value>Radio Button (AA)</value>
  </data>
  <data name="AnActiveAccessibilityRadioButtonElement" xml:space="preserve">
    <value>An Active Accessibility Radio button element.</value>
  </data>
  <data name="EditAA" xml:space="preserve">
    <value>Edit (AA)</value>
  </data>
  <data name="AnActiveAccessibilityEditBoxElement" xml:space="preserve">
    <value>An Active Accessibility Edit box element.</value>
  </data>
  <data name="UIAutomation" xml:space="preserve">
    <value>UI Automation</value>
  </data>
  <data name="AGenericUIAutomationElement" xml:space="preserve">
    <value>A generic UI Automation element.</value>
  </data>
  <data name="ButtonUIA" xml:space="preserve">
    <value>Button (UIA)</value>
  </data>
  <data name="AUIAutomationButtonElement" xml:space="preserve">
    <value>A UI Automation button element.</value>
  </data>
  <data name="CheckBoxUIA" xml:space="preserve">
    <value>Check Box (UIA)</value>
  </data>
  <data name="AUIAutomationCheckBoxElement" xml:space="preserve">
    <value>A UI Automation check box element.</value>
  </data>
  <data name="RadioButtonUIA" xml:space="preserve">
    <value>Radio Button (UIA)</value>
  </data>
  <data name="AUIAutomationRadioButtonElement" xml:space="preserve">
    <value>A UI Automation radio button element.</value>
  </data>
  <data name="ComboBoxUIA" xml:space="preserve">
    <value>Combo Box (UIA)</value>
  </data>
  <data name="AUIAutomationComboBoxElement" xml:space="preserve">
    <value>A UI Automation combo box element.</value>
  </data>
  <data name="EditBoxUIA" xml:space="preserve">
    <value>Edit Box (UIA)</value>
  </data>
  <data name="AUIAutomationEditBoxElement" xml:space="preserve">
    <value>A UI Automation edit box element.</value>
  </data>
  <data name="MenuUIA" xml:space="preserve">
    <value>Menu (UIA)</value>
  </data>
  <data name="AUIAutomationMenuElement" xml:space="preserve">
    <value>A UI Automation menu element</value>
  </data>
  <data name="MenuItemUIA" xml:space="preserve">
    <value>Menu Item (UIA)</value>
  </data>
  <data name="AUIAutomationMenuItemElement" xml:space="preserve">
    <value>A UI Automation menu item element</value>
  </data>
  <data name="ListUIA" xml:space="preserve">
    <value>List (UIA)</value>
  </data>
  <data name="AUIAutomationListElement" xml:space="preserve">
    <value>A UI Automation list element.</value>
  </data>
  <data name="ListItemUIA" xml:space="preserve">
    <value>List Item (UIA)</value>
  </data>
  <data name="AUIAutomationListItemElement" xml:space="preserve">
    <value>A UI Automation list item element.</value>
  </data>
  <data name="TableUIA" xml:space="preserve">
    <value>Table (UIA)</value>
  </data>
  <data name="AUIAutomationTableElement" xml:space="preserve">
    <value>A UI Automation table element.</value>
  </data>
  <data name="TabControlUIA" xml:space="preserve">
    <value>Tab Control (UIA)</value>
  </data>
  <data name="AUIAutomationTabControl" xml:space="preserve">
    <value>A UI Automation Tab Control.</value>
  </data>
  <data name="TabItemUIA" xml:space="preserve">
    <value>Tab Item (UIA)</value>
  </data>
  <data name="AUIAutomationTabItem" xml:space="preserve">
    <value>A UI Automation Tab Item.</value>
  </data>
  <data name="HyperlinkUIA" xml:space="preserve">
    <value>Hyperlink (UIA)</value>
  </data>
  <data name="AUIAutomationHyperlinkElement" xml:space="preserve">
    <value>A UI Automation hyperlink element.</value>
  </data>
  <data name="TreeViewUIA" xml:space="preserve">
    <value>Tree View (UIA)</value>
  </data>
  <data name="AUIAutomationTreeViewElement" xml:space="preserve">
    <value>A UI Automation tree view element.</value>
  </data>
  <data name="TreeViewItemUIA" xml:space="preserve">
    <value>Tree View Item (UIA)</value>
  </data>
  <data name="AUIAutomationTreeViewItemElement" xml:space="preserve">
    <value>A UI Automation tree view item element.</value>
  </data>
  <data name="WindowUIA" xml:space="preserve">
    <value>Window (UIA)</value>
  </data>
  <data name="AUIAutomationWindowElement" xml:space="preserve">
    <value>A UI Automation window element.</value>
  </data>
  <data name="WebElement" xml:space="preserve">
    <value>Web Element</value>
  </data>
  <data name="AGenericWebElement" xml:space="preserve">
    <value>A generic Web element.</value>
  </data>
  <data name="ButtonWeb" xml:space="preserve">
    <value>Button (Web)</value>
  </data>
  <data name="AWebPageButtonElement" xml:space="preserve">
    <value>A Web page button element.</value>
  </data>
  <data name="CheckBoxWeb" xml:space="preserve">
    <value>Check Box (Web)</value>
  </data>
  <data name="AWebPageCheckBoxElement" xml:space="preserve">
    <value>A Web page check box element.</value>
  </data>
  <data name="FormWeb" xml:space="preserve">
    <value>Form (Web)</value>
  </data>
  <data name="AWebFormElement" xml:space="preserve">
    <value>A Web form element.</value>
  </data>
  <data name="HyperlinkWeb" xml:space="preserve">
    <value>Hyperlink (Web)</value>
  </data>
  <data name="AWebHyperlinkElement" xml:space="preserve">
    <value>A Web hyperlink element.</value>
  </data>
  <data name="ListWeb" xml:space="preserve">
    <value>List (Web)</value>
  </data>
  <data name="AWebListElement" xml:space="preserve">
    <value>A Web list element.</value>
  </data>
  <data name="ListItemWeb" xml:space="preserve">
    <value>List Item (Web)</value>
  </data>
  <data name="AWebListItemElement" xml:space="preserve">
    <value>A Web list item element.</value>
  </data>
  <data name="MenuWeb" xml:space="preserve">
    <value>Menu (Web)</value>
  </data>
  <data name="AWebMenuElement" xml:space="preserve">
    <value>A Web menu element</value>
  </data>
  <data name="MenuItemWeb" xml:space="preserve">
    <value>Menu Item (Web)</value>
  </data>
  <data name="AWebMenuItemElement" xml:space="preserve">
    <value>A Web menu item element.</value>
  </data>
  <data name="ProgressBarWeb" xml:space="preserve">
    <value>Progress Bar (Web)</value>
  </data>
  <data name="AWebProgressBarElement" xml:space="preserve">
    <value>A Web progress bar element</value>
  </data>
  <data name="RadioButtonWeb" xml:space="preserve">
    <value>Radio Button (Web)</value>
  </data>
  <data name="AWebRadioButtonElement" xml:space="preserve">
    <value>A Web radio button element.</value>
  </data>
  <data name="SliderWeb" xml:space="preserve">
    <value>Slider (Web)</value>
  </data>
  <data name="AWebSliderElement" xml:space="preserve">
    <value>A Web slider element</value>
  </data>
  <data name="TableWeb" xml:space="preserve">
    <value>Table (Web)</value>
  </data>
  <data name="AWebTableElement" xml:space="preserve">
    <value>A Web table element.</value>
  </data>
  <data name="TableItemWeb" xml:space="preserve">
    <value>Table Item (Web)</value>
  </data>
  <data name="AWebTableItemElement" xml:space="preserve">
    <value>A Web table item element.</value>
  </data>
  <data name="TextWeb" xml:space="preserve">
    <value>Text (Web)</value>
  </data>
  <data name="AWebTextElement" xml:space="preserve">
    <value>A Web text element</value>
  </data>
  <data name="TextEditWeb" xml:space="preserve">
    <value>Text Edit (Web)</value>
  </data>
  <data name="AWebTextEditElement" xml:space="preserve">
    <value>A Web text edit element</value>
  </data>
  <data name="HTMLElement" xml:space="preserve">
    <value>HTML Element</value>
  </data>
  <data name="AnHTMLDOMElement" xml:space="preserve">
    <value>An HTML DOM element.</value>
  </data>
  <data name="HTMLButton" xml:space="preserve">
    <value>HTML Button</value>
  </data>
  <data name="AnHTMLButtonElement" xml:space="preserve">
    <value>An HTML Button element.</value>
  </data>
  <data name="HTMLCheckBox" xml:space="preserve">
    <value>HTML Check Box</value>
  </data>
  <data name="AnHTMLCheckboxElement" xml:space="preserve">
    <value>An HTML Checkbox element.</value>
  </data>
  <data name="HTMLRadioButton" xml:space="preserve">
    <value>HTML Radio Button</value>
  </data>
  <data name="AnHTMLRadioButtonElement" xml:space="preserve">
    <value>An HTML Radio button element.</value>
  </data>
  <data name="HTMLEdit" xml:space="preserve">
    <value>HTML Edit</value>
  </data>
  <data name="AnHTMLEditBoxElement" xml:space="preserve">
    <value>An HTML Edit box element.</value>
  </data>
  <data name="HTMLComboBox" xml:space="preserve">
    <value>HTML Combo Box</value>
  </data>
  <data name="AnHTMLComboBoxElement" xml:space="preserve">
    <value>An HTML Combo box element.</value>
  </data>
  <data name="HTMLTable" xml:space="preserve">
    <value>HTML Table</value>
  </data>
  <data name="AnHTMLTableElement" xml:space="preserve">
    <value>An HTML Table element.</value>
  </data>
  <data name="EditJava" xml:space="preserve">
    <value>Edit (Java)</value>
  </data>
  <data name="AJavaEditBox" xml:space="preserve">
    <value>A Java edit box.</value>
  </data>
  <data name="PasswordEditJava" xml:space="preserve">
    <value>Password Edit (Java)</value>
  </data>
  <data name="AJavaPasswordEditField" xml:space="preserve">
    <value>A Java password edit field.</value>
  </data>
  <data name="CheckBoxJava" xml:space="preserve">
    <value>Check Box (Java)</value>
  </data>
  <data name="AJavaCheckBox" xml:space="preserve">
    <value>A Java check box.</value>
  </data>
  <data name="RadioButtonJava" xml:space="preserve">
    <value>Radio Button (Java)</value>
  </data>
  <data name="AJavaRadioButton" xml:space="preserve">
    <value>A Java radio button.</value>
  </data>
  <data name="ToggleButtonJava" xml:space="preserve">
    <value>Toggle Button (Java)</value>
  </data>
  <data name="AToggleButtonIeAButtonThatRetainsItsPressedStateUntilItIsPressedAgain" xml:space="preserve">
    <value>A toggle button - ie a button that retains its pressed state until it is pressed again.</value>
  </data>
  <data name="MenuItemJava" xml:space="preserve">
    <value>Menu Item (Java)</value>
  </data>
  <data name="AJavaMenuItem" xml:space="preserve">
    <value>A Java menu item.</value>
  </data>
  <data name="MenuJava" xml:space="preserve">
    <value>Menu (Java)</value>
  </data>
  <data name="AJavaMenuOftenFoundAtTheTopOfAMainApplicationWindow" xml:space="preserve">
    <value>A Java menu, often found at the top of a main application window.</value>
  </data>
  <data name="ButtonJava" xml:space="preserve">
    <value>Button (Java)</value>
  </data>
  <data name="AJavaButton" xml:space="preserve">
    <value>A Java button.</value>
  </data>
  <data name="ScrollbarJava" xml:space="preserve">
    <value>Scrollbar (Java)</value>
  </data>
  <data name="AJavaScrollbar" xml:space="preserve">
    <value>A Java scrollbar.</value>
  </data>
  <data name="ComboBoxJava" xml:space="preserve">
    <value>ComboBox (Java)</value>
  </data>
  <data name="AJavaCombobox" xml:space="preserve">
    <value>A Java combobox.</value>
  </data>
  <data name="DialogWindowJava" xml:space="preserve">
    <value>Dialog Window (Java)</value>
  </data>
  <data name="ADialogWindowAsOftenUsedInPopupForms" xml:space="preserve">
    <value>A dialog window, as often used in pop-up forms.</value>
  </data>
  <data name="TabPageSelectorJava" xml:space="preserve">
    <value>Tab Page Selector (Java)</value>
  </data>
  <data name="ATabInATabControlWhichWhenSelectedChangesTheCurrentlyViewedPage" xml:space="preserve">
    <value>A tab in a tab control, which when selected changes the currently viewed page.</value>
  </data>
  <data name="ProgessBarJava" xml:space="preserve">
    <value>Progess Bar (Java)</value>
  </data>
  <data name="AJavaProgressBar" xml:space="preserve">
    <value>A Java progress bar.</value>
  </data>
  <data name="TrackBarJava" xml:space="preserve">
    <value>Track Bar (Java)</value>
  </data>
  <data name="ATrackBarControlWhichConsistsOfAPointerOnASlidingScaleToIndicateANumericValue" xml:space="preserve">
    <value>A track bar control, which consists of a pointer on a sliding scale to indicate a numeric value.</value>
  </data>
  <data name="UpDownBoxJava" xml:space="preserve">
    <value>Up-Down Box (Java)</value>
  </data>
  <data name="AnUpdownBoxConsistingOfATextboxWithSomeUpdownButtonsForAdjustingTheValueInTheBox" xml:space="preserve">
    <value>An up-down box, consisting of a textbox with some up/down buttons for adjusting the value in the box.</value>
  </data>
  <data name="TableJava" xml:space="preserve">
    <value>Table (Java)</value>
  </data>
  <data name="AJavaTableAnAnalogousControlToTheWindowsListviewWhenViewedInDetailsMode" xml:space="preserve">
    <value>A java table - an analogous control to the windows listview, when viewed in details mode.</value>
  </data>
  <data name="TreeViewJava" xml:space="preserve">
    <value>Tree View (Java)</value>
  </data>
  <data name="AJavaTreeView" xml:space="preserve">
    <value>A java tree view.</value>
  </data>
  <data name="TreeNodeJava" xml:space="preserve">
    <value>Tree Node (Java)</value>
  </data>
  <data name="AJavaTreeViewNode" xml:space="preserve">
    <value>A java tree view node.</value>
  </data>
  <data name="ListBoxJava" xml:space="preserve">
    <value>List Box (Java)</value>
  </data>
  <data name="AJavaListBox" xml:space="preserve">
    <value>A java list box.</value>
  </data>
  <data name="TabControlJava" xml:space="preserve">
    <value>Tab Control (Java)</value>
  </data>
  <data name="AJavaTabControl" xml:space="preserve">
    <value>A java tab control.</value>
  </data>
  <data name="ToolBarJava" xml:space="preserve">
    <value>Tool Bar (Java)</value>
  </data>
  <data name="AJavaToolBar" xml:space="preserve">
    <value>A java tool bar.</value>
  </data>
  <data name="PopupMenuJava" xml:space="preserve">
    <value>Popup Menu (Java)</value>
  </data>
  <data name="AJavaPopupMenu" xml:space="preserve">
    <value>A Java popup menu.</value>
  </data>
  <data name="Java" xml:space="preserve">
    <value>Java</value>
  </data>
  <data name="AJavaElement" xml:space="preserve">
    <value>A Java element.</value>
  </data>
  <data name="DDEElement" xml:space="preserve">
    <value>DDE Element</value>
  </data>
  <data name="ADynamicDataExchangeDDEField" xml:space="preserve">
    <value>A Dynamic Data Exchange (DDE) field.</value>
  </data>
  <data name="elements" xml:space="preserve">
    <value>elements</value>
  </data>
  <data name="InvalidActionID0" xml:space="preserve">
    <value>Invalid action ID {0}</value>
  </data>
  <data name="MissingIDForElement" xml:space="preserve">
    <value>Missing ID for element</value>
  </data>
  <data name="MissingNameForElement0" xml:space="preserve">
    <value>Missing name for element {0}</value>
  </data>
  <data name="MissingHelptextForElement0" xml:space="preserve">
    <value>Missing helptext for element {0}</value>
  </data>
  <data name="InvalidApplicationTypeForElement0" xml:space="preserve">
    <value>Invalid application type for element {0}</value>
  </data>
  <data name="MissingAlternate0For1" xml:space="preserve">
    <value>Missing alternate {0} for {1}</value>
  </data>
  <data name="WindowText" xml:space="preserve">
    <value>Window Text</value>
  </data>
  <data name="ClassName" xml:space="preserve">
    <value>Class Name</value>
  </data>
  <data name="ControlID" xml:space="preserve">
    <value>Control ID</value>
  </data>
  <data name="Visible" xml:space="preserve">
    <value>Visible</value>
  </data>
  <data name="ScreenVisible" xml:space="preserve">
    <value>Screen Visible</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="Ordinal" xml:space="preserve">
    <value>Ordinal</value>
  </data>
  <data name="ChildCount" xml:space="preserve">
    <value>Child Count</value>
  </data>
  <data name="Style" xml:space="preserve">
    <value>Style</value>
  </data>
  <data name="AncestorsText" xml:space="preserve">
    <value>Ancestors Text</value>
  </data>
  <data name="TypeName" xml:space="preserve">
    <value>Type Name</value>
  </data>
  <data name="Screenshot" xml:space="preserve">
    <value>Screenshot</value>
  </data>
  <data name="StartX" xml:space="preserve">
    <value>Start X</value>
  </data>
  <data name="StartY" xml:space="preserve">
    <value>Start Y</value>
  </data>
  <data name="EndX" xml:space="preserve">
    <value>End X</value>
  </data>
  <data name="EndY" xml:space="preserve">
    <value>End Y</value>
  </data>
  <data name="RetainImage" xml:space="preserve">
    <value>Retain Image</value>
  </data>
  <data name="ElementSnapshot" xml:space="preserve">
    <value>Element Snapshot</value>
  </data>
  <data name="FontName" xml:space="preserve">
    <value>Font Name</value>
  </data>
  <data name="ImageValue" xml:space="preserve">
    <value>Image Value</value>
  </data>
  <data name="LocationMethod" xml:space="preserve">
    <value>Location Method</value>
  </data>
  <data name="RegionPosition" xml:space="preserve">
    <value>Region Position</value>
  </data>
  <data name="ImageSearchPadding" xml:space="preserve">
    <value>Image Search Padding</value>
  </data>
  <data name="RelativeParent" xml:space="preserve">
    <value>Relative Parent</value>
  </data>
  <data name="ColourTolerance" xml:space="preserve">
    <value>Colour Tolerance</value>
  </data>
  <data name="Greyscale" xml:space="preserve">
    <value>Grayscale</value>
  </data>
  <data name="ListDirection" xml:space="preserve">
    <value>List Direction</value>
  </data>
  <data name="Padding" xml:space="preserve">
    <value>Padding</value>
  </data>
  <data name="GridSchema" xml:space="preserve">
    <value>Grid Schema</value>
  </data>
  <data name="ComponentType" xml:space="preserve">
    <value>ComponentType</value>
  </data>
  <data name="SubType" xml:space="preserve">
    <value>SubType</value>
  </data>
  <data name="MatchIndex" xml:space="preserve">
    <value>Match Index</value>
  </data>
  <data name="MatchReverse" xml:space="preserve">
    <value>Match Reverse</value>
  </data>
  <data name="aX" xml:space="preserve">
    <value>aX</value>
  </data>
  <data name="aY" xml:space="preserve">
    <value>aY</value>
  </data>
  <data name="aWidth" xml:space="preserve">
    <value>aWidth</value>
  </data>
  <data name="aHeight" xml:space="preserve">
    <value>aHeight</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="KeyboardShortcut" xml:space="preserve">
    <value>Keyboard Shortcut</value>
  </data>
  <data name="DefaultAction" xml:space="preserve">
    <value>Default Action</value>
  </data>
  <data name="ElementCount" xml:space="preserve">
    <value>Element Count</value>
  </data>
  <data name="Unavailable" xml:space="preserve">
    <value>Unavailable</value>
  </data>
  <data name="Selected" xml:space="preserve">
    <value>Selected</value>
  </data>
  <data name="aChecked" xml:space="preserve">
    <value>aChecked</value>
  </data>
  <data name="Mixed" xml:space="preserve">
    <value>Mixed</value>
  </data>
  <data name="ReadOnly" xml:space="preserve">
    <value>Read Only</value>
  </data>
  <data name="Hottracked" xml:space="preserve">
    <value>Hottracked</value>
  </data>
  <data name="xDefault" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="xSelect" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="xReadOnly" xml:space="preserve">
    <value>Read Only</value>
  </data>
  <data name="X" xml:space="preserve">
    <value>X</value>
  </data>
  <data name="Y" xml:space="preserve">
    <value>Y</value>
  </data>
  <data name="ID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="Expanded" xml:space="preserve">
    <value>Expanded</value>
  </data>
  <data name="Collapsed" xml:space="preserve">
    <value>Collapsed</value>
  </data>
  <data name="Busy" xml:space="preserve">
    <value>Busy</value>
  </data>
  <data name="Floating" xml:space="preserve">
    <value>Floating</value>
  </data>
  <data name="Marqueed" xml:space="preserve">
    <value>Marqueed</value>
  </data>
  <data name="Animated" xml:space="preserve">
    <value>Animated</value>
  </data>
  <data name="Invisible" xml:space="preserve">
    <value>Invisible</value>
  </data>
  <data name="Offscreen" xml:space="preserve">
    <value>Offscreen</value>
  </data>
  <data name="Sizeable" xml:space="preserve">
    <value>Sizeable</value>
  </data>
  <data name="Moveable" xml:space="preserve">
    <value>Moveable</value>
  </data>
  <data name="SelfVoicing" xml:space="preserve">
    <value>Self Voicing</value>
  </data>
  <data name="Focusable" xml:space="preserve">
    <value>Focusable</value>
  </data>
  <data name="Selectable" xml:space="preserve">
    <value>Selectable</value>
  </data>
  <data name="Linked" xml:space="preserve">
    <value>Linked</value>
  </data>
  <data name="Traversed" xml:space="preserve">
    <value>Traversed</value>
  </data>
  <data name="Multiselectable" xml:space="preserve">
    <value>Multiselectable</value>
  </data>
  <data name="Extselectable" xml:space="preserve">
    <value>Extselectable</value>
  </data>
  <data name="AlertLow" xml:space="preserve">
    <value>Alert Low</value>
  </data>
  <data name="AlertMedium" xml:space="preserve">
    <value>Alert Medium</value>
  </data>
  <data name="AlertHigh" xml:space="preserve">
    <value>Alert High</value>
  </data>
  <data name="OffScreen_1" xml:space="preserve">
    <value>OffScreen</value>
  </data>
  <data name="UIAX" xml:space="preserve">
    <value>UIA X</value>
  </data>
  <data name="UIAY" xml:space="preserve">
    <value>UIA Y</value>
  </data>
  <data name="UIAWidth" xml:space="preserve">
    <value>UIA Width</value>
  </data>
  <data name="UIAHeight" xml:space="preserve">
    <value>UIA Height</value>
  </data>
  <data name="UIAClassName" xml:space="preserve">
    <value>UIA Class Name</value>
  </data>
  <data name="UIAAutomationId" xml:space="preserve">
    <value>UIA Automation Id</value>
  </data>
  <data name="UIALocalizedControlType" xml:space="preserve">
    <value>UIA Localized Control Type</value>
  </data>
  <data name="UIAControlType" xml:space="preserve">
    <value>UIA Control Type</value>
  </data>
  <data name="UIAName" xml:space="preserve">
    <value>UIA Name</value>
  </data>
  <data name="UIAPassword" xml:space="preserve">
    <value>UIA Password</value>
  </data>
  <data name="UIARequired" xml:space="preserve">
    <value>UIA Required</value>
  </data>
  <data name="UIAOrientation" xml:space="preserve">
    <value>UIA Orientation</value>
  </data>
  <data name="UIAItemStatus" xml:space="preserve">
    <value>UIA Item Status</value>
  </data>
  <data name="UIAItemType" xml:space="preserve">
    <value>UIA Item Type</value>
  </data>
  <data name="UIALabeledBy" xml:space="preserve">
    <value>UIA Labeled By</value>
  </data>
  <data name="UIAOffscreen" xml:space="preserve">
    <value>UIA Offscreen</value>
  </data>
  <data name="UIATopLevelWindowID" xml:space="preserve">
    <value>UIA Top Level Window ID</value>
  </data>
  <data name="UIAProcessId" xml:space="preserve">
    <value>UIA Process Id</value>
  </data>
  <data name="UIAEnabled" xml:space="preserve">
    <value>UIA Enabled</value>
  </data>
  <data name="UIAHelpText" xml:space="preserve">
    <value>UIA Help Text</value>
  </data>
  <data name="UIAHasKeyboardFocus" xml:space="preserve">
    <value>UIA Has Keyboard Focus</value>
  </data>
  <data name="UIAAcceleratorKey" xml:space="preserve">
    <value>UIA Accelerator Key</value>
  </data>
  <data name="UIAAccessKey" xml:space="preserve">
    <value>UIA Access Key</value>
  </data>
  <data name="WebX" xml:space="preserve">
    <value>Web X</value>
  </data>
  <data name="WebY" xml:space="preserve">
    <value>Web Y</value>
  </data>
  <data name="WebWidth" xml:space="preserve">
    <value>Web Width</value>
  </data>
  <data name="WebHeight" xml:space="preserve">
    <value>Web Height</value>
  </data>
  <data name="WebName" xml:space="preserve">
    <value>Web Name</value>
  </data>
  <data name="WebID" xml:space="preserve">
    <value>Web ID</value>
  </data>
  <data name="WebPath" xml:space="preserve">
    <value>Web Path/XPath</value>
  </data>
  <data name="WebElementType" xml:space="preserve">
    <value>Web Element Type</value>
  </data>
  <data name="WebValue" xml:space="preserve">
    <value>Web Value</value>
  </data>
  <data name="WebPageAddress" xml:space="preserve">
    <value>Web Page Address</value>
  </data>
  <data name="WebClass" xml:space="preserve">
    <value>Web Class</value>
  </data>
  <data name="WebClientX" xml:space="preserve">
    <value>Web Client X</value>
  </data>
  <data name="WebClientY" xml:space="preserve">
    <value>Web Client Y</value>
  </data>
  <data name="WebClientWidth" xml:space="preserve">
    <value>Web Client Width</value>
  </data>
  <data name="WebClientHeight" xml:space="preserve">
    <value>Web Client Height</value>
  </data>
  <data name="WebOffsetX" xml:space="preserve">
    <value>Web Offset X</value>
  </data>
  <data name="WebOffsetY" xml:space="preserve">
    <value>Web Offset Y</value>
  </data>
  <data name="WebOffsetWidth" xml:space="preserve">
    <value>Web Offset Width</value>
  </data>
  <data name="WebOffsetHeight" xml:space="preserve">
    <value>Web Offset Height</value>
  </data>
  <data name="WebScrollX" xml:space="preserve">
    <value>Web Scroll X</value>
  </data>
  <data name="WebScrollY" xml:space="preserve">
    <value>Web Scroll Y</value>
  </data>
  <data name="WebScrollWidth" xml:space="preserve">
    <value>Web Scroll Width</value>
  </data>
  <data name="WebScrollHeight" xml:space="preserve">
    <value>Web Scroll Height</value>
  </data>
  <data name="WebChildCount" xml:space="preserve">
    <value>Web Child Count</value>
  </data>
  <data name="WebElementIsEditable" xml:space="preserve">
    <value>Web Element Is Editable</value>
  </data>
  <data name="WebStyle" xml:space="preserve">
    <value>Web Style</value>
  </data>
  <data name="WebTabIndex" xml:space="preserve">
    <value>Web Tab Index</value>
  </data>
  <data name="WebInputType" xml:space="preserve">
    <value>Web Input Type</value>
  </data>
  <data name="WebAccessKey" xml:space="preserve">
    <value>Web Access Key</value>
  </data>
  <data name="WebText" xml:space="preserve">
    <value>Web Text</value>
  </data>
  <data name="WebSource" xml:space="preserve">
    <value>Web Source</value>
  </data>
  <data name="WebTargetAddress" xml:space="preserve">
    <value>Web Target Address</value>
  </data>
  <data name="WebAltText" xml:space="preserve">
    <value>Web Alt Text</value>
  </data>
  <data name="WebInputPattern" xml:space="preserve">
    <value>Web Input Pattern</value>
  </data>
  <data name="WebLinkRelationship" xml:space="preserve">
    <value>Web Link Relationship</value>
  </data>
  <data name="WebLinkTarget" xml:space="preserve">
    <value>Web Link Target</value>
  </data>
  <data name="WebPlaceholderText" xml:space="preserve">
    <value>Web Placeholder Text</value>
  </data>
  <data name="Path" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="TagName" xml:space="preserve">
    <value>Tag Name</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Link" xml:space="preserve">
    <value>Link</value>
  </data>
  <data name="InputType" xml:space="preserve">
    <value>Input Type</value>
  </data>
  <data name="InputIdentifier" xml:space="preserve">
    <value>Input Identifier</value>
  </data>
  <data name="ParentURL" xml:space="preserve">
    <value>Parent URL</value>
  </data>
  <data name="VirtualName" xml:space="preserve">
    <value>VirtualName</value>
  </data>
  <data name="AllowedActions" xml:space="preserve">
    <value>Allowed Actions</value>
  </data>
  <data name="Armed" xml:space="preserve">
    <value>Armed</value>
  </data>
  <data name="AncestorCount" xml:space="preserve">
    <value>Ancestor Count</value>
  </data>
  <data name="aAncestorCount" xml:space="preserve">
    <value>aAncestor Count</value>
  </data>
  <data name="Editable" xml:space="preserve">
    <value>Editable</value>
  </data>
  <data name="Expandable" xml:space="preserve">
    <value>Expandable</value>
  </data>
  <data name="Horizontal" xml:space="preserve">
    <value>Horizontal</value>
  </data>
  <data name="Iconified" xml:space="preserve">
    <value>Iconified</value>
  </data>
  <data name="JavaText" xml:space="preserve">
    <value>Java Text</value>
  </data>
  <data name="KeyBindings" xml:space="preserve">
    <value>Key Bindings</value>
  </data>
  <data name="Modal" xml:space="preserve">
    <value>Modal</value>
  </data>
  <data name="MultipleLine" xml:space="preserve">
    <value>Multiple Line</value>
  </data>
  <data name="MultiSelectable_1" xml:space="preserve">
    <value>MultiSelectable</value>
  </data>
  <data name="Opaque" xml:space="preserve">
    <value>Opaque</value>
  </data>
  <data name="Resizeable" xml:space="preserve">
    <value>Resizeable</value>
  </data>
  <data name="Showing" xml:space="preserve">
    <value>Showing</value>
  </data>
  <data name="SingleLine" xml:space="preserve">
    <value>Single Line</value>
  </data>
  <data name="Transient" xml:space="preserve">
    <value>Transient</value>
  </data>
  <data name="Vertical" xml:space="preserve">
    <value>Vertical</value>
  </data>
  <data name="FieldType" xml:space="preserve">
    <value>Field Type</value>
  </data>
  <data name="FieldText" xml:space="preserve">
    <value>Field Text</value>
  </data>
  <data name="DDEServerName" xml:space="preserve">
    <value>DDE Server Name</value>
  </data>
  <data name="DDETopicName" xml:space="preserve">
    <value>DDE Topic Name</value>
  </data>
  <data name="DDEItemName" xml:space="preserve">
    <value>DDE Item Name</value>
  </data>
  <data name="InformationalNote" xml:space="preserve">
    <value>Informational Note</value>
  </data>
  <data name="ScreenBounds" xml:space="preserve">
    <value>Screen Bounds</value>
  </data>
  <data name="ApplicationManagerOperations" xml:space="preserve">
    <value>Application Manager Operations</value>
  </data>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="DataType" xml:space="preserve">
    <value>Data Type</value>
  </data>
  <data name="NoDescriptionFoundPleaseFixThisProblem" xml:space="preserve">
    <value>No Description Found. Please fix this problem</value>
  </data>
  <data name="ThisActionTakesNoParameters" xml:space="preserve">
    <value>This action takes no parameters</value>
  </data>
  <data name="TheInternalIDForThisActionIs0" xml:space="preserve">
    <value>The internal ID for this action is '{0}'</value>
  </data>
  <data name="WorksWithTheFollowingElementTypes" xml:space="preserve">
    <value>Works with the following element types:</value>
  </data>
  <data name="xElements" xml:space="preserve">
    <value> elements</value>
  </data>
  <data name="ElementsReadStage" xml:space="preserve">
    <value> elements (read stage)</value>
  </data>
  <data name="GlobalActionTheTargetApplicationMustHaveFocus" xml:space="preserve">
    <value>'''Global action''' - the target application must have focus.</value>
  </data>
  <data name="Conditions" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="ElementTypes" xml:space="preserve">
    <value>Element Types</value>
  </data>
  <data name="SupportsTheFollowingActions" xml:space="preserve">
    <value>Supports the following actions:</value>
  </data>
  <data name="SupportsTheFollowingReadActions" xml:space="preserve">
    <value>Supports the following read actions:</value>
  </data>
  <data name="SupportsTheFollowingConditions" xml:space="preserve">
    <value>Supports the following conditions:</value>
  </data>
  <data name="TheFollowingAlternateTypesCanBeSelected" xml:space="preserve">
    <value>The following alternate types can be selected:</value>
  </data>
  <data name="InternalID0" xml:space="preserve">
    <value>Internal ID: {0}</value>
  </data>
  <data name="ApplicationTypes" xml:space="preserve">
    <value>Application Types</value>
  </data>
  <data name="Subtypes" xml:space="preserve">
    <value>Subtypes</value>
  </data>
  <data name="ApplicationAlreadyLaunched" xml:space="preserve">
    <value>Application already launched</value>
  </data>
  <data name="UnableToParseExternalApplicationManagerTimeoutParameter" xml:space="preserve">
    <value>Unable to parse external application manager timeout parameter</value>
  </data>
  <data name="CantLaunchApplicationType0" xml:space="preserve">
    <value>Can't launch application type {0}</value>
  </data>
  <data name="FailedToLaunch0" xml:space="preserve">
    <value>Failed to launch - {0}</value>
  </data>
  <data name="UnhandledElementType0Detected" xml:space="preserve">
    <value>Unhandled element type '{0}' detected</value>
  </data>
  <data name="AlreadyConnectedToAnApplication" xml:space="preserve">
    <value>Already connected to an application</value>
  </data>
  <data name="FailedToParseCollectionOfWindowTitlesXMLEngineReportedError0" xml:space="preserve">
    <value>Failed to parse collection of window titles. XML engine reported error - {0}</value>
  </data>
  <data name="AtLeastOneOfWindowTitleProcessNameOrProcessIdMustBeSpecified" xml:space="preserve">
    <value>At least one of window title, process name or process id must be specified</value>
  </data>
  <data name="FailedToAttach0" xml:space="preserve">
    <value>Failed to attach - {0}</value>
  </data>
  <data name="NoExecutableSpecified" xml:space="preserve">
    <value>No executable specified</value>
  </data>
  <data name="MainframeAlreadyLaunched" xml:space="preserve">
    <value>Mainframe already launched</value>
  </data>
  <data name="AlreadyAttachedToAMainframe" xml:space="preserve">
    <value>Already attached to a mainframe</value>
  </data>
  <data name="NoSessionIdOrSessionFileSpecified" xml:space="preserve">
    <value>No session id or session file specified</value>
  </data>
  <data name="InvalidHookValue0" xml:space="preserve">
    <value>Invalid hook value - {0}</value>
  </data>
  <data name="UnrecognisedRole0" xml:space="preserve">
    <value>Unrecognised role: {0}</value>
  </data>
  <data name="TheSAPElementTypeCannotBeIndentifiedSpecifcallyAndNoWildcardTypeHasBeenDefined" xml:space="preserve">
    <value>The SAP element type cannot be indentified specifcally, and no wildcard type has been defined.</value>
  </data>
  <data name="InvalidSpyResponseAt0" xml:space="preserve">
    <value>Invalid spy response at '{0}'</value>
  </data>
  <data name="UnrecognisedSpyResultOf0" xml:space="preserve">
    <value>Unrecognised spy result of {0}</value>
  </data>
  <data name="ProcessingQuery" xml:space="preserve">
    <value>Processing query</value>
  </data>
  <data name="ParsingResponse" xml:space="preserve">
    <value>Parsing response</value>
  </data>
  <data name="FailedToGetSnapshot01" xml:space="preserve">
    <value>Failed to get snapshot - {0} - {1}</value>
  </data>
  <data name="BadSnapshotResultFormat" xml:space="preserve">
    <value>Bad snapshot result format</value>
  </data>
  <data name="ElementTreeComplete" xml:space="preserve">
    <value>Element Tree Complete</value>
  </data>
  <data name="OnlyWin32ElementsSupportSnapshotsNot0" xml:space="preserve">
    <value>Only Win32 elements support snapshots. Not: {0}</value>
  </data>
  <data name="UnknownResponseType0" xml:space="preserve">
    <value>Unknown response type {0}</value>
  </data>
  <data name="TheReadCurrentValueActionIsObsoletePleaseUseTheSuggestedAlternative" xml:space="preserve">
    <value>The ReadCurrentValue action is obsolete - please use the suggested alternative</value>
  </data>
  <data name="TheJABSnapshotActionIsReplacedByTheMoreDetailedWindowsSnapshotActionWhichWillInc" xml:space="preserve">
    <value>The JABSnapshot action is replaced by the more detailed WindowsSnapshot action, which will include all the JAB information, but in a better context</value>
  </data>
  <data name="GetWindowTextForRegionsHasBeenSlightlyAlteredToGiveBetterInformationToTheEndUser" xml:space="preserve">
    <value>GetWindowText for regions has been slightly altered to give better information to the end user</value>
  </data>
  <data name="TheRecogniseTextActionsHaveBeenCoalescedIntoASingleActionWithParametersDetailing" xml:space="preserve">
    <value>The RecogniseText actions have been coalesced into a single action with parameters detailing the different modes of operation</value>
  </data>
  <data name="AllCheckExistsActionsAreNowCombined" xml:space="preserve">
    <value>All CheckExists actions are now combined</value>
  </data>
  <data name="MissingActionType0" xml:space="preserve">
    <value>Missing action type {0}</value>
  </data>
  <data name="UnrecognisedResponse" xml:space="preserve">
    <value>Unrecognised response</value>
  </data>
  <data name="PrequerySyntaxErrorMissing" xml:space="preserve">
    <value>Prequery syntax error - missing =</value>
  </data>
  <data name="PrequerySyntaxErrorMissing_1" xml:space="preserve">
    <value>Prequery syntax error - missing {</value>
  </data>
  <data name="PrequerySyntaxErrorMissing_2" xml:space="preserve">
    <value>Prequery syntax error - missing }</value>
  </data>
  <data name="CanNotWriteToElementsOfType0BecauseTheyAreReadonly" xml:space="preserve">
    <value>Can not write to elements of type '{0}' because they are readonly</value>
  </data>
  <data name="ThatActionIsOnlyValidForAnActiveXTreeView" xml:space="preserve">
    <value>That action is only valid for an ActiveX TreeView</value>
  </data>
  <data name="GetRowOffsetDoesNotWorkWithElementsOfType0" xml:space="preserve">
    <value>GetRowOffset does not work with elements of type '{0}</value>
  </data>
  <data name="SetTopRowDoesNotWorkWithElementsOfType0" xml:space="preserve">
    <value>SetTopRow does not work with elements of type '{0}</value>
  </data>
  <data name="GoToCellDoesNotWorkWithElementsOfType0" xml:space="preserve">
    <value>GoToCell does not work with elements of type '{0}</value>
  </data>
  <data name="SelectRangeDoesNotWorkWithElementsOfType0" xml:space="preserve">
    <value>SelectRange does not work with elements of type '{0}</value>
  </data>
  <data name="InvalidAction0" xml:space="preserve">
    <value>Invalid action {0}</value>
  </data>
  <data name="Equal" xml:space="preserve">
    <value>=  (Equal)</value>
  </data>
  <data name="NotEqual" xml:space="preserve">
    <value>&lt;&gt; (Not Equal)</value>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>&lt;  (Less Than)</value>
  </data>
  <data name="LessThanOrEqual" xml:space="preserve">
    <value>&lt;= (Less Than or Equal)</value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>&gt;  (Greater Than)</value>
  </data>
  <data name="GreaterThanOrEqual" xml:space="preserve">
    <value>&gt;= (Greater Than or Equal)</value>
  </data>
  <data name="Wildcard" xml:space="preserve">
    <value>*  (Wildcard)</value>
  </data>
  <data name="RegEx" xml:space="preserve">
    <value>.* (Reg Ex)</value>
  </data>
  <data name="UnrecognisedComparisonType0" xml:space="preserve">
    <value>Unrecognised comparison type: {0}</value>
  </data>
  <data name="xDo" xml:space="preserve">
    <value>Do</value>
  </data>
  <data name="x0Java" xml:space="preserve">
    <value>({0}) Java</value>
  </data>
  <data name="x0AA" xml:space="preserve">
    <value>({0}) AA</value>
  </data>
  <data name="AAElement" xml:space="preserve">
    <value>AAElement</value>
  </data>
  <data name="x0HTML" xml:space="preserve">
    <value>({0}) HTML</value>
  </data>
  <data name="x0WebElement" xml:space="preserve">
    <value>({0}) Web Element</value>
  </data>
  <data name="HTML" xml:space="preserve">
    <value>HTML</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="ExternalProcessTimeout" xml:space="preserve">
    <value>ExternalProcessTimeout</value>
  </data>
  <data name="ProcessMode" xml:space="preserve">
    <value>ProcessMode</value>
  </data>
  <data name="CommandLineParams" xml:space="preserve">
    <value>CommandLineParams</value>
  </data>
  <data name="WindowTitle_1" xml:space="preserve">
    <value>WindowTitle</value>
  </data>
  <data name="SessionID" xml:space="preserve">
    <value>Session ID</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="AttachmateVariant" xml:space="preserve">
    <value>Attachmate Variant</value>
  </data>
  <data name="WaitTimeout" xml:space="preserve">
    <value>WaitTimeout</value>
  </data>
  <data name="WaitSleepTime" xml:space="preserve">
    <value>WaitSleepTime</value>
  </data>
  <data name="CodePage" xml:space="preserve">
    <value>CodePage</value>
  </data>
  <data name="ExcludeHTC" xml:space="preserve">
    <value>ExcludeHTC</value>
  </data>
  <data name="UseJavaInBrowser" xml:space="preserve">
    <value>UseJavaInBrowser</value>
  </data>
  <data name="ActiveTabOnly" xml:space="preserve">
    <value>ActiveTabOnly</value>
  </data>
  <data name="ProcessName_1" xml:space="preserve">
    <value>ProcessName</value>
  </data>
  <data name="WorkingDirectory" xml:space="preserve">
    <value>WorkingDirectory</value>
  </data>
  <data name="NonInvasive" xml:space="preserve">
    <value>NonInvasive</value>
  </data>
  <data name="xError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="GetsPathOfTheWebElement" xml:space="preserve">
    <value>Gets Path of the Web element.</value>
  </data>
  <data name="DeprecatedActionLabelTemplate" xml:space="preserve">
    <value>{0} (deprecated)</value>
    <comment>Placeholder 0 contains the action name.</comment>
  </data>
  <data name="WebCssSelector" xml:space="preserve">
    <value>Web CSS Selector</value>
  </data>
  <data name="TrackingId" xml:space="preserve">
    <value>Tracking ID</value>
  </data>
  <data name="TrackingIdDescription" xml:space="preserve">
    <value>The tracking ID restricts spying to a specific browser and is output by the Launch action in a Navigate stage. This optional output can be assigned to a data item so when the browser is launched a unique ID is stored in the data item and then passed as an input into any other stages that interact with the browser to ensure the search is restricted to a specific web page.</value>
  </data>
  <data name="WebWrite" xml:space="preserve">
    <value>Write</value>
  </data>
  <data name="WriteTheValueToTheGivenWebElement" xml:space="preserve">
    <value>Write the value to the given web element</value>
  </data>
  <data name="ClosesTheTabs" xml:space="preserve">
    <value>Writes on the given element</value>
  </data>
  <data name="WritesToTheGivenElement" xml:space="preserve">
    <value>Writes to the given element</value>
  </data>
  <data name="CitrixApplication" xml:space="preserve">
    <value>Citrix Application</value>
  </data>
</root>
