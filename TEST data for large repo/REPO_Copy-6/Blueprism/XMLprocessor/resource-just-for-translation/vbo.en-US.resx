<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BPAObjectCalendars" xml:space="preserve">
    <value>BPA Object - Calendars</value>
  </data>
  <data name="Calendars" xml:space="preserve">
    <value>Calendars</value>
  </data>
  <data name="CleanUp" xml:space="preserve">
    <value>Clean Up</value>
  </data>
  <data name="GetWorkingDaysInRange" xml:space="preserve">
    <value>Get Working Days In Range</value>
  </data>
  <data name="CountWorkingDaysInRange" xml:space="preserve">
    <value>Count Working Days In Range</value>
  </data>
  <data name="IsWorkingDay" xml:space="preserve">
    <value>Is Working Day</value>
  </data>
  <data name="AddWorkingDays" xml:space="preserve">
    <value>Add Working Days</value>
  </data>
  <data name="IsWeekend" xml:space="preserve">
    <value>Is Weekend</value>
  </data>
  <data name="IsPublicHoliday" xml:space="preserve">
    <value>Is Public Holiday</value>
  </data>
  <data name="IsOtherHoliday" xml:space="preserve">
    <value>Is Other Holiday</value>
  </data>
  <data name="GetPublicHolidaysInRange" xml:space="preserve">
    <value>Get Public Holidays In Range</value>
  </data>
  <data name="GetOtherHolidaysInRange" xml:space="preserve">
    <value>Get Other Holidays In Range</value>
  </data>
  <data name="ThisInternalBusinessObjectprovides_dcdae390deab2f40" xml:space="preserve">
    <value>This Internal Business Object provides the ability for processes to interact with working days defined in calendars within System Manager.</value>
  </data>
  <data name="Getstheworkingdaysasconfiguredonth_b2c095b3b3bd6d00" xml:space="preserve">
    <value>Gets the working days as configured on the specified calendar, starting and ending on the specified dates.</value>
  </data>
  <data name="Countsthenumberofworkingdaysfoundw_fac7263ab618b10f" xml:space="preserve">
    <value>Counts the number of working days found within the given range (inclusive). </value>
  </data>
  <data name="Checksifthegivendateisaworkingdayo_8cf607e9c1569c01" xml:space="preserve">
    <value>Checks if the given date is a working day or not according to the specified calendar.</value>
  </data>
  <data name="Addsthespecifiednumberofworkingday_69c8acb6f7dc76a4" xml:space="preserve">
    <value>Adds the specified number of working days to a start date returning the result. In order to get the next working day after a known date, use a 'Days' value of 1. To get the previous working day, use a value of -1. Note that calling this action with a Days value of 0 will always return Start Date, regardless of whether that is a working day or not.</value>
  </data>
  <data name="Checksifthegivendatefallsoutsideth_04199d0f56948577" xml:space="preserve">
    <value>Checks if the given date falls outside the working week - ie. the weekend - as defined in the specified calendar</value>
  </data>
  <data name="Checksifthegivendaterepresentsanen_c66b1dc00044699b" xml:space="preserve">
    <value>Checks if the given date represents an enabled public holiday as defined in the specified calendar. Note that if a public holiday is configured to be ignored in a calendar, this action will return False for that date</value>
  </data>
  <data name="Checksifthegivendaterepresentsadat_f5f0876df94dd198" xml:space="preserve">
    <value>Checks if the given date represents a date defined as an 'other holiday' in the specified calendar. </value>
  </data>
  <data name="Getsalltheenabledpublicholidaysdef_6096f69cdefdb4d2" xml:space="preserve">
    <value>Gets all the enabled public holidays defined on a calendar which fall within the (inclusive) date range given. Note that if a public holiday is configured to be ignored in a calendar, it will not be returned by this action.</value>
  </data>
  <data name="Getsalltheotherholidaysspecifiedin_324623fb61620f44" xml:space="preserve">
    <value>Gets all the other holidays specified in a calendar which fall within the (inclusive) date range given</value>
  </data>
  <data name="BPAObjectDataOLEDB" xml:space="preserve">
    <value>BPA Object - Data - OLEDB</value>
  </data>
  <data name="DataOLEDB" xml:space="preserve">
    <value>Data - OLEDB</value>
  </data>
  <data name="ASQLinterfaceforinteractingwithOLEDBdatasources" xml:space="preserve">
    <value>A SQL interface for interacting with OLEDB data sources</value>
  </data>
  <data name="SetConnection" xml:space="preserve">
    <value>Set Connection</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="GetCollection" xml:space="preserve">
    <value>Get Collection</value>
  </data>
  <data name="Execute" xml:space="preserve">
    <value>Execute</value>
  </data>
  <data name="Setstheconnectiondetailsforthedatabase" xml:space="preserve">
    <value>Sets the connection details for the database.</value>
  </data>
  <data name="CleanUpPageThisisanoptionalpagewhe_e329705673556ba2" xml:space="preserve">
    <value>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically by Automate immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</value>
  </data>
  <data name="InitialisePageThisisanoptionalpage_5dc36d61f8e83337" xml:space="preserve">
    <value>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically by Automate immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</value>
  </data>
  <data name="OpensaconnectiontotheOLEDBdatabase" xml:space="preserve">
    <value>Opens a connection to the OLEDB database.</value>
  </data>
  <data name="ClosestheconnectiontotheOLEDBdatabase" xml:space="preserve">
    <value>Closes the connection to the OLEDB database.</value>
  </data>
  <data name="Ifthepasswordissetusepasswordinconnectionstring" xml:space="preserve">
    <value>If the password is set use password in connection string.</value>
  </data>
  <data name="BPAObjectDataSQLServer" xml:space="preserve">
    <value>BPA Object - Data - SQL Server</value>
  </data>
  <data name="DataSQLServer" xml:space="preserve">
    <value>Data - SQL Server</value>
  </data>
  <data name="SQLServerinteractionobject" xml:space="preserve">
    <value>SQL Server interaction object.</value>
  </data>
  <data name="Configure" xml:space="preserve">
    <value>Configure</value>
  </data>
  <data name="BeginTransaction" xml:space="preserve">
    <value>Begin Transaction</value>
  </data>
  <data name="CommitTransaction" xml:space="preserve">
    <value>Commit Transaction</value>
  </data>
  <data name="RollbackTransaction" xml:space="preserve">
    <value>Rollback Transaction</value>
  </data>
  <data name="GetRecordsAffected" xml:space="preserve">
    <value>Get Records Affected</value>
  </data>
  <data name="GetNumber" xml:space="preserve">
    <value>Get Number</value>
  </data>
  <data name="GetText" xml:space="preserve">
    <value>Get Text</value>
  </data>
  <data name="GetCSVFile" xml:space="preserve">
    <value>Get CSV File</value>
  </data>
  <data name="GetCSV" xml:space="preserve">
    <value>Get CSV</value>
  </data>
  <data name="IftheuserisnotsetthanthismustbeLANconnection" xml:space="preserve">
    <value>If the user is not set than this must be LAN connection</value>
  </data>
  <data name="Configuresthisinstanceoftheutility_7d7269e0965cf40d" xml:space="preserve">
    <value>Configures this instance of the utility VBO. Calling it with no parameters will cause the configuration to be reset to default values.</value>
  </data>
  <data name="Notethatwedontthrowanexceptionhere_2702a5a9af45d108" xml:space="preserve">
    <value>Note that we don't throw an exception here even if a failure is encountered - this is probably being called as part of a wider action, and the caller has the context with which to decide where the exception should be raised.</value>
  </data>
  <data name="Flagindicatingthattheconnectionwra_18d32d90556979e9" xml:space="preserve">
    <value>Flag indicating that the connection wrapped by this VBO is currently in the process of closing</value>
  </data>
  <data name="EnsurethatwerenotbeingcalledbyRoll_6ac8a4ed7f2b1e31" xml:space="preserve">
    <value>Ensure that we're not being called by 'Rollback' which was called by this action - infinite loops are bad.</value>
  </data>
  <data name="Closeandcleartheconnectionpool" xml:space="preserve">
    <value>Close and clear the connection pool</value>
  </data>
  <data name="BPAObjectEmailPOP3_SMTP" xml:space="preserve">
    <value>BPA Object - Email - POP3_SMTP</value>
  </data>
  <data name="EmailPOP3SMTP" xml:space="preserve">
    <value>Email - POP3/SMTP</value>
  </data>
  <data name="RetrieveemailviaPOP3protocolandsen_2a334e6857c87321" xml:space="preserve">
    <value>Retrieve email via POP3 protocol and send using SMTP protocol</value>
  </data>
  <data name="GetMessage" xml:space="preserve">
    <value>Get Message</value>
  </data>
  <data name="SendMessage" xml:space="preserve">
    <value>Send Message</value>
  </data>
  <data name="DeleteMessage" xml:space="preserve">
    <value>Delete Message</value>
  </data>
  <data name="DeleteMessages" xml:space="preserve">
    <value>Delete Messages</value>
  </data>
  <data name="ListMessages" xml:space="preserve">
    <value>List Messages</value>
  </data>
  <data name="SaveAttachments" xml:space="preserve">
    <value>Save Attachments</value>
  </data>
  <data name="CleanUpPageThisisanoptionalpagewhe_d89d23e3afc91b83" xml:space="preserve">
    <value>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</value>
  </data>
  <data name="InitialisePageThisisanoptionalpage_0318e5b3816219c0" xml:space="preserve">
    <value>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</value>
  </data>
  <data name="DeletesamessagefromthePOP3server" xml:space="preserve">
    <value>Deletes a message from the POP3 server.</value>
  </data>
  <data name="ConfiguresPOP3andSMTPsettingsfortheBusinessObject" xml:space="preserve">
    <value>Configures POP3 and SMTP settings for the Business Object</value>
  </data>
  <data name="SendsamessageusingtheSMTPprotocol" xml:space="preserve">
    <value>Sends a message using the SMTP protocol.</value>
  </data>
  <data name="GetsamessageusingthePOP3protocolBy_0b025a93677a3809" xml:space="preserve">
    <value>Gets a message using the POP3 protocol. By default, for multipart messages the plain text part is returned in preference to HTML (with the Content-Type output parameter indicating what was actually returned), however the HTMLPreferred flag can be used to reverse this logic. If the message contains no plain text or HTML parts then an empty string is returned.</value>
  </data>
  <data name="Deletesacollectionidentifyingmessa_70c2b485c0795b30" xml:space="preserve">
    <value>Deletes a collection identifying messages from the POP3 server.</value>
  </data>
  <data name="Getsamessageattachmentandsavesittoagivenfolder" xml:space="preserve">
    <value>Gets a message attachment and saves it to a given folder.</value>
  </data>
  <data name="BPAObjectMSExcel" xml:space="preserve">
    <value>BPA Object - MS Excel</value>
  </data>
  <data name="MSExcelVBO" xml:space="preserve">
    <value>MS Excel VBO</value>
  </data>
  <data name="TheVBOreplacementfortheCommonAutom_7c4729b185fdc136" xml:space="preserve">
    <value>The VBO replacement for the Common Automation Excel business object</value>
  </data>
  <data name="RemoveBlankRows" xml:space="preserve">
    <value>Remove Blank Rows</value>
  </data>
  <data name="CreateInstance" xml:space="preserve">
    <value>Create Instance</value>
  </data>
  <data name="OpenInstance" xml:space="preserve">
    <value>Open Instance</value>
  </data>
  <data name="Attach" xml:space="preserve">
    <value>Attach</value>
  </data>
  <data name="Attachtoworkbook" xml:space="preserve">
    <value>Attach to workbook</value>
  </data>
  <data name="CloseInstance" xml:space="preserve">
    <value>Close Instance</value>
  </data>
  <data name="ReleaseInstance" xml:space="preserve">
    <value>Release Instance</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="CloseAllInstances" xml:space="preserve">
    <value>Close All Instances</value>
  </data>
  <data name="SetCurrentInstance" xml:space="preserve">
    <value>Set Current Instance</value>
  </data>
  <data name="SetEventsEnabled" xml:space="preserve">
    <value>Set Events Enabled</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Show</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Hide</value>
  </data>
  <data name="CreateWorkbook" xml:space="preserve">
    <value>Create Workbook</value>
  </data>
  <data name="OpenWorkbook" xml:space="preserve">
    <value>Open Workbook</value>
  </data>
  <data name="ActivateWorkbook" xml:space="preserve">
    <value>Activate Workbook</value>
  </data>
  <data name="SaveWorkbook" xml:space="preserve">
    <value>Save Workbook</value>
  </data>
  <data name="SaveCurrentWorkbook" xml:space="preserve">
    <value>Save Current Workbook</value>
  </data>
  <data name="SaveWorkbookAs" xml:space="preserve">
    <value>Save Workbook As</value>
  </data>
  <data name="SaveCurrentWorkbookAs" xml:space="preserve">
    <value>Save Current Workbook As</value>
  </data>
  <data name="CloseWorkbook" xml:space="preserve">
    <value>Close Workbook</value>
  </data>
  <data name="CloseCurrentWorkbook" xml:space="preserve">
    <value>Close Current Workbook</value>
  </data>
  <data name="IsReadOnly" xml:space="preserve">
    <value>Is Read Only</value>
  </data>
  <data name="ActivateWorksheet" xml:space="preserve">
    <value>Activate Worksheet</value>
  </data>
  <data name="CreateWorksheet" xml:space="preserve">
    <value>Create Worksheet</value>
  </data>
  <data name="DeleteWorksheet" xml:space="preserve">
    <value>Delete Worksheet</value>
  </data>
  <data name="MoveWorksheet" xml:space="preserve">
    <value>Move Worksheet</value>
  </data>
  <data name="CopyandPasteWorksheetRange" xml:space="preserve">
    <value>Copy and Paste Worksheet Range</value>
  </data>
  <data name="GetWorksheetAsCollection" xml:space="preserve">
    <value>Get Worksheet As Collection</value>
  </data>
  <data name="GetWorksheetAsCollection_Fast_" xml:space="preserve">
    <value>Get Worksheet As Collection (Fast)</value>
  </data>
  <data name="GetWorksheetasCollectionOffset" xml:space="preserve">
    <value>Get Worksheet as Collection Offset</value>
  </data>
  <data name="GetWorksheetRangeAsCollection" xml:space="preserve">
    <value>Get Worksheet Range As Collection</value>
  </data>
  <data name="SplitWorksheet" xml:space="preserve">
    <value>Split Worksheet</value>
  </data>
  <data name="GetWorksheetNames" xml:space="preserve">
    <value>Get Worksheet Names</value>
  </data>
  <data name="GetWorksheetName" xml:space="preserve">
    <value>Get Worksheet Name</value>
  </data>
  <data name="GetWorksheetPosition" xml:space="preserve">
    <value>Get Worksheet Position</value>
  </data>
  <data name="WorksheetExists" xml:space="preserve">
    <value>Worksheet Exists</value>
  </data>
  <data name="GetNumberOfRows" xml:space="preserve">
    <value>Get Number Of Rows</value>
  </data>
  <data name="GoToCell" xml:space="preserve">
    <value>Go To Cell</value>
  </data>
  <data name="GoToNextCell" xml:space="preserve">
    <value>Go To Next Cell</value>
  </data>
  <data name="GetActiveCell" xml:space="preserve">
    <value>Get Active Cell</value>
  </data>
  <data name="FindNextEmptyCell" xml:space="preserve">
    <value>Find Next Empty Cell</value>
  </data>
  <data name="GoToNextEmptyCellLeft" xml:space="preserve">
    <value>Go To Next Empty Cell Left</value>
  </data>
  <data name="GoToNextEmptyCellRight" xml:space="preserve">
    <value>Go To Next Empty Cell Right</value>
  </data>
  <data name="GoToNextEmptyCellUp" xml:space="preserve">
    <value>Go To Next Empty Cell Up</value>
  </data>
  <data name="GoToNextEmptyCellDown" xml:space="preserve">
    <value>Go To Next Empty Cell Down</value>
  </data>
  <data name="SetCellValue" xml:space="preserve">
    <value>Set Cell Value</value>
  </data>
  <data name="WriteCollection" xml:space="preserve">
    <value>Write Collection</value>
  </data>
  <data name="GetCellValue" xml:space="preserve">
    <value>Get Cell Value</value>
  </data>
  <data name="GetActiveCellValue" xml:space="preserve">
    <value>Get Active Cell Value</value>
  </data>
  <data name="GetFormattedCellValue" xml:space="preserve">
    <value>Get Formatted Cell Value</value>
  </data>
  <data name="FormatCell" xml:space="preserve">
    <value>Format Cell</value>
  </data>
  <data name="FormatCurrentCell" xml:space="preserve">
    <value>Format Current Cell</value>
  </data>
  <data name="SetWindowSize" xml:space="preserve">
    <value>Set Window Size</value>
  </data>
  <data name="SetWindowLocation" xml:space="preserve">
    <value>Set Window Location</value>
  </data>
  <data name="SetWindowState" xml:space="preserve">
    <value>Set Window State</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="WriteToClipboard" xml:space="preserve">
    <value>Write To Clipboard</value>
  </data>
  <data name="ProtectWorkbook" xml:space="preserve">
    <value>Protect Workbook</value>
  </data>
  <data name="HideWorksheet" xml:space="preserve">
    <value>Hide Worksheet</value>
  </data>
  <data name="HideOtherWorksheets" xml:space="preserve">
    <value>Hide Other Worksheets</value>
  </data>
  <data name="ImportCSV" xml:space="preserve">
    <value>Import CSV</value>
  </data>
  <data name="RunMacro" xml:space="preserve">
    <value>Run Macro</value>
  </data>
  <data name="Closesalltheinstancesthathavebeenc_b7ca543b53141901" xml:space="preserve">
    <value>Closes all the instances that have been created / attached to using this business object.</value>
  </data>
  <data name="Createsaworkbookonthespecifiedinst_e890f5cbdce02ff1" xml:space="preserve">
    <value>Creates a workbook on the specified instance, returning the resultant name.

Params:
- handle : Number : The handle identifying the instance on which the workbook should be required. The default of zero indicates the current instance.

Returns:
- Workbook Name : Text : The workbook name that Excel has granted to the new workbook. By default, Excel will call it "Book&lt;n&gt;" where &lt;n&gt; is a positive integer.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.</value>
  </data>
  <data name="Opensaworkbookusingtheinstancespec_70aa3cf96536788b" xml:space="preserve">
    <value>Opens a workbook using the instance specified in the given handle, opening the book represented by the given filename.

Params :
- handle : Number : The handle to the instance in which the workbook should be opened. The default value of zero indicates the current instance.
- File name : Text : The path to the file which should be opened.

Outputs:
- Workbook Name : Text : The name of the workbook that Excel uses to identify it.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
- File Not Found : If the given file does not exist or is not a file.</value>
  </data>
  <data name="Savestheworkbookusingthecurrentnam_f865a4d08636b8bc" xml:space="preserve">
    <value>Saves the workbook using the current name as a filename.

Params:
- handle : Number : The integer identifying the instance on which the workbook should be saved. The default of 0 indicates the current instance.
- Workbook Name : The name of the workbook to be saved. The default of empty indicates that the active workbook should be saved.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</value>
  </data>
  <data name="Savethegivenworkbookusingthegivenf_882af15fea7da48e" xml:space="preserve">
    <value>Save the given workbook using the given file name.

Params :
- handle : Number : The integer identifying the instance on which the workbook resides. Default (0) indicates the current instance
- Workbook Name : Text : The name of the workbook which should be saved. Default ("") indicates the active workbook.
- File name : Text : The path and name of the file to which the workbook should be saved.

Output :
- New Workbook Name : Text : The new name with which the workbook is identified within the excel instance.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</value>
  </data>
  <data name="ActivatesCreatestheworksheetspecif_2471612f72e29021" xml:space="preserve">
    <value>Activates / Creates the worksheet specified by the given parameters 

Params:
- handle : Number : The instance handle;
- Workbook Name : Text : is the name of the workbook on which the sheet resides / should be created;
- Sheet name : Text : The name of the worksheet
- Create If Missing? : Flag : Indicates if the worksheet should be created if one with that name doesn't exist on the workbook - if missing, it will *not* create it.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- Worksheet Not Found : If the given worksheet did not exist on the specified workbook.</value>
  </data>
  <data name="Deletesthespecifiedworksheetfromth_83371262aceef135" xml:space="preserve">
    <value>Deletes the specified worksheet from the workbook.

Params:
- handle : Number : The excel instance handle
- Workbook Name : Text : The name of the workbook
- Worksheet Name : Text : The name of the sheet to delete.
If the sheet doesn't exist, this will fail silently - ie. nothing will occur.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- Worksheet Not Found : If the named worksheet did not exist on the specified workbook, or if the active sheet was specified and there was no active sheet.</value>
  </data>
  <data name="Activatesthecellinthegivenworkbook_eb8a9f0a94da453a" xml:space="preserve">
    <value>Activates the cell in the given workbook, identified by the given cell reference.

Params:
- handle : Number: The integer handle identifying the excel instance (0 represents 'active' instance)
- Cell Reference : Text : the cell reference to go to
NOTE - the active sheet in the instance is the one on which the cell is active</value>
  </data>
  <data name="Setsthespecifiedcellsvaluetothegiv_89d1dd46129bc4e1" xml:space="preserve">
    <value>Sets the specified cell's value to the given value.
This has the side-effect of setting the active cell to that which is specified here.

Exceptions
Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action
</value>
  </data>
  <data name="Getsthevalueofthespecifiedcellnote_9e4352e75612508e" xml:space="preserve">
    <value>Gets the value of the specified cell - note that if the cell has some formatting set in it, this does *not* return the formatted value - See "Get Formatted Cell Value".
Note also that this has the side-effect of making the specified cell active.</value>
  </data>
  <data name="Activatestheexcelworkbookidentifie_35a8df8bed69c089" xml:space="preserve">
    <value>Activates the excel workbook identified by the given handle and name.

Params:
- handle : Number : The identifier of the instance which is holding the workbook; 0 (default) indicates the active instance
- Name : Text : The name of the workbook which should be activated

Exceptions:
- Invalid Input Parameter : If the worksheet name parameter is given
- Bad Handle : If the handle does not correspond to an Excel instance</value>
  </data>
  <data name="Closesthespecifiedworkbooksavingch_f53e08042a7a7fa8" xml:space="preserve">
    <value>Closes the specified workbook, saving changes if requested.

Params:
- handle : Number : The integer identifying the instance on which the workbook should be closed. 0 indicates the current instance.
- Workbook Name : Text : The name of the workbook which should be closed. "" indicates the active workbook on the specified instance.
- Save Changes : Flag : True to save the changes (the equivalent of calling 'Save Workbook' before closing the workbook); False to discard any changes when closing the workbook.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</value>
  </data>
  <data name="CreatesaninstanceofExcelreturninga_ab9a2452273e9edb" xml:space="preserve">
    <value>Creates an instance of Excel, returning a handle with which it can be retrieved using the global object method : GetInstance(handle).</value>
  </data>
  <data name="Closestheinstancerepresentedbytheg_a9a3dc45ffdb9af6" xml:space="preserve">
    <value>Closes the instance represented by the given handle, saving the changes or not as specified.

Params:
- handle : Number : The handle identifying the instance that should be closed; The default of 0 will close the 'current active' instance - ie. the last one accessed. Note that following the 'current active' instance being closed, the current instance will not be set.
- Save Changes : Flag : True to save the instance's workbooks before closing; False to just close the instance.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</value>
  </data>
  <data name="OpensacurrentlyrunninginstanceofEx_b7916340137e1069" xml:space="preserve">
    <value>Opens a currently running instance of Excel with the given workbook name.

If no workbook name is given, it opens the active instance of Excel. If there is no instance of Excel currently running, it will create a new one.

Params:
- WorkbookName : Text : should correspond to the workbook which should be opened - an empty value will cause the first activated instance of Excel to be opened.

Returns:
- handle : Number : The numeric handle with which this instance can be identified</value>
  </data>
  <data name="Setsthecurrentactiveinstancetothat_cb4e3b9a202a2f11" xml:space="preserve">
    <value>Sets the "current active" instance to that specified.

Params:
- handle : Number : The handle of the instance that should be set as the current instance. The default of zero only has the effect of throwing an exception if no current instance is set, otherwise it's a no-op.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</value>
  </data>
  <data name="Checksifthehandlegivencanbeusedtoa_368fc8bc5e17e547" xml:space="preserve">
    <value>Checks if the handle given can be used to access a valid instance.

This means that the handle is a non-zero value which represents a handle, or it is zero and a 'current instance' is set (current instance is set every time an instance is created or accessed using GetInstance() - it may be set to Nothing if an instance is closed).

- handle is the handle to check that it represents a valid instance

Exceptions:
- Bad Handle : If the given handle doesn't represent an instance</value>
  </data>
  <data name="Thenameoftheworkbook" xml:space="preserve">
    <value>The name of the workbook</value>
  </data>
  <data name="Checkstheinstanceandworkbookvalues_26bf0483694c903d" xml:space="preserve">
    <value>Checks the instance and workbook values, throwing an exception if they are invalid.

Params:
- instance : Number : The integer value representing an Excel instance. The default value of zero represents the last activated instance.
- Workbook Name : Text : The name of the workbook on the instance to check. An empty string represents the 'active' workbook.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</value>
  </data>
  <data name="Thrownwhenaworkbooknamewasnotfound" xml:space="preserve">
    <value>Thrown when a workbook name was not found</value>
  </data>
  <data name="NoteCheckInstanceAndWorkbookisdone_3d7d09a710ac74ea" xml:space="preserve">
    <value>Note: CheckInstanceAndWorkbook is done as part of SaveWorkbook, so no need to do it again</value>
  </data>
  <data name="ChecksifthegivenfileexistsParamsFi_803facadbdf38c9f" xml:space="preserve">
    <value>Checks if the given file exists.

Params:
- File name : Text : Path to the file to check

Exceptions:
- File Not Found : If the given file does not exist or is not a file.</value>
  </data>
  <data name="Getsthecurrentworksheetintoacollec_1c3d90698bd20319" xml:space="preserve">
    <value>Gets the current worksheet into a collection. This will read the worksheet and store the contents into the collection. The first row will be treated as the column names and will be used as the column names in the generated collection.

Params:
- handle : Number : The integer identifying the instance in which the worksheet resides. Default (0) indicates the current instance.
- Workbook Name : Text : The name of the workbook on which the sheet resides. Default ("") indicates the active workbook on the instance.
- Worksheet Name : Text : The name of the worksheet which is required as a collection. Default ("") indicates the active sheet within the workbook.

Output:
Data - Collection - The data from the worksheet.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- Worksheet Not Found : If the specified worksheet does not exist on the specified workbook.

Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action</value>
  </data>
  <data name="Closesallinstancesofexcelwhichhave_bed81174038d077b" xml:space="preserve">
    <value>Closes all instances of excel which have been opened by this business object, either through "Create Instance" or "Open Instance" and which have not been discarded through "Close Instance" or "Release Instance"</value>
  </data>
  <data name="Searchesforthenextemptycellinthedi_7d6eb400d8462b71" xml:space="preserve">
    <value>Searches for the next empty cell in the direction given.
This can either activate that cell before returning, or just return the cell reference while leaving the active cell as it was.

Params:
- handle : Number : The integer handle identifying the Excel instance to use. The default of zero indicates the 'current' instance.
- Direction : Text : The direction in which to go, this should start with "U", "D", "L" or "R" (not case-sensitive) - the rest of the string is ignored, so you can use "Up", "DOWN" "left" and, indeed, "r"
- Activate Cell? : Flag : True to activate the found cell, False to just return the reference. Default is False.

Returns:
- Cell Reference : Text : The cell ID which represents the next empty cell in the required direction. This will be blank if no empty cell was found in the given direction.

Exceptions:
Invalid Direction Parameter : If the given direction parameter was invalid - ie. did not start with one of the (case-insensitive) letters "U", "D", "L" or "R".</value>
  </data>
  <data name="Directionmuststartwithoneofthefoll_aeab6e2dd7aa2c67" xml:space="preserve">
    <value>Direction must start with one of the following:
- U : Indicates 'up'
- D : Indicates 'down'
- L : Indicates 'left'
- R : Indicates 'right'
Any other value (including empty text) is invalid</value>
  </data>
  <data name="Getstheformattedvalueofthedesiredc_95e3d68891d896f2" xml:space="preserve">
    <value>Gets the formatted value of the desired cell. This will apply any formatting which is in place in the specified cell before outputting the value.</value>
  </data>
  <data name="Splitsthespecifiedworksheetintosep_cf57d297917f2406" xml:space="preserve">
    <value>Splits the specified worksheet into separate workbooks, creating a new sheet on each one and copying a subset of rows across to it.

Params:
- handle : Number : The integer representing the Excel instance - 0 represents the 'active' excel instance.
- Rows per sheet : Number : The number of rows which should be copied into each separate workbook.
- Workbook Name : Text : The name of the workbook from which the sheet should be split. "" indicates the active workbook on the instance.
- Worksheet Name : Text : The name of the worksheet from which the data should be split. "" indicates the active worksheet on the instance.
- Path : Text : The directory in which the resultant workbooks should be saved.
- No Title Row : Flag : True to indicate that the first row should *not* be used as a title row and copied across each of the generated workbooks.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- File Not Found : If the given path did not exist or was not a directory</value>
  </data>
  <data name="ActuallyIvenoideawhatsoeverwhatthisdoes" xml:space="preserve">
    <value>Actually, I've no idea whatsoever what this does.</value>
  </data>
  <data name="Checksifthegivenworkbookisreadonly_3de5dd5e1d0096c7" xml:space="preserve">
    <value>Checks if the given workbook is read only or not.

Params:
- handle : Number : The integer identifying the excel instance to check. Default (0) indicates the current instance.
- Workbook Name : Text : The name of the workbook to be checked. Default ("") indicates the active workbook on the given instance.

Output:
Read Only? : Flag : True to indicate that the workbook is read only; False to indicate that it is writable.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</value>
  </data>
  <data name="Showsawindowattachedtotheinstancei_a0773731eba39815" xml:space="preserve">
    <value>Shows a window attached to the instance identified.

Params:
- handle : Number : The handle identifying the excel instance to show. The default of zero shows the currently active instance.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</value>
  </data>
  <data name="Hidesthewindowattachedtotheinstanc_4a49db5d3da02b29" xml:space="preserve">
    <value>Hides the window attached to the instance identified.

Params:
- handle : Number : The handle identifying the excel instance to hide. The default of zero shows the currently active instance.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</value>
  </data>
  <data name="Savethecurrentworkbookusingthegive_44739016ae3ad117" xml:space="preserve">
    <value>Save the current workbook using the given file name. This is the equivalent of calling the 'Save Workbook As' action with the default values for 'handle' (0) and 'Workbook Name' ("")

Params :
- File name : Text : The path and name of the file to which the workbook should be saved.

Output :
- New Workbook Name : Text : The new name with which the workbook is identified within the excel instance.</value>
  </data>
  <data name="Hereforbackwardcompatibilityexitst_1a4a11b380cf2db9" xml:space="preserve">
    <value>Here for backward compatibility - exits the current instance of Excel without saving any changes.</value>
  </data>
  <data name="Savesthecurrentworkbookusingthewor_9694b62feaf26ef7" xml:space="preserve">
    <value>Saves the current workbook using the workbook name as the file name.
This is the equivalent of calling the Save Workbook action with the default values for 'handle' (0) and 'Workbook Name' ("")

Exceptions: 
- Bad Handle : If there is no active instance.
- Workbook Not Found : If there is no active workbook on the instance.</value>
  </data>
  <data name="HereforbackcompatabilityShouldbeco_f02f8c8f205e6700" xml:space="preserve">
    <value>Here for back-compatability. Should be considered deprecated and calls should be replaced by "Get Worksheet As Collection", but right now this gets the active worksheet on the active workbook in the current instance of Excel into a collection. It is the equivalent of calling GetWorksheet As Collection with all the default input values.

Output:
Data : Collection : The active sheet's data in a collection.</value>
  </data>
  <data name="Setsthenumberformatatthegivencellt_58b01479a7613629" xml:space="preserve">
    <value>Sets the number format at the given cell to that specified.
Oddly, this *doesn't* set the currently active cell.</value>
  </data>
  <data name="Setsacellformatforthecurrentlyactivecell" xml:space="preserve">
    <value>Sets a cell format for the currently active cell.</value>
  </data>
  <data name="Getsareferencetothecurrentlyactive_cce9b7b0fcb413cb" xml:space="preserve">
    <value>Gets a reference to the currently active cell on the given instance.</value>
  </data>
  <data name="Activatesthenextemptycellthatcanbe_49eabb6a1f265fad" xml:space="preserve">
    <value>Activates the next empty cell that can be found on the left of the active cell.</value>
  </data>
  <data name="Activatesthenextemptycellthatcanbe_5159dbdd606c4625" xml:space="preserve">
    <value>Activates the next empty cell that can be found on the right of the active cell.</value>
  </data>
  <data name="Activatesthenextemptycellthatcanbe_e93dac1d929f33f8" xml:space="preserve">
    <value>Activates the next empty cell that can be found above the active cell.</value>
  </data>
  <data name="Activatesthenextemptycellthatcanbe_84497a421ccbfde8" xml:space="preserve">
    <value>Activates the next empty cell that can be found below the active cell.</value>
  </data>
  <data name="Setsthewindowsizeofthespecifiedinstance" xml:space="preserve">
    <value>Sets the window size of the specified instance.</value>
  </data>
  <data name="Movesthespecifiedinstanceswindowto_75d89ef9b57baa63" xml:space="preserve">
    <value>Moves the specified instance's window to the required location.</value>
  </data>
  <data name="Minimizesmaximizesrestoresthewindo_d6a0d8ebdb5312c2" xml:space="preserve">
    <value>Minimizes / maximizes / restores the window attached to the specified excel instance.

Exceptions:
Invalid Input Parameter : If the given state was not "normal" and did not start with either "min" or "max"</value>
  </data>
  <data name="Movesaspecifiednumberofrowsandcolu_38b339e597f90b90" xml:space="preserve">
    <value>Moves a specified number of rows and columns from the currently active cell and returns the new cell reference.
If the resultant cell reference is the same as the active cell before this action was called, this action has 'failed'. This is usually because the active cell is too close to a boundary.</value>
  </data>
  <data name="Closesthecurrentworkbookonthecurre_78dbd02d2ac30518" xml:space="preserve">
    <value>Closes the current workbook on the current excel instance.
This is the equivalent of calling the 'Close Workbook' action with the default values for 'handle' (0) and 'Workbook Name' ("")</value>
  </data>
  <data name="Checksifthegivenstateisavalidvalue" xml:space="preserve">
    <value>Checks if the given state is a valid value</value>
  </data>
  <data name="ThenewworkbooknameassignedbyExcela_052a3880543b09df" xml:space="preserve">
    <value>The new workbook name assigned by Excel after saving the book</value>
  </data>
  <data name="Removesaninstancefromthisbusinesso_654f7fe525aebe38" xml:space="preserve">
    <value>Removes an instance from this business object *without* closing or quitting it - after running this action, the instance in question will not be accessible by this object unless it is re-attached to using 'Open Instance'.

Params:
- handle : Number : The handle of the instance to be released. The default of 0 indicates the currently active instance. Note that following the current instance being released, the current instance will not be set.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</value>
  </data>
  <data name="Dontneedtoanythingasideeffectofthe_7ff8f0273b179493" xml:space="preserve">
    <value>Don't need to anything - a side-effect of the check is to set the current instance... makes it simple.</value>
  </data>
  <data name="BackcompatiblelinktoOpenInstanceTh_5da23197ab9ba7ab" xml:space="preserve">
    <value>Back-compatible link to 'Open Instance'. This opens the first running instance of Excel found and links to it in this object.

Returns:
- handle : Number : An integer with which the instance opened can be identified.
- Enable Events : Flag : Indicates that events should be enabled / disabled on the attached instance - defaulted to True</value>
  </data>
  <data name="BackcompatiblelinktoOpeninstanceat_5e400e737cceb335" xml:space="preserve">
    <value>Back compatible link to 'Open instance' - attaches to the excel instance containing the current workbook. Note that if the instance containing the workbook could not be found, a new instance will be created.

Params:
- File name : Text : The name of the file in the instance that should be opened.
- Enable Events : Flag : Indicates that events should be enabled / disabled on the attached instance - defaulted to True
Returns:
- handle : Number : The integer that can be used to reference this instance later.</value>
  </data>
  <data name="Getsthevalueofthecurrentlyactivecell" xml:space="preserve">
    <value>Gets the value of the currently active cell.</value>
  </data>
  <data name="Createsanewworksheetinthespecified_e0f2b172a991cb1e" xml:space="preserve">
    <value>Creates a new worksheet in the specified workbook with the given name. If a sheet with the given name already exists, this will activate that sheet.

Params:
- handle : Number : The number identifying the instance required.
- Workbook Name : Text : The name of the workbook to add it to. An empty string (the default) indicates the active workbook in the instance.
- Worksheet Name : Text : The name of the worksheet that is required. Note that if the name matches a worksheet already in the workbook a new worksheet will not be created, but that worksheet will be activated.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</value>
  </data>
  <data name="Writesthegivencollectionintothespecifiedsheet" xml:space="preserve">
    <value>Writes the given collection into the specified sheet.</value>
  </data>
  <data name="Enablesordisablestheeventsonthespe_f4586632165d5ef1" xml:space="preserve">
    <value>Enables or disables the events on the specified excel instance.</value>
  </data>
  <data name="ExceptionsOffice2013onwardsTherear_e5eef9c82b445eec" xml:space="preserve">
    <value>Exceptions
Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action</value>
  </data>
  <data name="Removesblankrowsintheactiveexcelwo_8fbb5ade000a83cd" xml:space="preserve">
    <value>Removes blank rows in the active excel workbook. The entire row must consist of blank cells.</value>
  </data>
  <data name="Office2013onwardsThereareknownissu_05b7ea368a394e4c" xml:space="preserve">
    <value>Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action</value>
  </data>
  <data name="Assumenotextqualifier" xml:space="preserve">
    <value>Assume no text qualifier</value>
  </data>
  <data name="RunsthespecifiedmacroDependingonho_294fb5ff6c79a5aa" xml:space="preserve">
    <value>Runs the specified macro.

Depending on how the macro has been created the name will be one of the following:

A. Just the macro name
e.g. MyMacro

B. The workbook and macro name
e.g. MyWorkbook.xls!MyMacro

C. The workbook, worksheet and the macro name
e.g. 'MyWorkbook.xls!'MyWorksheet.MyMacro</value>
  </data>
  <data name="BPAObjectMSOutlookEmail" xml:space="preserve">
    <value>BPA Object - MS Outlook Email</value>
  </data>
  <data name="MSOutlookEmailVBO" xml:space="preserve">
    <value>MS Outlook Email VBO</value>
  </data>
  <data name="BusinessObjectforinteractingwithMi_cae56efa8fdcf5a2" xml:space="preserve">
    <value>Business Object for interacting with Microsoft Outlook email functions</value>
  </data>
  <data name="SendEmail" xml:space="preserve">
    <value>Send Email</value>
  </data>
  <data name="ReplyAlltoEmail" xml:space="preserve">
    <value>Reply All to Email</value>
  </data>
  <data name="ReplytoEmail" xml:space="preserve">
    <value>Reply to Email</value>
  </data>
  <data name="ForwardEmail" xml:space="preserve">
    <value>Forward Email</value>
  </data>
  <data name="SaveEmailAsFile" xml:space="preserve">
    <value>Save Email As File</value>
  </data>
  <data name="DeleteEmail" xml:space="preserve">
    <value>Delete Email</value>
  </data>
  <data name="MarkEmailAsRead" xml:space="preserve">
    <value>Mark Email As Read</value>
  </data>
  <data name="MarkEmailAsUnread" xml:space="preserve">
    <value>Mark Email As Unread</value>
  </data>
  <data name="MoveEmailtoInboxSubFolder" xml:space="preserve">
    <value>Move Email to Inbox Sub Folder</value>
  </data>
  <data name="SaveAttachment" xml:space="preserve">
    <value>Save Attachment</value>
  </data>
  <data name="GetSentItems_Basic_" xml:space="preserve">
    <value>Get Sent Items (Basic)</value>
  </data>
  <data name="GetSentItems_Advanced_" xml:space="preserve">
    <value>Get Sent Items (Advanced)</value>
  </data>
  <data name="GetSentItems_Expert_" xml:space="preserve">
    <value>Get Sent Items (Expert)</value>
  </data>
  <data name="GetReceivedItems_Basic_" xml:space="preserve">
    <value>Get Received Items (Basic)</value>
  </data>
  <data name="GetReceivedItems_Advanced_" xml:space="preserve">
    <value>Get Received Items (Advanced)</value>
  </data>
  <data name="GetReceivedItems_Expert_" xml:space="preserve">
    <value>Get Received Items (Expert)</value>
  </data>
  <data name="Storesaspecifiedemailasamsgfileona_7f0c2a74797e309c" xml:space="preserve">
    <value>Stores a specified email as a ".msg" file on any file location (file path).

The Entry ID is the unique idenfier used to determine which email is to be saved.</value>
  </data>
  <data name="GoogleOlDefaultFoldersEnumeration6Inbox5Sent" xml:space="preserve">
    <value>Google OlDefaultFolders Enumeration, 6 = Inbox, 5 = Sent</value>
  </data>
  <data name="Subfunctionusedbymultipleactionswi_b8568d088944db96" xml:space="preserve">
    <value>Sub function used by multiple actions within VBO. Do not change or publish.

Uses the Restrict method to create a filtered list of folder items. Not intended for publication.

</value>
  </data>
  <data name="AnIDobtainedfromoneoftheGetItemactionsinthisobject" xml:space="preserve">
    <value>An ID obtained from one of the Get Item actions in this object.</value>
  </data>
  <data name="ListsInboxitemsmatchingthefilterpr_0a95860840dffc27" xml:space="preserve">
    <value>Lists Inbox items matching the filter provided

Eg1 [From]='Mike Coworker' AND [unread]=False

Eg2 [Unread]=True AND [ReceivedTime] &gt;= '2018/01/01'

See https://msdn.microsoft.com/en-us/vba/outlook-vba/articles/items-restrict-method-outlook</value>
  </data>
  <data name="ListsSentItemsmatchingthequeryprov_5803ee3dab82b91f" xml:space="preserve">
    <value>Lists Sent Items matching the query provided.

Eg1 @SQL=urn:schemas:httpmail:subject='Data Input'

Eg2 @SQL=urn:schemas:httpmail:displayto='Mike Colleague' AND (urn:schemas:httpmail:subject LIKE '%Important%' OR urn:schemas:httpmail:subject LIKE '%Urgent%')"

See https://msdn.microsoft.com/en-us/vba/outlook-vba/articles/items-restrict-method-outlook</value>
  </data>
  <data name="SendsanEmail" xml:space="preserve">
    <value>Sends an Email </value>
  </data>
  <data name="DownloadsallattachmentstoafolderTh_70b032de0b5937ea" xml:space="preserve">
    <value>Downloads all attachments to a folder. 

The Entry ID is the unique idenfier used to determine which email is to be actioned.</value>
  </data>
  <data name="Downloadsaspecficattachmenttoafold_70cd723f4cbeb426" xml:space="preserve">
    <value>Downloads a specfic attachment to a folder. E.g. use cases are "*.txt" or "*.docx" etc.

The Entry ID is the unique idenfier used to determine which email is to be actioned.</value>
  </data>
  <data name="DeletesaspecificemailitemTheEntryI_9658eb17a54508bb" xml:space="preserve">
    <value>Deletes a specific email item.

The Entry ID is the unique idenfier used to determine which email is to be deleted.</value>
  </data>
  <data name="ReplytoallEmailsrecipientsofaspeci_74f33042e3109f97" xml:space="preserve">
    <value>Reply to all Emails recipients of a specific email.

The &lt;Reply All to Email&gt; action will only call one ID specific (Entry ID) email item. 

If multiple emails are expected to be called, the process design would need to reflect that requirement.</value>
  </data>
  <data name="ForwardEmailtorecipients_ToCCBCC_i_103cc3d2d3420f25" xml:space="preserve">
    <value>Forward Email to recipients (To/CC/BCC) including (Message) as input parameters.

The &lt;Forward Email&gt; action will only call one ID specific (Entry ID) email item. 

If multiple emails are expected to be called, the process design would need to reflect that requirement.</value>
  </data>
  <data name="ReplytoEmailsenderofaspecificemail_56d06d9383abc4d5" xml:space="preserve">
    <value>Reply to Email sender of a specific email.

The &lt;Reply to Email&gt; action will only call one ID specific (Entry ID) email item. 

If multiple emails are expected to be called, the process design would need to reflect that requirement.</value>
  </data>
  <data name="Movesanemailtoasubfolderwithinthei_ba0d15cb0bb80505" xml:space="preserve">
    <value>Moves an email to a subfolder within the inbox folder.

The Entry ID is the unique idenfier used to determine which email is to be moved.

Example
Inbox to Inbox\SubFolder </value>
  </data>
  <data name="MSOutlookOlDefaultFoldersEnumeration6Inbox5Sent" xml:space="preserve">
    <value>MS Outlook - OlDefaultFolders Enumeration, 6 = Inbox, 5 = Sent</value>
  </data>
  <data name="ListsSentItemsmatchingtheparametersprovided" xml:space="preserve">
    <value>Lists Sent Items matching the parameters provided</value>
  </data>
  <data name="ListsInboxitemsmatchingtheparametersprovided" xml:space="preserve">
    <value>Lists Inbox items matching the parameters provided</value>
  </data>
  <data name="ListsSentItemsmatchingthefilterpro_7d201161d1a18504" xml:space="preserve">
    <value>Lists Sent Items matching the filter provided.

Eg1 [Subject]='Exception Report'

Eg2 [To]='Mike Colleague' OR [To]='Mike Coworker'

See https://msdn.microsoft.com/en-us/vba/outlook-vba/articles/items-restrict-method-outlook</value>
  </data>
  <data name="ListsInboxItemsmatchingthefiltersp_6074e913b51ca7e9" xml:space="preserve">
    <value>Lists Inbox Items matching the filters provided.

Eg1 @SQL=urn:schemas:httpmail:fromname='Mike Colleague' AND urn:schemas:httpmail:read=0

Eg2 @SQL=urn:schemas:httpmail:fromname='The Boss' AND urn:schemas:httpmail:subject LIKE '%Urgent%'

See https://msdn.microsoft.com/en-us/vba/outlook-vba/articles/items-restrict-method-outlook</value>
  </data>
  <data name="MarksaspecificemailasreadTheEntryI_634c03acb440e71a" xml:space="preserve">
    <value>Marks a specific email as read.

The Entry ID is the unique idenfier used to determine which email is to be marked.</value>
  </data>
  <data name="MarksaspecificemailasunreadTheEntr_6a3bc2463ee0d9c1" xml:space="preserve">
    <value>Marks a specific email as unread.

The Entry ID is the unique idenfier used to determine which email is to be marked.</value>
  </data>
  <data name="NOTFORPUBLICATION" xml:space="preserve">
    <value>NOT FOR PUBLICATION</value>
  </data>
  <data name="APIfunctionsprovidedfortheadvanced_1d2a7074ac413542" xml:space="preserve">
    <value>API functions provided for the advanced filter expressions:

BCC = Returns a String representing the display list of blind carbon copy (BCC) names for a MailItem. Read/write.
Body = Returns or sets a String representing the clear-text body of the Outlook item. Read/write.
CC = Returns a String representing the display list of carbon copy (CC) names for a MailItem . Read/write.
CreationTime = Returns a Date indicating the creation time for the Outlook item. Read-only.
EntryID = Returns a String representing the unique Entry ID of the object. Read-only.
HTMLBody = Returns or sets a String representing the HTML body of the specified item. Read/write.
ReceivedTime = Returns a Date indicating the date and time at which the item was received. Read-only.
SenderEmailAddress = Returns a String that represents the e-mail address of the sender of the Outlook item. Read-only.
SenderName = Returns a String indicating the display name of the sender for the Outlook item. Read-only.
SentOn = Returns a Date indicating the date and time on which the Outlook item was sent. Read-only.
Subject = Returns or sets a String indicating the subject for the Outlook item. Read/write.
To = Returns or sets a semicolon-delimited String list of display names for the To recipients for the Outlook item. Read/write.
UnRead = Returns or sets a Boolean value that is True if the Outlook item has not been opened (read). Read/write.
</value>
  </data>
  <data name="SupportedAPIDASLfiltersexpressions_bbc6737ae289d3b3" xml:space="preserve">
    <value>Supported API DASL filters expressions:

urn:schemas:httpmail:attachmentfilename
urn:schemas:httpmail:bcc
urn:schemas:httpmail:cc
urn:schemas:httpmail:date
urn:schemas:httpmail:datereceived
urn:schemas:httpmail:displaycc
urn:schemas:httpmail:displayto
urn:schemas:httpmail:from
urn:schemas:httpmail:fromemail
urn:schemas:httpmail:fromname
urn:schemas:httpmail:hasattachment
urn:schemas:httpmail:importance
urn:schemas:httpmail:senderemail
urn:schemas:httpmail:sendername
urn:schemas:httpmail:subject
urn:schemas:httpmail:submitted
urn:schemas:httpmail:textdescription
urn:schemas:httpmail:to
</value>
  </data>
  <data name="BPAObjectMSWord" xml:space="preserve">
    <value>BPA Object - MS Word</value>
  </data>
  <data name="MSWordVBO" xml:space="preserve">
    <value>MS Word VBO</value>
  </data>
  <data name="TheVBOreplacementfortheCommonAutom_7433d396219d7354" xml:space="preserve">
    <value>The VBO replacement for the Common Automation Word business object</value>
  </data>
  <data name="AddTableRow" xml:space="preserve">
    <value>Add Table Row</value>
  </data>
  <data name="SetTableCellValue" xml:space="preserve">
    <value>Set Table Cell Value</value>
  </data>
  <data name="GetTableCellValue" xml:space="preserve">
    <value>Get Table Cell Value</value>
  </data>
  <data name="GetHighlightedText" xml:space="preserve">
    <value>Get Highlighted Text</value>
  </data>
  <data name="ReplaceHighlightedText" xml:space="preserve">
    <value>Replace Highlighted Text</value>
  </data>
  <data name="SelectAll" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="CopytoClipboard" xml:space="preserve">
    <value>Copy to Clipboard</value>
  </data>
  <data name="PastefromClipboard" xml:space="preserve">
    <value>Paste from Clipboard</value>
  </data>
  <data name="ClearClipboard" xml:space="preserve">
    <value>Clear Clipboard</value>
  </data>
  <data name="FindText" xml:space="preserve">
    <value>Find Text</value>
  </data>
  <data name="SelectNextCell" xml:space="preserve">
    <value>Select Next Cell</value>
  </data>
  <data name="SetSelectedCellText" xml:space="preserve">
    <value>Set Selected Cell Text</value>
  </data>
  <data name="SelectNextField" xml:space="preserve">
    <value>Select Next Field</value>
  </data>
  <data name="SetSelectedCheckbox" xml:space="preserve">
    <value>Set Selected Checkbox</value>
  </data>
  <data name="GetFooterText" xml:space="preserve">
    <value>Get Footer Text</value>
  </data>
  <data name="AttachInstance" xml:space="preserve">
    <value>Attach Instance</value>
  </data>
  <data name="DetachInstance" xml:space="preserve">
    <value>Detach Instance</value>
  </data>
  <data name="CreateDocument" xml:space="preserve">
    <value>Create Document</value>
  </data>
  <data name="SaveAs" xml:space="preserve">
    <value>Save As</value>
  </data>
  <data name="ExportPDF" xml:space="preserve">
    <value>ExportPDF</value>
  </data>
  <data name="GetBody" xml:space="preserve">
    <value>Get Body</value>
  </data>
  <data name="TypeText" xml:space="preserve">
    <value>Type Text</value>
  </data>
  <data name="UpdateBookmark" xml:space="preserve">
    <value>Update Bookmark</value>
  </data>
  <data name="Getsthebodytextfromtheworddocument" xml:space="preserve">
    <value>Gets the body text from the word document</value>
  </data>
  <data name="DetachesfromtheWordinstancewiththe_c74356bddb8d29b6" xml:space="preserve">
    <value>Detaches from the Word instance with the given handle, removing all references within this business object.</value>
  </data>
  <data name="Returnsthedocumentshighlightedtextasacollection" xml:space="preserve">
    <value>Returns the documents highlighted text as a collection</value>
  </data>
  <data name="Searchesforandreplaceshighlightedtext" xml:space="preserve">
    <value>Searches for and replaces highlighted text</value>
  </data>
  <data name="Selectstheentiredocument" xml:space="preserve">
    <value>Selects the entire document</value>
  </data>
  <data name="Copiesthecurrentselectionontotheclipboard" xml:space="preserve">
    <value>Copies the current selection on to the clipboard</value>
  </data>
  <data name="Pastesthecontentsoftheclipboardintothedocument" xml:space="preserve">
    <value>Pastes the contents of the clipboard into the document</value>
  </data>
  <data name="Searchesthedocumentforthegiventext" xml:space="preserve">
    <value>Searches the document for the given text</value>
  </data>
  <data name="Movesthecursortothetablecellnsteps_4913901dc52b142e" xml:space="preserve">
    <value>Moves the cursor to the table cell n steps away from the current cell. A positive number of steps moves forward and a negative number moves backwards.</value>
  </data>
  <data name="Selectsthenextfieldinthedocument" xml:space="preserve">
    <value>Selects the next field in the document</value>
  </data>
  <data name="Ticksoruntickstheselectedcheckbox" xml:space="preserve">
    <value>Ticks or unticks the selected checkbox</value>
  </data>
  <data name="Getsthetextfromthespecifiedfooter" xml:space="preserve">
    <value>Gets the text from the specified footer</value>
  </data>
  <data name="Inputs" xml:space="preserve">
    <value>Inputs</value>
  </data>
  <data name="Outputs" xml:space="preserve">
    <value>Outputs</value>
  </data>
  <data name="BPAObjectSystemActiveDirectory" xml:space="preserve">
    <value>BPA Object - System - Active Directory</value>
  </data>
  <data name="SystemActiveDirectory" xml:space="preserve">
    <value>System - Active Directory</value>
  </data>
  <data name="BusinessObjectforinteractingwithAc_4e8466e26742167d" xml:space="preserve">
    <value>Business Object for interacting with Active Directory using the LDAP based API in .NET</value>
  </data>
  <data name="CreateUser" xml:space="preserve">
    <value>Create User</value>
  </data>
  <data name="UserExists_Displayname_" xml:space="preserve">
    <value>User Exists (Displayname)</value>
  </data>
  <data name="UserExists_UserPrincipalName_" xml:space="preserve">
    <value>User Exists (UserPrincipalName)</value>
  </data>
  <data name="ObjectExists_Dynamic_" xml:space="preserve">
    <value>Object Exists (Dynamic)</value>
  </data>
  <data name="AddUsertoGroup" xml:space="preserve">
    <value>Add User to Group</value>
  </data>
  <data name="Returnstrueiftheprovidedusernamema_091fe139cd8167b6" xml:space="preserve">
    <value>Returns true if the provided username matches a userPrincipalName found within the directory.</value>
  </data>
  <data name="Addsthespecifieduserasamemberofthetargetgroup" xml:space="preserve">
    <value>Adds the specified user as a member of the target group.</value>
  </data>
  <data name="Createsanewactiveuserwithinthespec_196cdebefebe8d01" xml:space="preserve">
    <value>Creates a new active user within the specified path location.</value>
  </data>
  <data name="Returnstrueiftheprovideddisplaynam_a225539c28386fd8" xml:space="preserve">
    <value>Returns true if the provided display name is found within the directory.  This search uses Common Name (CN) which whilst typically applies to users, can also apply to other objects such as security groups and various system generated containers.  This action was previously named "User Exists".</value>
  </data>
  <data name="Returnstrueiftheprovidedsearchstri_b423ba424820b3b4" xml:space="preserve">
    <value>Returns true if the provided search string (attribute and value) is found to match within the directory. Supports many different object types within the directory.  Examples include:
Containers: "CN=Users".  
Organizational Units: "OU=Blue Prism Users".  
Security Groups: "CN=SecGroup_BluePrismUsers".  
Users: "sAMAccountName=JoeBloggs"; "CN=Joe Bloggs".  </value>
  </data>
  <data name="DeprecatedactionThisactionhasbeenr_bdc15e421e874a20" xml:space="preserve">
    <value>Deprecated action. This action has been replaced by one of three actions:
1) Check User Exists (Displayname)
2) Check User Exists (UserPrincipalName)
3) Check Object Exists (Dynamic)</value>
  </data>
  <data name="BPAObjectUtilityCollectionManipulation" xml:space="preserve">
    <value>BPA Object - Utility - Collection Manipulation</value>
  </data>
  <data name="UtilityCollectionManipulation" xml:space="preserve">
    <value>Utility - Collection Manipulation</value>
  </data>
  <data name="Utilityfunctionsformanipulatingcollections" xml:space="preserve">
    <value>Utility functions for manipulating collections.</value>
  </data>
  <data name="SortCollection" xml:space="preserve">
    <value>Sort Collection</value>
  </data>
  <data name="ReverseCollection" xml:space="preserve">
    <value>Reverse Collection</value>
  </data>
  <data name="MergeCollection" xml:space="preserve">
    <value>Merge Collection</value>
  </data>
  <data name="SplitCollection" xml:space="preserve">
    <value>Split Collection</value>
  </data>
  <data name="TransposeCollection" xml:space="preserve">
    <value>Transpose Collection</value>
  </data>
  <data name="FilterCollection" xml:space="preserve">
    <value>Filter Collection</value>
  </data>
  <data name="GetCollectionFields" xml:space="preserve">
    <value>Get Collection Fields</value>
  </data>
  <data name="FieldExists" xml:space="preserve">
    <value>Field Exists</value>
  </data>
  <data name="RenameCollectionFields" xml:space="preserve">
    <value>Rename Collection Fields</value>
  </data>
  <data name="ReadCollectionField" xml:space="preserve">
    <value>Read Collection Field</value>
  </data>
  <data name="SetCollectionField" xml:space="preserve">
    <value>Set Collection Field</value>
  </data>
  <data name="CollectionContainsField" xml:space="preserve">
    <value>Collection Contains Field</value>
  </data>
  <data name="CollectionContainsValue" xml:space="preserve">
    <value>Collection Contains Value</value>
  </data>
  <data name="CopyRows" xml:space="preserve">
    <value>Copy Rows</value>
  </data>
  <data name="AppendRowstoCollection" xml:space="preserve">
    <value>Append Rows to Collection</value>
  </data>
  <data name="AppendField_Text_" xml:space="preserve">
    <value>Append Field (Text)</value>
  </data>
  <data name="AppendField_Number_" xml:space="preserve">
    <value>Append Field (Number)</value>
  </data>
  <data name="RenameField" xml:space="preserve">
    <value>Rename Field</value>
  </data>
  <data name="DeleteField" xml:space="preserve">
    <value>Delete Field</value>
  </data>
  <data name="DeleteColumn" xml:space="preserve">
    <value>Delete Column</value>
  </data>
  <data name="RemoveNullRows" xml:space="preserve">
    <value>Remove Null Rows</value>
  </data>
  <data name="SetColumnNamesFromFirstRow" xml:space="preserve">
    <value>Set Column Names From First Row</value>
  </data>
  <data name="SetColumnNamesFromExpectedCollection" xml:space="preserve">
    <value>Set Column Names From Expected Collection</value>
  </data>
  <data name="FillBlanks" xml:space="preserve">
    <value>Fill Blanks</value>
  </data>
  <data name="Removedotsfromheaders" xml:space="preserve">
    <value>Remove dots from headers</value>
  </data>
  <data name="RemoveEmptyRows" xml:space="preserve">
    <value>Remove Empty Rows</value>
  </data>
  <data name="Sortsacollectionaccordingtothespecifiedfield" xml:space="preserve">
    <value>Sorts a collection according to the specified field.</value>
  </data>
  <data name="CreatesacollectionwithaNameandData_3af7d07178256819" xml:space="preserve">
    <value>Creates a collection with a Name and Datatype field which is then populated using the incoming collections field names and data types.</value>
  </data>
  <data name="Readsafieldwithagivennameandatthes_be59e9a00bb10769" xml:space="preserve">
    <value>Reads a field with a given name and at the specified row from the collection.</value>
  </data>
  <data name="Updatesasinglevalueinacollectionby_6c6c6813a85081d9" xml:space="preserve">
    <value>Updates a single value in a collection by the given field name and row index.</value>
  </data>
  <data name="Testsacollectiontoseewhetheritcont_471912e16fc594d7" xml:space="preserve">
    <value>Tests a collection to see whether it contains a specific field.</value>
  </data>
  <data name="Copiestherowsofthegivencollectioni_1695b31d3767fb5a" xml:space="preserve">
    <value>Copies the rows of the given collection into a new collection.</value>
  </data>
  <data name="Combinestwocollectionsintooneprovi_7864e53a01a44546" xml:space="preserve">
    <value>Combines two collections into one, provided they share the same set of fields</value>
  </data>
  <data name="Reversestheorderoftherowsinthecollection" xml:space="preserve">
    <value>Reverses the order of the rows in the collection.</value>
  </data>
  <data name="Renamesthefieldsofacollectionbased_ad63e3fe747dd8e7" xml:space="preserve">
    <value>Renames the fields of a collection based on the fields of a given name mapping collection.</value>
  </data>
  <data name="Searchesfortheexistenceofavalueora_5ca7008bc41f0fc1" xml:space="preserve">
    <value>Searches for the existence of a value or a regular expression in a specified column in a collection. This will return true and, if a regular expression was provided, the groups defined in that regex for the first matched value it finds in the collection.</value>
  </data>
  <data name="NotethatifneitherExactValuenorRege_48360ea0527a891d" xml:space="preserve">
    <value>Note that if neither 'Exact Value' nor 'Regex' are supplied, this will always return FALSE / ie. not found. If a match is found, groups will return all of the groups specified in the regular expression when applied to the value found.</value>
  </data>
  <data name="Deletesafieldfromacollection" xml:space="preserve">
    <value>Deletes a field from a collection.</value>
  </data>
  <data name="Deletesrowsinwhichagivenkeyfieldisblank" xml:space="preserve">
    <value>Deletes rows in which a given key field is blank.</value>
  </data>
  <data name="Ifyouhaveacollectionwiththecolumnn_8ff8b3c085474d22" xml:space="preserve">
    <value>If you have a collection with the column names all in the first row, this will set the column names to the values in that row and then detete the first row.
Handy for collections read using Get Table</value>
  </data>
  <data name="Firstrowwasactuallytheheaderrowcannowbedeleted" xml:space="preserve">
    <value>First row was actually the header row, can now be deleted</value>
  </data>
  <data name="Renamesthefieldsofacollectiontotho_95d79582a0c0d878" xml:space="preserve">
    <value>Renames the fields of a collection to those of a collection containing expected field names.</value>
  </data>
  <data name="Fillsacollectionthathasemptyvalueswithemptytext" xml:space="preserve">
    <value>Fills a collection that has empty values with empty text.</value>
  </data>
  <data name="cantloopthroughthecorecustomerdeta_e07f93dd74c74e13" xml:space="preserve">
    <value>can't loop through the core customer details table collection as some of the rows are NULL.</value>
  </data>
  <data name="Collectionswithdotsinthefieldnames_05900f2a4671eb70" xml:space="preserve">
    <value>Collections with dots in the field names cannot be properly indexed so this functinon renames the headers so that the fields contain no dots.</value>
  </data>
  <data name="Appendsafieldtoacollectionandallow_91d5e7268f4e84e5" xml:space="preserve">
    <value>Appends a field to a collection and allows you to provide a default value as text fot the field.</value>
  </data>
  <data name="Appendsafieldtoacollectionandallow_123bb1093acb39c4" xml:space="preserve">
    <value>Appends a field to a collection and allows you to provide a default number value for the field.</value>
  </data>
  <data name="Renamesafieldwithinacollection" xml:space="preserve">
    <value>Renames a field within a collection.</value>
  </data>
  <data name="Mergestwocollectionswithdifferents_239044cefd4afde3" xml:space="preserve">
    <value>Merges two collections with different structures (and where the field names across both collections are unique) and forms a single collection with a combination  of the two structures and associated data values.</value>
  </data>
  <data name="Splitsacollectionintotwocolllectio_abec17bffa43e973" xml:space="preserve">
    <value>Splits a collection into two colllections containing the fields as defined by templates.</value>
  </data>
  <data name="Filtersacollectionusingthegivenquery" xml:space="preserve">
    <value>Filters a collection using the given query.</value>
  </data>
  <data name="Removesemptyrowsfromacollection" xml:space="preserve">
    <value>Removes empty rows from a collection.</value>
  </data>
  <data name="Createsanewcollectionwiththefields_7df1b2511881243d" xml:space="preserve">
    <value>Creates a new collection with the fields Name and Value and for each row in the original collection creates an entry for each column.</value>
  </data>
  <data name="Findsoutwhetherthecollectioncontatinsagivenfield" xml:space="preserve">
    <value>Finds out whether the collection contatins a given field.</value>
  </data>
  <data name="BPAObjectUtilityDateandTimeManipulation" xml:space="preserve">
    <value>BPA Object - Utility - Date and Time Manipulation</value>
  </data>
  <data name="UtilityDateandTimeManipulation" xml:space="preserve">
    <value>Utility - Date and Time Manipulation</value>
  </data>
  <data name="Utilityfunctionsformanipulatingdatesandtimes" xml:space="preserve">
    <value>Utility functions for manipulating dates and times.</value>
  </data>
  <data name="FormatDate" xml:space="preserve">
    <value>Format Date</value>
  </data>
  <data name="DateAdd" xml:space="preserve">
    <value>DateAdd</value>
  </data>
  <data name="GetTimeofDay" xml:space="preserve">
    <value>Get Time of Day</value>
  </data>
  <data name="GetLastWorkingDay" xml:space="preserve">
    <value>Get Last Working Day</value>
  </data>
  <data name="GetMaximumTimeSpan" xml:space="preserve">
    <value>Get Maximum TimeSpan</value>
  </data>
  <data name="UTCToLocal" xml:space="preserve">
    <value>UTC To Local</value>
  </data>
  <data name="LocalToUTC" xml:space="preserve">
    <value>Local To UTC</value>
  </data>
  <data name="GetTimeZones" xml:space="preserve">
    <value>Get Time Zones</value>
  </data>
  <data name="Formatsadateaccordingtothegivenformatstring" xml:space="preserve">
    <value>Formats a date according to the given format string.</value>
  </data>
  <data name="Addsaspecifiednumberofhoursminutes_a03307a450c22ec9" xml:space="preserve">
    <value>Adds a specified number of hours minutes or seconds to the given date.</value>
  </data>
  <data name="Getsthecurrenttimeofdayasatimespan_4f188b2f301541ae" xml:space="preserve">
    <value>Gets the current time of day as a timespan, as reported by the operating system.

Use UTC - if true, the current time will be expressed in UTC. Otherwise, it is expressed in the local time, as configured in the operating system. This will include daylight saving adjustments.</value>
  </data>
  <data name="Getsthelastweekdayofthegivenmontha_44e3665961adccdd" xml:space="preserve">
    <value>Gets the last weekday of the given month and year. If no month/year is given, the current month and year is used. If either of the parameters is given then both must be given.
The value returned is the date (ie. the day in the month) of the last weekday in the given month. A return value of -1 indicates an error - that month OR year has been given but not both.</value>
  </data>
  <data name="Getsthelastworkingdayofthegivenmon_af38503117c41fd8" xml:space="preserve">
    <value>Gets the last working day of the given month / year.
Currently synonymous with getting the last *week* day of the given month year, though bank holiday support might arrive one day.</value>
  </data>
  <data name="Getsthemaximumtimespanfromacollect_ff097b4731b186e6" xml:space="preserve">
    <value>Gets the maximum timespan from a collection of timespan values</value>
  </data>
  <data name="ConvertaUTCdatetimetoalocaldatetim_728dc1866fb8ddc0" xml:space="preserve">
    <value>Convert a UTC datetime to a local datetime. This will default to the current system's local time zone, unless a Time Zone ID input is specified. You can get a collection of the current system's available Time Zone ID values by running the "Get Time Zones" action.</value>
  </data>
  <data name="ConvertalocaldatetimetoaUTCdatetim_ce7db71cf3de745c" xml:space="preserve">
    <value>Convert a local datetime to a UTC datetime. The local datetime will default to the current system's local time zone, unless a Time Zone ID input is specified. You can get a collection of the current system's available Time Zone ID values by running the "Get Time Zones" action.</value>
  </data>
  <data name="Returnsacollectionofallthetimezone_188760d235575ec7" xml:space="preserve">
    <value>Returns a collection of all the time zones IDs that are available on the local system. These values can be used for the Time Zone ID input in the "UTC To Local" and "Local To UTC" actions.</value>
  </data>
  <data name="BPAObjectUtilityEncryption" xml:space="preserve">
    <value>BPA Object - Utility - Encryption</value>
  </data>
  <data name="UtilityEncryption" xml:space="preserve">
    <value>Utility - Encryption</value>
  </data>
  <data name="Providesencryptionanddecryptionfac_434290b1fea11446" xml:space="preserve">
    <value>Provides encryption and decryption facilities. Use the BPServer interface to generate a key to use with these actions.</value>
  </data>
  <data name="Encrypt" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="Decrypt" xml:space="preserve">
    <value>Decrypt</value>
  </data>
  <data name="Encryptsomedata" xml:space="preserve">
    <value>Encrypt some data.</value>
  </data>
  <data name="Decryptsomedata" xml:space="preserve">
    <value>Decrypt some data.</value>
  </data>
  <data name="BPAObjectUtilityEnvironment" xml:space="preserve">
    <value>BPA Object - Utility - Environment</value>
  </data>
  <data name="UtilityEnvironment" xml:space="preserve">
    <value>Utility - Environment</value>
  </data>
  <data name="Utilitiesforinteractingwiththeenvi_a7b9822ce97e3cc4" xml:space="preserve">
    <value>Utilities for interacting with the environment - read screen resolution, determine OS type, etc.</value>
  </data>
  <data name="FontSmoothingEnabled" xml:space="preserve">
    <value>Font Smoothing Enabled</value>
  </data>
  <data name="GetClipboard" xml:space="preserve">
    <value>Get Clipboard</value>
  </data>
  <data name="SetClipboard" xml:space="preserve">
    <value>Set Clipboard</value>
  </data>
  <data name="GetScreenResolution" xml:space="preserve">
    <value>Get Screen Resolution</value>
  </data>
  <data name="StartProcessReadStderrandStdout" xml:space="preserve">
    <value>Start Process Read Stderr and Stdout</value>
  </data>
  <data name="KillProcess" xml:space="preserve">
    <value>Kill Process</value>
  </data>
  <data name="ReadMemoryStats" xml:space="preserve">
    <value>Read Memory Stats</value>
  </data>
  <data name="ReadProcessWorkingSet" xml:space="preserve">
    <value>Read Process Working Set</value>
  </data>
  <data name="StartProcess" xml:space="preserve">
    <value>Start Process</value>
  </data>
  <data name="RunProcessUntilEnded" xml:space="preserve">
    <value>Run Process Until Ended</value>
  </data>
  <data name="WaitforProcess" xml:space="preserve">
    <value>Wait for Process</value>
  </data>
  <data name="WaitforProcessWindow" xml:space="preserve">
    <value>Wait for Process Window</value>
  </data>
  <data name="GetUserName" xml:space="preserve">
    <value>Get User Name</value>
  </data>
  <data name="GetMachineName" xml:space="preserve">
    <value>Get Machine Name</value>
  </data>
  <data name="Getstheresolutionofthescreeninpixe_02a20b188dc7b40f" xml:space="preserve">
    <value>Gets the resolution of the screen in pixels for the current environment.</value>
  </data>
  <data name="Forcekillsallprocesseswithagivenname" xml:space="preserve">
    <value>Force kills all processes with a given name.</value>
  </data>
  <data name="Getmemorystatisticsforagivensetofp_21f7a2dfd08a074a" xml:space="preserve">
    <value>Get memory statistics for a given set of processes including the working set and the virtual memory size.</value>
  </data>
  <data name="Getsthesizeoftheworkingsetforthegivenprocess" xml:space="preserve">
    <value>Gets the size of the working set for the given process.</value>
  </data>
  <data name="Usedtoreturnthetotalmemoryusedbyth_ec850a83b30e26a6" xml:space="preserve">
    <value>Used += to return the total memory used by the application we are interested - just in case it is running multiple times.</value>
  </data>
  <data name="Getsthefontsmoothingsettingforthec_15d27bf08616b220" xml:space="preserve">
    <value>Gets the font smoothing setting for the current environment.</value>
  </data>
  <data name="Startsaprocessdirectlywiththegivenarguments" xml:space="preserve">
    <value>Starts a process directly with the given arguments.</value>
  </data>
  <data name="Runaprocessandwaituntilcompletionortimeout" xml:space="preserve">
    <value>Run a process and wait until completion or timeout.</value>
  </data>
  <data name="Attachtoaprocessandwaitforittocomplete" xml:space="preserve">
    <value>Attach to a process and wait for it to complete.</value>
  </data>
  <data name="Waitsforaprocesswithagivennamehasd_f524ee9b0a555c61" xml:space="preserve">
    <value>Waits for a process with a given name has displayed a window with the given title.</value>
  </data>
  <data name="Getsthecontentsoftheclipboard" xml:space="preserve">
    <value>Gets the contents of the clipboard.</value>
  </data>
  <data name="Setsthecontentsoftheclipboard" xml:space="preserve">
    <value>Sets the contents of the clipboard.</value>
  </data>
  <data name="Clearstheclipboardcontents" xml:space="preserve">
    <value>Clears the clipboard contents.</value>
  </data>
  <data name="Startsaprocessdirectlywiththegiven_4e2417fd6612f5ab" xml:space="preserve">
    <value>Starts a process directly with the given arguments, reads the standard output and standard error and outputs them in seperate data items.</value>
  </data>
  <data name="BPAObjectUtilityFileManagement" xml:space="preserve">
    <value>BPA Object - Utility - File Management</value>
  </data>
  <data name="UtilityFileManagement" xml:space="preserve">
    <value>Utility - File Management</value>
  </data>
  <data name="UtilitymethodsforinteractingwiththefileSystem" xml:space="preserve">
    <value>Utility methods for interacting with the file System.</value>
  </data>
  <data name="DownloadFile" xml:space="preserve">
    <value>Download File</value>
  </data>
  <data name="GetFiles" xml:space="preserve">
    <value>Get Files</value>
  </data>
  <data name="GetFolders" xml:space="preserve">
    <value>Get Folders</value>
  </data>
  <data name="FileExists" xml:space="preserve">
    <value>File Exists</value>
  </data>
  <data name="DirectoryExists" xml:space="preserve">
    <value>Directory Exists</value>
  </data>
  <data name="CreateDirectory" xml:space="preserve">
    <value>Create Directory</value>
  </data>
  <data name="DeleteDirectory" xml:space="preserve">
    <value>Delete Directory</value>
  </data>
  <data name="SubDirectoryExists" xml:space="preserve">
    <value>Sub Directory Exists</value>
  </data>
  <data name="SplitPath" xml:space="preserve">
    <value>Split Path</value>
  </data>
  <data name="CombinePath" xml:space="preserve">
    <value>Combine Path</value>
  </data>
  <data name="DeleteFiles" xml:space="preserve">
    <value>Delete Files</value>
  </data>
  <data name="DeleteFile" xml:space="preserve">
    <value>Delete File</value>
  </data>
  <data name="CopyFile" xml:space="preserve">
    <value>Copy File</value>
  </data>
  <data name="MoveFile" xml:space="preserve">
    <value>Move File</value>
  </data>
  <data name="GetFileSize" xml:space="preserve">
    <value>Get File Size</value>
  </data>
  <data name="AppendtoTextFile" xml:space="preserve">
    <value>Append to Text File</value>
  </data>
  <data name="ReadAllTextfromFile" xml:space="preserve">
    <value>Read All Text from File</value>
  </data>
  <data name="ReadLinesFromFile" xml:space="preserve">
    <value>Read Lines From File</value>
  </data>
  <data name="WriteTextFile" xml:space="preserve">
    <value>Write Text File</value>
  </data>
  <data name="WriteBinaryData" xml:space="preserve">
    <value>Write Binary Data</value>
  </data>
  <data name="GetCSVTextAsCollection" xml:space="preserve">
    <value>Get CSV Text As Collection</value>
  </data>
  <data name="GetSpecialFolderPath" xml:space="preserve">
    <value>Get Special Folder Path</value>
  </data>
  <data name="Getsallfilesinthespecifiedfolderma_ac8a804caf505508" xml:space="preserve">
    <value>Gets all files in the specified folder matching the supplied file type pattern string.

Patterns - A comma-separated list of file patterns identifying the type(s) of files sought. Eg "*.jpg, *.png" retrieves all jpg and png files. The pattern "*.*" will return all files. It does not matter whether you leave a space between each pattern, or not. Where a comma is required in a file pattern it should be escaped out using the backslash character, e.g. a pattern of "*\,November.xlsx" will return all files that end with ",November.xlsx"</value>
  </data>
  <data name="Deletesallfilesinthespecifiedfolde_4c015b32b52a6b8b" xml:space="preserve">
    <value>Deletes all files in the specified folder, matching the supplied file extension pattern.</value>
  </data>
  <data name="Appendssometexttothespecifiedfile" xml:space="preserve">
    <value>Appends some text to the specified file.</value>
  </data>
  <data name="Readstheentirecontentsofafileastext" xml:space="preserve">
    <value>Reads the entire contents of a file as text.</value>
  </data>
  <data name="WritestexttoafileAnyexistingtextin_79c0eb7d0248f3bf" xml:space="preserve">
    <value>Writes text to a file. Any existing text in the file (if it exists) will be replaced.</value>
  </data>
  <data name="Determineswhetherthespecifiedfilee_bf53cca49159af4a" xml:space="preserve">
    <value>Determines whether the specified file exsts. The full path must be specified.</value>
  </data>
  <data name="Copiesafiletothenameddestination" xml:space="preserve">
    <value>Copies a file to the named destination.</value>
  </data>
  <data name="Getsthesizeofthespecifiedfile" xml:space="preserve">
    <value>Gets the size of the specified file.</value>
  </data>
  <data name="Deletesasinglefilefromthefilesystem" xml:space="preserve">
    <value>Deletes a single file from the file system.</value>
  </data>
  <data name="Getsacollectionofallsubfoldersinth_4acc5d8928b9d79f" xml:space="preserve">
    <value>Gets a collection of all subfolders in the specified file system folder.</value>
  </data>
  <data name="Movesthespecifiedfiletoanewlocation" xml:space="preserve">
    <value>Moves the specified file to a new location.</value>
  </data>
  <data name="Splitsafilepathintoitscomponentpar_fb57441b927fa08f" xml:space="preserve">
    <value>Splits a file path into its component parts - the filename and the folder path. The trailing backslash is omitted from the directory part.</value>
  </data>
  <data name="Determineswhetherthespecifieddirec_d8235eb6149ecdbc" xml:space="preserve">
    <value>Determines whether the specified directory exsts. The full path must be specified.</value>
  </data>
  <data name="WritesbinarydatatoafileAnyexisting_52893d4fdda12f5f" xml:space="preserve">
    <value>Writes binary data to a file. Any existing data in the file (if it exists) will be replaced.</value>
  </data>
  <data name="Takesafileandfolderandcombinesthemintoafullpath" xml:space="preserve">
    <value>Takes a file and folder and combines them into a full path.</value>
  </data>
  <data name="Createsadirectoryunderthegivenpath" xml:space="preserve">
    <value>Creates a directory under the given path.</value>
  </data>
  <data name="DeletesadirectoryandifRecursiveisT_cd16ef4bfc98d9bb" xml:space="preserve">
    <value>Deletes a directory and if Recursive is True will delete all subdirectories if present</value>
  </data>
  <data name="Checksifadirectorycontainssubdirectories" xml:space="preserve">
    <value>Checks if a directory contains sub directories</value>
  </data>
  <data name="Turnsacommaseperatedvaluesfileintoacollection" xml:space="preserve">
    <value>Turns a comma seperated values file into a collection</value>
  </data>
  <data name="Getsthepathofaspecialfolder" xml:space="preserve">
    <value>Gets the path of a special folder.</value>
  </data>
  <data name="DownloadsafilefromawebURLandsavesitinafolderondisk" xml:space="preserve">
    <value>Downloads a file from a web URL and saves it in a folder on disk.</value>
  </data>
  <data name="Readsarangeoflinesfomatextfile" xml:space="preserve">
    <value>Reads a range of lines fom a text file</value>
  </data>
  <data name="BPAObjectUtilityForegroundLocker" xml:space="preserve">
    <value>BPA Object - Utility - Foreground Locker</value>
  </data>
  <data name="UtilityForegroundLocker" xml:space="preserve">
    <value>Utility - Foreground Locker</value>
  </data>
  <data name="Controlsaccesstoforegroundoperatio_d884b46e0bdd7586" xml:space="preserve">
    <value>Controls access to foreground operations by providing a locking mechanism</value>
  </data>
  <data name="LockForeground" xml:space="preserve">
    <value>Lock Foreground</value>
  </data>
  <data name="ReleaseForegroundLock" xml:space="preserve">
    <value>Release Foreground Lock</value>
  </data>
  <data name="OVERVIEWThisobjectisdesignedtocont_1f8989b1603b8acd" xml:space="preserve">
    <value>- OVERVIEW - 

This object is designed to control access to "foreground" operations by two processes requiring global mouse clicks and such.

It works by automatically creating a queue item key on the current machine. Thus at runtime there will be one queue item per resource PC.

To prevent a possible race condition in which two processes create duplicate locks on the same machine, a master lock is obtained in order to have the right to create a new queue item. This master lock is shared by all machines.</value>
  </data>
  <data name="SETUPImporttheLockingbusinessobjec_e256a11d5ed365c0" xml:space="preserve">
    <value>- SETUP - 

Import the Locking business object used by this process.

Set up the queue expected by that business object.

Use this business object it to create a unique "Foreground Master Lock" key - see the appropriate page in this object.

Use this business object by peppering it around your business objects. Respect the "try-finally" approach by always releasing any foreground lock that your page has obtained.

Your business objects can be marked as "background" provided you implement your locking properly.</value>
  </data>
  <data name="PrivatepageforsetupRunonceonlyonea_fa26c40382a8b56e" xml:space="preserve">
    <value>Private page for setup

Run once only on each database - not needed for each machine. Further per-machine keys are created automatically on the fly.</value>
  </data>
  <data name="Bug5029meansthatGetResourceName__doesnotwork" xml:space="preserve">
    <value>Bug 5029 means that GetResourceName() does not work</value>
  </data>
  <data name="BPAObjectUtilityGeneral" xml:space="preserve">
    <value>BPA Object - Utility - General</value>
  </data>
  <data name="UtilityGeneral" xml:space="preserve">
    <value>Utility - General</value>
  </data>
  <data name="Generalutilityfunctionswhichdontfi_c8f4d5215efb6b67" xml:space="preserve">
    <value>General utility functions which don't fit into specific categories</value>
  </data>
  <data name="Sleep" xml:space="preserve">
    <value>Sleep</value>
  </data>
  <data name="ProcessExists" xml:space="preserve">
    <value>Process Exists</value>
  </data>
  <data name="WindowExists" xml:space="preserve">
    <value>Window Exists</value>
  </data>
  <data name="Checkstoseeifaprocesswiththegivennameexists" xml:space="preserve">
    <value>Checks to see if a process with the given name exists.</value>
  </data>
  <data name="Checkstoseeifawindowwiththegiventitleexists" xml:space="preserve">
    <value>Checks to see if a window with the given title exists.</value>
  </data>
  <data name="Pausesforagiventime_inseconds_" xml:space="preserve">
    <value>Pauses for a given time (in seconds).</value>
  </data>
  <data name="BPAObjectUtilityHTTP" xml:space="preserve">
    <value>BPA Object - Utility - HTTP</value>
  </data>
  <data name="UtilityHTTP" xml:space="preserve">
    <value>Utility - HTTP</value>
  </data>
  <data name="CommunicateswithwebservicesusingtheHTTPprotocol" xml:space="preserve">
    <value>Communicates with web services using the HTTP protocol.</value>
  </data>
  <data name="Post" xml:space="preserve">
    <value>Post</value>
  </data>
  <data name="PostJSON" xml:space="preserve">
    <value>Post JSON</value>
  </data>
  <data name="HTTPRequest" xml:space="preserve">
    <value>HTTP Request</value>
  </data>
  <data name="LoadCertificate" xml:space="preserve">
    <value>Load Certificate</value>
  </data>
  <data name="URLEncode" xml:space="preserve">
    <value>URL Encode</value>
  </data>
  <data name="SendsamessagetoHTTPendpointusingth_0acfd95d19958719" xml:space="preserve">
    <value>Sends a message to HTTP endpoint using the POST method. The collection data is encoded using "application/x-www-form-urlencoded"</value>
  </data>
  <data name="SendsamessagetoHTTPendpointusingth_ca87176dd1430d96" xml:space="preserve">
    <value>Sends a message to HTTP endpoint using the POST method. The action expects a raw string and sets the content type to "application/json"</value>
  </data>
  <data name="SendsamessagetoHTTPendpointusingth_587ed8b97aff84bc" xml:space="preserve">
    <value>Sends a message to HTTP endpoint using the specified HTTP method and content-type</value>
  </data>
  <data name="BPAObjectUtilityImageManipulation" xml:space="preserve">
    <value>BPA Object - Utility - Image Manipulation</value>
  </data>
  <data name="UtilityImageManipulation" xml:space="preserve">
    <value>Utility - Image Manipulation</value>
  </data>
  <data name="Utilitymethodsforanalysingandmanipulatingimages" xml:space="preserve">
    <value>Utility methods for analysing and manipulating images.</value>
  </data>
  <data name="ImageisWhite" xml:space="preserve">
    <value>Image is White</value>
  </data>
  <data name="ImageContainsColour" xml:space="preserve">
    <value>Image Contains Colour</value>
  </data>
  <data name="ImageIsUniformColour" xml:space="preserve">
    <value>Image Is Uniform Colour</value>
  </data>
  <data name="GetSubImagePosition" xml:space="preserve">
    <value>Get Sub Image Position</value>
  </data>
  <data name="FindFirstPixelFromLeft" xml:space="preserve">
    <value>Find First Pixel From Left</value>
  </data>
  <data name="FindFirstPixelFromBottom" xml:space="preserve">
    <value>Find First Pixel From Bottom</value>
  </data>
  <data name="Determineswhetherthesuppliedimageisallwhite" xml:space="preserve">
    <value>Determines whether the supplied image is all white</value>
  </data>
  <data name="Determineswhetherthespecifiedcolou_348bfe5268c4f8c8" xml:space="preserve">
    <value>Determines whether the specified colour is contained in the image.</value>
  </data>
  <data name="Findswhetherthemainimagecontainsas_cec2e5f255afd473" xml:space="preserve">
    <value>Finds whether the main image contains a sub image, and if found gives the X,Y coordinates of the sub image.</value>
  </data>
  <data name="Findstheindexofthefirstcolumnofpix_5fa564cb3f8994f7" xml:space="preserve">
    <value>Finds the index of the first column of pixels from the left, containing a pixel of the specified colour.</value>
  </data>
  <data name="Findstheindexofthefirstroworcolumn_e7948bfff36234cd" xml:space="preserve">
    <value>Finds the index of the first row or column of pixels from the given direction, containing a pixel of the specified colour.</value>
  </data>
  <data name="Findstheindexofthefirstrowofpixels_a3c6dd22548bea85" xml:space="preserve">
    <value>Finds the index of the first row of pixels from the bottom, containing a pixel of the specified colour.</value>
  </data>
  <data name="Determineswhethertheimagecontainsa_351fec3272e58847" xml:space="preserve">
    <value>Determines whether the image contains a single colour or not</value>
  </data>
  <data name="BPAObjectUtilityJSON" xml:space="preserve">
    <value>BPA Object - Utility - JSON</value>
  </data>
  <data name="UtilityJSON" xml:space="preserve">
    <value>Utility - JSON</value>
  </data>
  <data name="AnobjectforparsingJSONintoacollect_f8351ee437d21a14" xml:space="preserve">
    <value>An object for parsing JSON into a collection and turning a collection into JSON.</value>
  </data>
  <data name="CollectiontoJSON" xml:space="preserve">
    <value>Collection to JSON</value>
  </data>
  <data name="JSONtoCollection" xml:space="preserve">
    <value>JSON to Collection</value>
  </data>
  <data name="JSONtoCollection_skippingJArray_" xml:space="preserve">
    <value>JSON to Collection (skipping JArray)</value>
  </data>
  <data name="BPAObjectUtilityLocking" xml:space="preserve">
    <value>BPA Object - Utility - Locking</value>
  </data>
  <data name="UtilityLocking" xml:space="preserve">
    <value>Utility - Locking</value>
  </data>
  <data name="Manageslocksonitems" xml:space="preserve">
    <value>Manages locks on items</value>
  </data>
  <data name="SetUpQueueItem" xml:space="preserve">
    <value>Set Up Queue Item</value>
  </data>
  <data name="LockItem" xml:space="preserve">
    <value>Lock Item</value>
  </data>
  <data name="ReleaseLock" xml:space="preserve">
    <value>Release Lock</value>
  </data>
  <data name="BPAObjectUtilityNetwork" xml:space="preserve">
    <value>BPA Object - Utility - Network</value>
  </data>
  <data name="UtilityNetwork" xml:space="preserve">
    <value>Utility - Network</value>
  </data>
  <data name="Autilityobjectwithnetworkrelatedactions" xml:space="preserve">
    <value>A utility object with network related actions.</value>
  </data>
  <data name="Ping" xml:space="preserve">
    <value>Ping</value>
  </data>
  <data name="BPAObjectUtilityNumericOperations" xml:space="preserve">
    <value>BPA Object - Utility - Numeric Operations</value>
  </data>
  <data name="UtilityNumericOperations" xml:space="preserve">
    <value>Utility - Numeric Operations</value>
  </data>
  <data name="Mathematicalfunctions" xml:space="preserve">
    <value>Mathematical functions</value>
  </data>
  <data name="GetAbsoluteValue" xml:space="preserve">
    <value>Get Absolute Value</value>
  </data>
  <data name="CalculateRollingAverage_fixeddenominator_" xml:space="preserve">
    <value>Calculate Rolling Average (fixed denominator)</value>
  </data>
  <data name="CalculateRollingAverage_variabledenominator_" xml:space="preserve">
    <value>Calculate Rolling Average (variable denominator)</value>
  </data>
  <data name="Getsthenumericalvalueofanumberwith_6c1cb2d0b92d0ec3" xml:space="preserve">
    <value>Gets the numerical value of a number without regard to its sign.</value>
  </data>
  <data name="Findstherollingaverageofasetofnumb_483b140547e89664" xml:space="preserve">
    <value>Finds the rolling average of a set of numbers given a fixed denominator.</value>
  </data>
  <data name="Findstherollingaverageofasetofnumb_41d0ba39d02a3e31" xml:space="preserve">
    <value>Finds the rolling average of a set of numbers given a variable set denominators.</value>
  </data>
  <data name="BPAObjectUtilityStrings" xml:space="preserve">
    <value>BPA Object - Utility - Strings</value>
  </data>
  <data name="UtilityStrings" xml:space="preserve">
    <value>Utility - Strings</value>
  </data>
  <data name="Utilityfunctionsformanipulatingtext" xml:space="preserve">
    <value>Utility functions for manipulating text.</value>
  </data>
  <data name="RemoveNonwordCharacters" xml:space="preserve">
    <value>Remove Non-word Characters</value>
  </data>
  <data name="GenerateNewGUID" xml:space="preserve">
    <value>Generate New GUID</value>
  </data>
  <data name="DeleteCharacters" xml:space="preserve">
    <value>Delete Characters</value>
  </data>
  <data name="SplitLinesbyLength" xml:space="preserve">
    <value>Split Lines by Length</value>
  </data>
  <data name="SplitLines" xml:space="preserve">
    <value>Split Lines</value>
  </data>
  <data name="SplitText" xml:space="preserve">
    <value>Split Text</value>
  </data>
  <data name="JoinText" xml:space="preserve">
    <value>Join Text</value>
  </data>
  <data name="JoinLines" xml:space="preserve">
    <value>Join Lines</value>
  </data>
  <data name="GetNewlineCharacter" xml:space="preserve">
    <value>Get Newline Character</value>
  </data>
  <data name="ExtractRegexValues" xml:space="preserve">
    <value>Extract Regex Values</value>
  </data>
  <data name="TestRegexMatch" xml:space="preserve">
    <value>Test Regex Match</value>
  </data>
  <data name="FormatNumber" xml:space="preserve">
    <value>Format Number</value>
  </data>
  <data name="PadLeft" xml:space="preserve">
    <value>PadLeft</value>
  </data>
  <data name="GetXMLElements" xml:space="preserve">
    <value>Get XML Elements</value>
  </data>
  <data name="GetXMLAttribute" xml:space="preserve">
    <value>Get XML Attribute</value>
  </data>
  <data name="GetCollectionasCSV" xml:space="preserve">
    <value>Get Collection as CSV</value>
  </data>
  <data name="GetCSVAsCollection" xml:space="preserve">
    <value>Get CSV As Collection</value>
  </data>
  <data name="EscapeSendkeysString" xml:space="preserve">
    <value>Escape Sendkeys String</value>
  </data>
  <data name="CompareFontText" xml:space="preserve">
    <value>Compare Font Text</value>
  </data>
  <data name="InStr" xml:space="preserve">
    <value>InStr</value>
  </data>
  <data name="InStrRev" xml:space="preserve">
    <value>InStrRev</value>
  </data>
  <data name="Generatesanewgloballyuniqueidentifierastext" xml:space="preserve">
    <value>Generates a new globally unique identifier as text.</value>
  </data>
  <data name="Trimsnonwordcharactersfromthebegin_dc790436cf3fcb33" xml:space="preserve">
    <value>Trims non word characters from the begining and end of the text. Non word characters are any character that is NOT in the ranges a-z A-Z _ and 0-9</value>
  </data>
  <data name="Splitsmultiplelinetextintoacollect_f030339ab73d18b0" xml:space="preserve">
    <value>Splits multiple line text into a collection text values with a single row per line.</value>
  </data>
  <data name="Splitstextwithagivendelimiterintoa_28610156eaa13454" xml:space="preserve">
    <value>Splits text with a given delimiter into a collection of text values.</value>
  </data>
  <data name="Joinsvaluesfromacollectionintoasin_80442fea6bd28783" xml:space="preserve">
    <value>Joins values from a collection into a single line of text using a given delimiter between values.</value>
  </data>
  <data name="Joinsvaluesfromacollectionintomultilinetext" xml:space="preserve">
    <value>Joins values from a collection into multiline text.</value>
  </data>
  <data name="Formatsanumberintocommadelimitedtr_0be20511fcc18aae" xml:space="preserve">
    <value>Formats a number into comma-delimited triplets, as appropriate. Eg 123456.789 becomes 123,456.789</value>
  </data>
  <data name="Ensuresthatastring_usuallyanumber__fa0ffdd1d0613881" xml:space="preserve">
    <value>Ensures that a string (usually a number) is of fixed width, by padding with a special character on the left.</value>
  </data>
  <data name="Getsacollectionofxmlelementswithag_c1504303d0285145" xml:space="preserve">
    <value>Gets a collection of xml elements with a given name from an xml document.</value>
  </data>
  <data name="Getsthevalueofanxmlattributewithag_9204405bba092621" xml:space="preserve">
    <value>Gets the value of an xml attribute with a given name from an xml document fragment.</value>
  </data>
  <data name="Turnsacollectionintoalistofcommaseperatedvalues" xml:space="preserve">
    <value>Turns a collection into a list of comma seperated values.</value>
  </data>
  <data name="Splitstextintolinesofagivenlengthu_75f3a8c4dc336f9c" xml:space="preserve">
    <value>Splits text into lines of a given length using word boundries to find the split point.</value>
  </data>
  <data name="Turnsalistofcommaseperatedvaluesintoacollection" xml:space="preserve">
    <value>Turns a list of comma seperated values into a collection.</value>
  </data>
  <data name="Thecolumnsmustappearinthesameorder_8e85471bae580eb9" xml:space="preserve">
    <value>The columns must appear in the same order as they appear in the CSV file</value>
  </data>
  <data name="Getsthetextrepresentingthetwonewli_4461f54130109a7b" xml:space="preserve">
    <value>Gets the text representing the two newline characters used under windows (Carriage return followed by Line feed)</value>
  </data>
  <data name="Removesthegivencharactersfromthetext" xml:space="preserve">
    <value>Removes the given characters from the text.</value>
  </data>
  <data name="Escapescharacterstobesentviathesen_313955783a707fda" xml:space="preserve">
    <value>Escapes characters to be sent via the sendkeys method, to ensure that all characters are interpreted literally. If left unescaped, some characters such as % carry a special meaning rather than their literal value.</value>
  </data>
  <data name="ComparestwoitemsoftextreadusingFon_b9f92eb8c0cfc4f8" xml:space="preserve">
    <value>Compares two items of text read using Font Recognition for equality, where "equality" means that the two text samples match following the removal of conflicting font characters.</value>
  </data>
  <data name="n10020056to99400600" xml:space="preserve">
    <value>100-200
56 to 99
400 - 600</value>
  </data>
  <data name="Teststoseeifonepeiceoftextcontains_9ef24e7082e99e03" xml:space="preserve">
    <value>Tests to see if one peice of text contains another peice of sub text.</value>
  </data>
  <data name="n1text0binary" xml:space="preserve">
    <value>1 = text, 0 = binary</value>
  </data>
  <data name="Teststoseeifonepeiceoftextcontains_23193ead14a51d13" xml:space="preserve">
    <value>Tests to see if one peice of text contains another peice of sub text but matches in reverse.</value>
  </data>
  <data name="CheckifagivenTextvaluematchesaregularexpression" xml:space="preserve">
    <value>Check if a given Text value matches a regular expression.</value>
  </data>
  <data name="BPAObjectWebservicesOAuth20" xml:space="preserve">
    <value>BPA Object - Webservices - OAuth2.0</value>
  </data>
  <data name="WebservicesOAuth20" xml:space="preserve">
    <value>Webservices - OAuth2.0</value>
  </data>
  <data name="BusinessObjectforauthorizationusingOAuth20" xml:space="preserve">
    <value>Business Object for authorization using OAuth2.0</value>
  </data>
  <data name="Request" xml:space="preserve">
    <value>Request</value>
  </data>
  <data name="Requestatokenandthenuseitimmediate_2327d79e58312906" xml:space="preserve">
    <value>Request a token and then use it immediately to request the resource</value>
  </data>
  <data name="BPAObjectWebservicesREST" xml:space="preserve">
    <value>BPA Object - Webservices - REST</value>
  </data>
  <data name="WebservicesREST" xml:space="preserve">
    <value>Webservices - REST</value>
  </data>
  <data name="ConnectstoRESTbasedwebserviceAPIs" xml:space="preserve">
    <value>Connects to REST based webservice API's</value>
  </data>
  <data name="Get" xml:space="preserve">
    <value>Get</value>
  </data>
  <data name="Put" xml:space="preserve">
    <value>Put</value>
  </data>
  <data name="SetupOAuth" xml:space="preserve">
    <value>Setup OAuth</value>
  </data>
  <data name="ActiontogetaresourceviatheRESTAPIusingtheGETmethod" xml:space="preserve">
    <value>Action to get a resource via the REST API using the GET method.</value>
  </data>
  <data name="ActiontocreatearesourceviatheRESTA_d40ca39521f3e2a3" xml:space="preserve">
    <value>Action to create a resource via the REST API using the POST method.</value>
  </data>
  <data name="ActiontoupdatearesourceviatheRESTA_7e8a97bd870e2b5a" xml:space="preserve">
    <value>Action to update a resource via the REST API using the PUT method.</value>
  </data>
  <data name="ActiontodeletearesourceviatheRESTA_2314e437838c389b" xml:space="preserve">
    <value>Action to delete a resource via the REST API using the DELETE method.</value>
  </data>
  <data name="SetstheRESTVBOupforusewithOAuth20" xml:space="preserve">
    <value>Sets the REST VBO up for use with OAuth2.0 </value>
  </data>
  <data name="BPAObjectGoogleSheets" xml:space="preserve">
    <value>BPA Object - Google Sheets</value>
  </data>
  <data name="GoogleSheets" xml:space="preserve">
    <value>Google Sheets</value>
  </data>
  <data name="CommonactionstointeractwithGoogleS_203a770751795b5c" xml:space="preserve">
    <value>Common actions to interact with Google Sheets. Requires a Google API Client ID and Secret for operation - these must be created as Environment Variables called "Google Sheets API Client ID" and "Google Sheets API Client Secret" respectively</value>
  </data>
  <data name="GetRangeValues" xml:space="preserve">
    <value>Get Range Values</value>
  </data>
  <data name="SetRangeValues" xml:space="preserve">
    <value>Set Range Values</value>
  </data>
  <data name="AppendData" xml:space="preserve">
    <value>Append Data</value>
  </data>
  <data name="ClearRange" xml:space="preserve">
    <value>Clear Range</value>
  </data>
  <data name="Getsacollectionofvaluesfromarangei_568b8d97d6bae97d" xml:space="preserve">
    <value>Gets a collection of values from a range in a Google Sheets document.</value>
  </data>
  <data name="SetsarangeofvaluesinaGoogleSheetsdocument" xml:space="preserve">
    <value>Sets a range of values in a Google Sheets document.</value>
  </data>
  <data name="Clearsallvaluesinthegivenrange" xml:space="preserve">
    <value>Clears all values in the given range.</value>
  </data>
  <data name="Appendsthegivendatatoatablefoundin_635f8a27a43a1d21" xml:space="preserve">
    <value>Appends the given data to a table found in a sheet. Tables are discovered programatically based on the given range and the data is added at the end of the table.</value>
  </data>
  <data name="CreatesanewGoogleSheetsdocumentandreturnsitsID" xml:space="preserve">
    <value>Creates a new Google Sheets document and returns its ID.</value>
  </data>
  <data name="Countsthenumberofrowsinaworksheet" xml:space="preserve">
    <value>Counts the number of rows in a worksheet.</value>
  </data>
  <data name="BPAObjectUtilityWindowsCompressedFile" xml:space="preserve">
    <value>BPA Object - Utility - Windows Compressed File</value>
  </data>
  <data name="UtilityWindowsCompressedFile" xml:space="preserve">
    <value>Utility - Windows Compressed File</value>
  </data>
  <data name="TheVBOutilitytomanageWindowsCompressedfiles" xml:space="preserve">
    <value>The VBO utility to manage Windows Compressed files</value>
  </data>
  <data name="CreateZipfromFolder" xml:space="preserve">
    <value>Create Zip from Folder</value>
  </data>
  <data name="AddFiletoZip" xml:space="preserve">
    <value>Add File to Zip</value>
  </data>
  <data name="ExtractAllfromZip" xml:space="preserve">
    <value>Extract All from Zip</value>
  </data>
  <data name="ExtractFilefromZip" xml:space="preserve">
    <value>Extract File from Zip</value>
  </data>
  <data name="DeleteFilefromZip" xml:space="preserve">
    <value>Delete File from Zip</value>
  </data>
  <data name="GetZipContents" xml:space="preserve">
    <value>Get Zip Contents</value>
  </data>
  <data name="FindFileinZip" xml:space="preserve">
    <value>Find File in Zip</value>
  </data>
  <data name="Createsaziparchivethatcontainsthef_6702bb44ff84f841" xml:space="preserve">
    <value>Creates a zip archive that contains the files and directories from the specified directory and optionally includes the base directory.
The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created.
If the archive already exists, an exception is thrown. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.
If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an exception.</value>
  </data>
  <data name="Thepathtothedirectorytobearchiveds_5f912f3280c7f1b4" xml:space="preserve">
    <value>The path to the directory to be archived, specified as an absolute path</value>
  </data>
  <data name="Thepathandnameofthearchivetobecrea_6a63539d19146844" xml:space="preserve">
    <value>The path and name of the archive to be created, specified as an absolute path</value>
  </data>
  <data name="Archivesafilebycompressingitandadd_59c5299efd44db8f" xml:space="preserve">
    <value>Archives a file by compressing it and adding it to the zip archive. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.</value>
  </data>
  <data name="Thepathandnameofthefiletobearchive_6f22217365b6233c" xml:space="preserve">
    <value>The path and name of the file to be archived, specify as an absolute path</value>
  </data>
  <data name="Thepathandnameoftheziparchivetoadd_3d4fabce7e09301b" xml:space="preserve">
    <value>The path and name of the zip archive to add the file to, specified as an absolute path</value>
  </data>
  <data name="truetoincludethedirectorynamefromS_feb5a426feaa4038" xml:space="preserve">
    <value>-true- to include the directory name from [Source Folder Name] at the root of the archive; -false- to include only the contents of the directory.</value>
  </data>
  <data name="Extractsallthefilesinthespecifiedz_deb753770a840ca1" xml:space="preserve">
    <value>Extracts all the files in the specified zip archive to a directory on the file system</value>
  </data>
  <data name="Thepathandnameoftheziparchivetoope_6e079eb4a9b92828" xml:space="preserve">
    <value>The path and name of the zip archive to open, specified as an absolute path</value>
  </data>
  <data name="Thepathtothedirectoryinwhichtoplac_0d20730b387b1729" xml:space="preserve">
    <value>The path to the directory in which to place the extracted files, specified as a absolute path</value>
  </data>
  <data name="Readsthedetailsoftheentriesofazipf_d751d9e56ab0aabc" xml:space="preserve">
    <value>Reads the details of the entries of a zip file into a collection</value>
  </data>
  <data name="Thelistoffilescontainedintheziparchive" xml:space="preserve">
    <value>The list of files contained in the zip archive</value>
  </data>
  <data name="Extractsanentryintheziparchivetoaf_ee53906cbb3e7307" xml:space="preserve">
    <value>Extracts an entry in the zip archive to a file, and optionally overwrites an existing file that has the same name</value>
  </data>
  <data name="Thepathandnameofthefiletocreatefro_5a8c074c94c17ff1" xml:space="preserve">
    <value>The path and name of the file to create from the contents of the entry (absolute path)</value>
  </data>
  <data name="Thefilename_anditspathwithinthezip_c7858c45c46809d5" xml:space="preserve">
    <value>The file name (and its path within the zip archive if necessary) to extract</value>
  </data>
  <data name="Truetooverwriteanexistingfilethath_53faec9c38475a7e" xml:space="preserve">
    <value>True to overwrite an existing file that has the same name as the destination file; otherwise, False</value>
  </data>
  <data name="Deletestheentryfromtheziparchive" xml:space="preserve">
    <value>Deletes the entry from the zip archive</value>
  </data>
  <data name="Thefilename_anditspathwithinthezip_7628e9a176d54461" xml:space="preserve">
    <value>The file name (and its path within the zip archive if necessary) to delete</value>
  </data>
  <data name="CheckifafileexistsintheZipArchive" xml:space="preserve">
    <value>Check if a file exists in the Zip Archive</value>
  </data>
  <data name="TrueifthefileexistsintheZipArchive_976d478d6c32e24f" xml:space="preserve">
    <value>True if the file exists in the Zip Archive file, otherwise False</value>
  </data>
  <data name="Thepathandnameoftheaddedfileasitwi_ccbf38b602d42bd5" xml:space="preserve">
    <value>The path and name of the added file as it will be stored in the zip file. Path can be specified a relative or absolute path. If not specified, the file will be stored in the root folder of the zip archive file with its original name.</value>
  </data>
  <data name="Getsthecurrentworksheetintoacollec_291f17b957b79a7a" xml:space="preserve">
    <value>Gets the current worksheet into a collection. This will read the worksheet and store the contents into the collection. The offset function allows a starting cell to be specified.</value>
  </data>
  <data name="Getsthenameoftheworksheets" xml:space="preserve">
    <value>Gets the name of the worksheets.</value>
  </data>
  <data name="Checksifaworksheetexistsinaworkbook" xml:space="preserve">
    <value>Checks if a worksheet exists in a workbook.</value>
  </data>
  <data name="Movesthespecifiedworksheettoanotherworkbook" xml:space="preserve">
    <value>Moves the specified worksheet to another workbook.
</value>
  </data>
  <data name="Selectscellsofaworksheet" xml:space="preserve">
    <value>Selects cells of a worksheet.</value>
  </data>
  <data name="Deletecellsfromtheworkbook" xml:space="preserve">
    <value>Delete cells from the workbook.</value>
  </data>
  <data name="Copycellsfromtheworkbook" xml:space="preserve">
    <value>Copy cells from the workbook.</value>
  </data>
  <data name="Pastetextintocellsofaworkbook" xml:space="preserve">
    <value>Paste text into cells of a workbook.</value>
  </data>
  <data name="Writestexttoclipboardsothatitcanbecopied" xml:space="preserve">
    <value>Writes text to clipboard so that it can be copied.</value>
  </data>
  <data name="Cutcellsfromtheworkbook" xml:space="preserve">
    <value>Cut cells from the workbook.</value>
  </data>
  <data name="Protectstheworkbooksothatitisencry_bd762b10485afbb2" xml:space="preserve">
    <value>Protects the workbook so that it is encrypted with a password.</value>
  </data>
  <data name="Hidesworksheetsothatisnotvisible" xml:space="preserve">
    <value>Hides worksheet so that is not visible.</value>
  </data>
  <data name="Hideallotherworksheetssothattheyarenotvisible" xml:space="preserve">
    <value>Hide all other worksheets so that they are not visible.</value>
  </data>
  <data name="ImportCSVworksheetsintoaworkbookusingapath" xml:space="preserve">
    <value>Import CSV worksheets into a workbook using a path.</value>
  </data>
  <data name="Getsthenameoftheworksheet" xml:space="preserve">
    <value>Gets the name of the worksheet.</value>
  </data>
  <data name="Insertcellsintotheworkbook" xml:space="preserve">
    <value>Insert cells into the workbook.</value>
  </data>
  <data name="Getsthecurrentworksheetintoacollec_15eb5bb845e54906" xml:space="preserve">
    <value>Gets the current worksheet into a collection. This will read the worksheet and store the contents into the collection. The offset function allows a starting cell to be specified.</value>
  </data>
  <data name="Protectstheworkbooksothatitisencry_ce2588ed1a5392f1" xml:space="preserve">
    <value>Protects the workbook so that it is encrypted with a password.</value>
  </data>
  <data name="FlagEmailforFollowup" xml:space="preserve">
    <value>Flag Email for Follow-up</value>
  </data>
  <data name="ClearEmailFlag" xml:space="preserve">
    <value>Clear Email Flag</value>
  </data>
  <data name="SendsanEmailForalistofvalidSensiti_49c501566c0f7987" xml:space="preserve">
    <value>Sends an Email 

For a list of valid Sensitivity values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olsensitivity

For a list of valid Importance values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olimportance</value>
  </data>
  <data name="ReplytoallEmailsrecipientsofaspeci_16e2e1a11fc37347" xml:space="preserve">
    <value>Reply to all Emails recipients of a specific email.

The &lt;Reply All to Email&gt; action will only call one ID specific (Entry ID) email item. 

If multiple emails are expected to be called, the process design would need to reflect that requirement.

For a list of valid Sensitivity values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olsensitivity

For a list of valid Importance values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olimportance</value>
  </data>
  <data name="ForwardEmailtorecipients_ToCCBCC_i_a9ada304e626c44a" xml:space="preserve">
    <value>Forward Email to recipients (To/CC/BCC) including (Message) as input parameters.

The &lt;Forward Email&gt; action will only call one ID specific (Entry ID) email item. 

If multiple emails are expected to be called, the process design would need to reflect that requirement.

For a list of valid Sensitivity values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olsensitivity

For a list of valid Importance values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olimportance</value>
  </data>
  <data name="ReplytoEmailsenderofaspecificemail_c2895d7fe9e6f26e" xml:space="preserve">
    <value>Reply to Email sender of a specific email.

The &lt;Reply to Email&gt; action will only call one ID specific (Entry ID) email item. 

If multiple emails are expected to be called, the process design would need to reflect that requirement.

For a list of valid Sensitivity values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olsensitivity

For a list of valid Importance values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olimportance</value>
  </data>
  <data name="FlagEmailforfollowupForalistofvali_a42191494da29b54" xml:space="preserve">
    <value>Flag Email for follow-up. 

For a list of valid MarkInterval values, please see https://docs.microsoft.com/en-us/office/vba/api/outlook.olmarkinterval</value>
  </data>
  <data name="Clearanyflagonthemailitem" xml:space="preserve">
    <value>Clear any flag on the mail item</value>
  </data>
  <data name="OptionalDisplayNameoftheemailaccou_0b68da4e15299de5" xml:space="preserve">
    <value>Optional. DisplayName of the email account. Default account is used if omitted.</value>
  </data>
  <data name="OptionalShareMailboxnameoremailadd_86223321b90024ad" xml:space="preserve">
    <value>Optional. Share Mailbox name or email address. Attempt to call Shared Mailbox is only initiated when a vaue is supplied.</value>
  </data>
</root>