<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link type="text/css" href="AutomateHelp.css" rel="stylesheet" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <title>Business Objects Help</title>
</head>
<body>
    <div class="header">
        <h1 class="pagetitle">Help</h1>
    </div>
    <h3>Business Objects Overview</h3>
    <p>
        Along with <a href="helpWebServices.htm">Web Services</a>, Business Objects provide the
        means of interacting with external systems from your process <a href="helpFlowCharts.htm">
            flow
            chart
        </a> in <a href="frmprocess.htm">Process Studio</a>.
    </p>
    <p>
        Business objects provide a series of <span class="emphasis">actions</span> that can be
        called from a process. For example a business object might be designed to interact with a
        mainframe application containing customer details. The high level process might require a
        customer's address to be updated. A useful business object would contain the action "Set
        Customer Address" and take a parameter "Customer ID" to identify to the underlying system
        which customer's address is to be updated. The business object would then "speak the language"
        of the target mainframe system to achieve its task.
    </p>
    <p>
        Providing functionality in a business object in this manner allows for useful functionality
        to be re-used, be it several times in the same process or be it several times across multiple
        processes. A single business object may be used by several processes at once.
    </p>
    <p>
        Since the business object merely describes a high-level description of a series of tasks
        (such as updating customer addresses), the implementation is separated from the process. This
        means that should the target system be replaced (ie the mainframe in the example above) with a
        new system, migrating to the new system would merely mean rewriting the implementation of the
        business object. This means that no changes would be necessary to the high level business
        process.
    </p>
    <p>
        To make the most of these advantages, you should try to separate your business logic from
        your implementation: use business objects for interacting with external systems and use
        processes for deciding data flow, processing queues etc.
    </p>
    <a name="Types" id="Types"></a>
    <h3>Types of business object</h3>
    <p>There are three main methods of interacting with external systems:</p>
    <ul>
        <li class="bold">
            <a name="COM" id="COM"></a>
            External business object

            <p class="indented">
                External business objects are a legacy mechanism representing a wrapper for locally
                deployed COM objects.
                Superseded by visual business objects, external business objects must be explicitly
                registered on each device where they will be used. Typically, this will be
                each Runtime Resource and Interactive Client used for development. Registration
                is carried out within <a href="frmSystemManager.htm">System Manager</a>.
            </p>
            <p class="indented">
                To add an external business object in System Manager, select <i>Objects > External</i>
                from the navigation tree. In the <i>Add a new object</i> field, input the name of the
                object and click Go.
            </p>

            <p class="indented">
                <b>Note:</b> External business objects should not be considered for new developments.
                It is recommended that you use visual business objects.
            </p>
        </li>

        <li class="bold">
            <a name="VBO" id="VBO"></a>
            Visual business objects

            <p class="indented">
                A visual business object is one which is designed from within
                <a href="helpObjectStudio.htm">object studio</a>. In this case Blue Prism takes care of mapping
                the interfaces and no configuration is necessary. Such business objects appear
                automatically in System Manager, and in <a href="frmStageProperties.htm">
                    Action
                    Stage Properties
                </a> forms.
            </p>
        </li>

        <li class="bold">
            <a name="Web" id="Web"></a>
            Web services

            <p class="indented">
                You may have access to existing <a href="helpWebServices.htm">
                    web
                    services
                </a> which provide external functionality in a convenient format already,
                making it tiresome to write a wrapper for them or to reimplement them. To solve this
                problem, Blue Prism allows you to register a web service in
                <a href="frmSystemManager.htm">System Manager</a> and it will provide a wrapper for
                them automatically, allowing you to call them in the same way as a business object.
                Indeed, a user who does not have <a href="helpUserPermissions.htm">permission</a> to
                access System Manager can not know the difference between a business object and a web
                service.
            </p>
        </li>
    </ul>


    <p>
        Any business object which appears in system manager can be called
        from within a business process.
    </p>

</body>
</html>
