<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<link type="text/css" href="AutomateHelp.css" rel="stylesheet" />
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
	<title>Blue Prism Collections</title>
</head>

<body>
	<div class="header">
		<h1 class="pagetitle">Help</h1>
	</div>

	<h2>Collections - an overview</h2>

	<p>A collection is a group of several data items in one. Typically,
	a collection will be used to retrieve a large number of different
	pieces of information from a business object, in a single
	transaction. Once populated, the information in a collection can be
	accessed in a sequential manner using a <a 
	href="frmStagePropertiesLoopStart.htm">Loop stage</a>.</p>

	<p>It is convenient to think of the contents of a collection as a
	table containing rows and columns. The columns are referred to as
	<em class="buzzword">fields</em>. The names given to fields are
	supplied by the user, or they may be defined within the
	corresponding business object(s).</p>
	
	<p>The fields are accessed within expressions using 'dot' syntax,
	that is, the collection name, followed by a dot, followed by the
	field name : <i>eg.</i> for a field "Name" inside a collection
	defined in a stage named "Person", you can access the field in a <a
	href="frmStagePropertiesCalculation.htm">Calculation stage</a> or a
	<a href="frmStagePropertiesDecision.htm">Decision stage</a> with the
	reference : <code>[Person.Name]</code>.</p>
	
	<p>A field name cannot contain square brackets or dots, to ensure
	that there are no collisions between the structure of the collection
	being referenced and the names.</p>

	<h3>Defined vs. Undefined</h3>
	<p>When the names and <a href="helpDataTypes.htm">data types</a> of
	the fields are defined explicitly in the <a
	href="frmStagePropertiesCollection.htm">collection stage
	properties</a> form, the collection is said to be
	<em class="buzzword">defined</em>. This field definition may be the
	invention of the user, or it may have been predetermined by the
	designer of a business object with which the collection is used.</p>
	
	<p>Similarly, if the fields are not defined in the properties form,
	the collection is said to be <em class="buzzword">undefined</em>.
	This situation arises frequently when interfacing with systems
	containing data whose structure can vary. An example might be the
	fetching of the data contained in a spreadsheet (which is in a
	tabular form) - if nothing is known about the columns of the table
	in the spreadsheet, then no labels or datatypes can be attached to
	the columns (or <em class="buzzword">fields</em>)
	of the collection in advance. The fields of the collection will only
	be available at runtime.</p>
	
	<h3 id="nested">Nested collections</h3>
	
	<p>A collection can contain collections within itself. Again, they
	can be <em class="buzzword">defined</em> within the collection stage
	or <em class="buzzword">undefined</em> until populated with data.
	</p>
	
	<p>Nested collections can be referenced in expressions using further
	levels of the 'dot' syntax described above. <i>eg.</i> if a stage
	named 'Person' had a collection named 'Qualifications', which had
	three fields 'Type', 'Name' and 'Grade', the fields could be
	accessed using the references : 
	<code>[Person.Qualifications.Type]</code>,
	<code>[Person.Qualifications.Name]</code> and
	<code>[Person.Qualifications.Grade]</code>. </p>
	
	<p>Likewise, a <a href="frmStagePropertiesLoopStage.htm">Loop Start
	</a> stage can loop directly over nested collections using the same
	syntax, so to loop over a person's qualifications in the above
	example, you would set the collection in the loop start stage to
	<code>Person.Qualifications</code>. This generally only makes sense
	inside loop stages iterating over the <code>Person</code> collection
	</p>
	
	<p>Note however that the internal collections business object does
	not support nested collections - they must first be moved into a
	collection stage before being referenced in an internal action.</p>

	<h3>The Current Row</h3>
	<p>Access to the rows of the collection must be done using a loop
	stage. The loop stage automatically updates the current row of the
	collection, moving from one row to the next, in order. This change
	occurs each time the <a href="frmStagePropertiesLoopEnd.htm">loop
	end</a> stage is encountered. Before you enter a loop stage the
	collection will be on the first row. The loop stage will continue
	iterate through the rows until the last row in the collection has
	been reached. At this point the loop will exit and there will be no
	current row. Trying to access a collection when there is no current
	row results in an error. In order to access the data again, some
	action must be taken to cause the &quot;current row&quot; to be set
	once more. Possibilities include: </p>
	<ul>
		<li>entering a new loop;</li>
		<li>adding a new row to the collection (which then becomes the
			current row, ready to be populated with data).</li>
	</ul>
	
	<h3>Manipulating Collections</h3>
	<p>Collections can be manipulated using the &quot;Internal - 
	Collections&quot; Business Object. For more information about
	internal business objects see the <a 
	href="helpInternalBusinessObjects.htm" >Internal Business Objects
	Overview</a>. The following actions all require the name of the
	collection to be supplied as an input parameter. This name is of
	<a href="helpDataTypes.htm">data type</a> text, rather than of type
	collection. The collection named must be accessible (ie not located
	on another page and hidden) in order to be used.</p>

	<dl class="bulleted">
		<dt>Add Row</dt>
		<dd>This action will add a new row to the collection. The new
			row will become the current row, ready to be populated with
			new data.</dd>

		<dt>Remove Row</dt>
		<dd>This action will remove the current row from the collection. 
			After a row has been removed there will be no current row.
		</dd>
		<dd>When a row is removed in the middle of a loop iteration, the
			loop will continue to (what would have been) the next row
			when it reaches the loop end stage. If an attempt is made in
			the meantime to access the current row then an error will
			occur.</dd>

		<dt>Remove All Rows</dt>
		<dd>This action will remove all rows from the collection. After
			the rows have been removed, there will be no current row.
		</dd>
		<dd>When all rows are removed in the middle of a loop iteration,
			the loop will not continue to a new row when the loop end
			stage is reached. If an attempt is made in the meantime to
			access the current row then an error will occur.</dd>
		
		<dt>Count rows</dt>
		<dd>This action will get the number of rows within the
			collection. This action differs in from the other two
			actions in that is has an additional output parameter called
			&quot;count&quot; which must be mapped to a data item to get
			the number of rows.</dd>
	</dl>
	
	<h3 id="singlerow">Single Row Collections</h3>
	<p>A 'single row' collection always has one row - and that row is
	automatically set as the current row. The row manipulation actions
	in the Collections business object will raise an error if they are
	called on a single row collection, and <code>Count rows</code> will
	always return <i>1</i>.
	
	<h2>Examples</h2>

	<h3>Undefined Collections</h3>
	<div class="section-indent">
		<p>You wish to retrieve the entire contents of a Microsoft Excel
		Worksheet</p>

		<ol class="headed">
			
			<li><h4>Preparation</h4>
			<p>After ensuring that the CommonAutomation business object,
			<em class="buzzword">CommonAutomation.clsExcel</em> has
			been installed, you open <a href="frmProcess.htm">Process
			Studio</a> and add the following stages:</p>
			<ul>
				<li>A collection stage - this is the collection that we
					will populate.</li>

				<li>Two action stages - only one of these is of interest
					to the discussion; the other is a practical
					necessity.</li>
			</ul>
			</li>
			
			<li><h4>Configuring the action to retrieve the data</h4>
			<p>We must populate the collection using an action stage.
			Open the properties page of the second of the two action
			stages. For the Business Object choose 'Microsoft Office -
			Excel Actions' from the drop-down menu (if this does not
			appear then the business object has not been successfully
			installed); for the action choose 'Get WorkSheet as
			collection'. On the outputs tab, drag and drop the name of
			your collection stage onto the output named 'Col1'. This
			instructs the action to place the data it collects into the
			collection you chose.</p>
			</li>
			
			<li><h4>Handling Preconditions</h4>

			<p>Before the process will function, we must fulfil all of
			the preconditions specified by the action stage. Observe
			that on the preconditions tab in the current action
			properties it states "A workbook must be active". This is
			the reason for the other action stage. Open the properties
			for that action stage and choose the action 'Open Workbook'
			from the business object 'Microsoft Office - Excel Actions'.
			Enter the path of an existing Microsoft Excel workbook.</p>
			</li>
			
			<li><h4>Finishing off</h4>

			<p>Finally, join up the action stages using links (no need
			to join the collection stage to anything) and when your
			process runs, the collection will be populated once the
			second stage has been run.</p>
			</li>
			
		</ol>
	</div>

	<h3>Defined Collections</h3>
	<div class="section-indent">
		<p>You wish to retrieve the entire contents of a table which has
		field headers that do not change.</p>

		<ol class="headed">
		
			<li><h4>Preparation</h4>

			<p>After ensuring that business object that returns a
			collection is available, you open <a href="frmProcess.htm">
			Process Studio</a> and add the following stages:</p>
			<ul>
				<li>A collection stage - this is the collection that we
					will populate.</li>
				<li>One action stage - this is the stage that will
					populate our collection.</li>
			</ul></li>
		
			<li><h4>Defining the collection</h4>

			<p>Open the collection stage properties. On the fields tab
			click the add fields button to add fields that exactly match
			the fields of the collection with which you will be
			populating with. Choose the data type for each field in the
			collection also, again these must exactly match the
			collection with which you will be populating with.</p></li>

			<li><h4>Configuring the action to retrieve the data</h4>

			<p>We must populate the collection using an action stage.
			Open the properties page of the action stages. Choose the
			business object action that returns a collection, and on the
			outputs tab set its output to the collection stage named
			'Coll1'</p></li>

			<li><h4>Finishing off</h4>

			<p>Finally, join up the action stages using links (no need
			to join the collection stage to anything) and when your
			process runs the collection will be populated from the
			action stage onwards.</p></li>
		</ol>
	</div>
</body>
</html>
