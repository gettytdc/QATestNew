Imports BluePrism.BPCoreLib
Imports BluePrism.Scheduling
Imports BluePrism.Scheduling.Calendar
Imports BluePrism.AutomateAppCore

Imports UIUtil = AutomateUI.clsUserInterfaceUtils

''' Project  : Automate
''' Class    : ctlRunHourly
''' <summary>
''' Allows the user to configure hourly running
''' </summary>
Public Class ctlRunHourly
    Inherits UserControl
    Implements IIntervalControl

    ''' <summary>
    ''' Creates a new 'Run Hourly' control to capture the configuration for a
    ''' schedule set to run on an hourly / minutely basis.
    ''' On creation, this ensures that 'hourly' is selected over 'minutely' by
    ''' default.
    ''' </summary>
    Public Sub New()

        ' This call is required by the Windows Form Designer.
        InitializeComponent()

        SetHourlyGroupPanelElements()

        dpStartTime.CustomFormat = Threading.Thread.CurrentThread.CurrentCulture.DateTimeFormat.LongTimePattern
        dpEndTime.CustomFormat = Threading.Thread.CurrentThread.CurrentCulture.DateTimeFormat.LongTimePattern

        ' Default the control to use 'hourly'
        radioEveryNHours.Checked = True

    End Sub

    Private Sub SetHourlyGroupPanelElements()
        If Threading.Thread.CurrentThread.CurrentCulture.Parent.Name = "ja" Then
            DateRange_StartLabel.Visible = False
            DateRange_EndLabel.Visible = True
        Else
            DateRange_EndLabel.Visible = False
        End If
    End Sub

#Region "IScheduleModifier implementation"

    ''' <summary>
    ''' Event fired when the schedule data has changed.
    ''' </summary>
    ''' <param name="sender">The schedule whose data has changed as a result of a
    '''  change on this class.</param>
    Public Event ScheduleDataChange(ByVal sender As SessionRunnerSchedule) _
     Implements IScheduleModifier.ScheduleDataChange

    ''' <summary>
    ''' Raises a change event for the schedule data, if this control is currently
    ''' assigned to a ctlSchedule control (which has a schedule assigned to it).
    ''' </summary>
    Private Sub RaiseScheduleChangeEvent()
        Dim ctl As ctlSchedule = clsUserInterfaceUtils.GetAncestor(Of ctlSchedule)(Me)
        If ctl IsNot Nothing Then
            RaiseEvent ScheduleDataChange(ctl.Schedule)
        End If
    End Sub

#End Region

#Region "IInterval Control Implementation"

    ''' <summary>
    ''' The actual control object that this interval control uses to display
    ''' itself. That's me, that is.
    ''' </summary>
    Public ReadOnly Property Control() As Control Implements IIntervalControl.Control
        Get
            Return Me
        End Get
    End Property

    ''' <summary>
    ''' Checks if this control supports the given interval or not.
    ''' </summary>
    ''' <param name="interval">The interval to check if the control supports it
    ''' or not.</param>
    ''' <returns>True if the given interval type is <see cref="IntervalType.Hour"/>
    ''' or <see cref="IntervalType.Minute"/>; False otherwise.</returns>
    Public Function SupportsInterval(ByVal interval As IntervalType) As Boolean _
     Implements IIntervalControl.SupportsInterval
        Return (interval = IntervalType.Hour OrElse interval = IntervalType.Minute)
    End Function

    ''' <summary>
    ''' Gets the TriggetMetaData generated by the fields on the control
    ''' </summary>
    Public Function GetData(ByVal err As ICollection(Of clsValidationError)) As TriggerMetaData _
     Implements IIntervalControl.GetData

        Dim d As New TriggerMetaData()

        If cbOnWorkingDaysOnly.Checked Then
            Dim cal As ScheduleCalendar =
             TryCast(UIUtil.GetSelectedItem(comboCalendar), ScheduleCalendar)
            If cal Is Nothing Then
                err.Add(New clsValidationError(comboCalendar,
                 My.Resources.ctlRunHourly_YouMustSelectACalendarToRunOn))
                Return Nothing
            End If
            d.CalendarId = cal.Id

        End If

        d.Interval = Me.Interval
        d.Period = CInt(IIf(d.Interval = IntervalType.Minute, updnMinutes.Value, updnHours.Value))

        Try
            d.AllowedHours = Me.AllowedHours

        Catch ae As ArgumentException
            err.Add(New clsValidationError(dpStartTime, ae.Message))
            Return Nothing

        End Try

        Return d
    End Function

    ''' <summary>
    ''' Populates the control from the given TriggerMetaData
    ''' </summary>
    ''' <param name="data">The TriggerMetaData to populate the control with</param>
    ''' <param name="sched">The schedule also needed to populate some controls</param>
    Public Sub Populate(ByVal data As TriggerMetaData, ByVal sched As SessionRunnerSchedule) _
     Implements IIntervalControl.Populate
        Dim store As IScheduleStore = sched.Owner.Store

        comboCalendar.Items.Clear()
        For Each cal As ScheduleCalendar In store.GetAllCalendars()
            comboCalendar.Items.Add(cal)
        Next

        If data.CalendarId <> 0 Then
            cbOnWorkingDaysOnly.Checked = True
            comboCalendar.Enabled = True
            comboCalendar.SelectedItem = store.GetCalendar(data.CalendarId)
        Else
            cbOnWorkingDaysOnly.Checked = False
            comboCalendar.Enabled = False
        End If

        If data.Interval = IntervalType.Minute Then
            updnHours.Value = 1
            updnMinutes.Value = data.Period
            radioEveryNMinutes.Checked = True
        Else
            updnHours.Value = data.Period
            updnMinutes.Value = 1
            radioEveryNHours.Checked = True
        End If

        Me.AllowedHours = data.AllowedHours

    End Sub

    ''' <summary>
    ''' Sets the start date needed by some controls
    ''' </summary>
    ''' <param name="d">The Date</param>
    Public Sub SetStartDate(ByVal d As Date) Implements IIntervalControl.SetStartDate
    End Sub

    ''' <summary>
    ''' Gets or sets the read-only state of this control.
    ''' </summary>
    Public Property [ReadOnly]() As Boolean Implements IIntervalControl.ReadOnly
        Get
            Return mReadonly
        End Get
        Set(ByVal value As Boolean)
            mReadonly = value

            radioEveryNHours.AutoCheck = Not value
            radioEveryNMinutes.AutoCheck = Not value

            updnHours.ReadOnly = value
            updnHours.Increment = CInt(IIf(value, 0, 1))

            updnMinutes.ReadOnly = value
            updnMinutes.Increment = CInt(IIf(value, 0, 1))

            clsUserInterfaceUtils.ShowReadOnlyControl(value, dpStartTime, txtStartTime)
            clsUserInterfaceUtils.ShowReadOnlyControl(value, dpEndTime, txtEndTime)

            cbOnWorkingDaysOnly.AutoCheck = Not value
            clsUserInterfaceUtils.ShowReadOnlyControl(value, comboCalendar, txtCalendar)

        End Set
    End Property
    Private mReadonly As Boolean

#End Region

#Region "ctlRunHourly-only members"

    ''' <summary>
    ''' Gets the allowed hours currently set in this control, or null if the time
    ''' set in the control is currently invalid.
    ''' </summary>
    ''' <exception cref="ArgumentException">If the time range specified in this 
    ''' control is currently invalid. See the <see cref="clsTimeRange"/> for more
    ''' details.</exception>
    Public Property AllowedHours() As clsTimeRange
        Get
            Return New clsTimeRange(dpStartTime.Value.TimeOfDay, dpEndTime.Value.TimeOfDay)
        End Get
        Set(ByVal value As clsTimeRange)
            dpStartTime.Value = Today.Add(value.StartTime)
            dpEndTime.Value = Today.Add(value.EndTime)
        End Set
    End Property

    ''' <summary>
    ''' Gets the interval currently set in this control.
    ''' Note that this could be either of <see cref="IntervalType.Hour"/>
    ''' or <see cref="IntervalType.Minute"/> depending on what the user
    ''' last selected in the control
    ''' </summary>
    Public Property Interval() As IntervalType
        Get
            If radioEveryNMinutes.Checked Then Return IntervalType.Minute
            Return IntervalType.Hour
        End Get
        Set(ByVal value As IntervalType)
            If value = IntervalType.Minute Then
                radioEveryNMinutes.Checked = True
            ElseIf value = IntervalType.Hour Then
                radioEveryNHours.Checked = True
            Else
                Throw New ArgumentException(
                 My.Resources.ctlRunHourly_Value, My.Resources.ctlRunHourly_OnlyHoursOrMinutesSupportedByThisControl)
            End If
        End Set
    End Property

#End Region

#Region "UI Event Handlers"

    ''' <summary>
    ''' Handler for data changing in the period text box.
    ''' </summary>
    Private Sub PeriodChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles updnHours.ValueChanged, updnMinutes.ValueChanged
        RaiseScheduleChangeEvent()
    End Sub

    ''' <summary>
    ''' Handles the data changing in either of the date/time pickers.
    ''' </summary>
    Private Sub dpStartTime_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles dpStartTime.ValueChanged, dpEndTime.ValueChanged
        RaiseScheduleChangeEvent()
    End Sub

    ''' <summary>
    ''' Handler for the 'only on working days' checkbox's state being changed
    ''' </summary>
    Private Sub OnWorkingDaysOnlyChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles cbOnWorkingDaysOnly.CheckedChanged
        comboCalendar.Enabled = cbOnWorkingDaysOnly.Checked
        RaiseScheduleChangeEvent()
    End Sub


    ''' <summary>
    ''' Handler for the calendar combo box being changed.
    ''' </summary>
    Private Sub CalendarChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles comboCalendar.SelectedIndexChanged
        RaiseScheduleChangeEvent()
    End Sub


    ''' <summary>
    ''' Handler for the 'every n hours / minutes' radio buttons changing state.
    ''' </summary>
    Private Sub IntervalRadioCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles radioEveryNHours.CheckedChanged, radioEveryNMinutes.CheckedChanged
        updnHours.Enabled = radioEveryNHours.Checked
        updnMinutes.Enabled = radioEveryNMinutes.Checked
        RaiseScheduleChangeEvent()
    End Sub

#End Region

End Class
