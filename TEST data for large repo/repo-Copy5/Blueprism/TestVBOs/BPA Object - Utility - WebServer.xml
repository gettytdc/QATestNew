<process name="Utility - WebServer" version="1.0" narrative="." type="object" runmode="Exclusive" preferredid="560dc3fa-c869-4396-bd14-0608c8fd3cff">
  <appdef>
    <element name="Application Root">
      <id>116a2a74-1b86-49b9-874f-82166156c23c</id>
      <type>Application</type>
      <basetype>Application</basetype>
      <datatype>unknown</datatype>
      <diagnose>False</diagnose>
    </element>
  </appdef>
  <view>
    <camerax>0</camerax>
    <cameray>0</cameray>
    <zoom>1</zoom>
  </view>
  <preconditions />
  <endpoint narrative="" />
  <subsheet subsheetid="ba9d2d3d-934a-4671-b4eb-d427dbebe6e9" type="CleanUp" published="True">
    <name>Clean Up</name>
    <view>
      <camerax>0</camerax>
      <cameray>0</cameray>
      <zoom>1</zoom>
    </view>
  </subsheet>
  <subsheet subsheetid="59169972-49de-497e-91d2-a5e792d4571b" type="Normal" published="True">
    <name>Launch</name>
    <view>
      <camerax>0</camerax>
      <cameray>-13</cameray>
      <zoom>1</zoom>
    </view>
  </subsheet>
  <subsheet subsheetid="180af822-1b53-4b4c-9026-ea63c305201c" type="Normal" published="True">
    <name>Create Certificates</name>
    <view>
      <camerax>0</camerax>
      <cameray>0</cameray>
      <zoom>1</zoom>
    </view>
  </subsheet>
  <stage stageid="4e8cff42-5168-4aec-8d92-590111a4866e" name="Start" type="Start">
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>-15</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <onsuccess>672ad929-f2b0-4cfa-a423-38cbb6a09049</onsuccess>
  </stage>
  <stage stageid="4d58b7f7-3bd7-4e77-87df-f3caae4da416" name="Stage1" type="ProcessInfo">
    <narrative>
    </narrative>
    <displayx>-135</displayx>
    <displayy>-75</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <references>
      <reference>System.Data.dll</reference>
      <reference>System.Xml.dll</reference>
      <reference>System.Drawing.dll</reference>
      <reference>System.Windows.Forms.dll</reference>
    </references>
    <imports>
      <import>System</import>
      <import>System.Drawing</import>
      <import>System.Net</import>
      <import>System.Threading</import>
      <import>System.Windows.Forms</import>
      <import>System.Text</import>
      <import>System.IO</import>
      <import>Microsoft.VisualBasic</import>
      <import>System.Collections.Generic</import>
      <import>System.Collections.Specialized</import>
      <import>System.Security.Principal</import>
      <import>System.Diagnostics</import>
      <import>System.Security.Cryptography.X509Certificates</import>
      <import>System.Reflection</import>
      <import>System.Runtime.Interopservices</import>
      <import>System.ComponentModel</import>
      <import>System.Data</import>
    </imports>
    <language>visualbasic</language>
    <globalcode><![CDATA[]]></globalcode>
    <code><![CDATA[Private m_Messages As Queue(Of String)
Private m_UserInterface As UserInterface
Private m_Server As HttpWebServer

Public Sub StartServer(ByVal prefix As String)
	If String.IsNullOrEmpty(prefix) Then Throw New Exception("Invalid Prefix")

	m_Messages = New Queue(Of String)
	m_UserInterface = New UserInterface(m_Messages)

	m_Server = New HttpWebServer(prefix, Me, m_Messages)
	AddHandler m_UserInterface.FormClosed, AddressOf StopServer

	m_UserInterface.Show()
End Sub

Private Sub StopServer(ByVal sender As Object, ByVal e As FormClosedEventArgs)
	If m_Server IsNot Nothing Then
		m_Server.Finish()
	End If
End Sub

Private Sub CreateCertificates(ByVal prefix As String, ByVal password As String)
	Dim uri As New Uri(prefix)
	Dim cm As New CertificateManager()
	cm.Create(uri, password)
End Sub

Private Class UserInterface : Inherits Form

	Private m_Running As Boolean
	Private m_Messages As Queue(Of String)

	Private WithEvents m_Clear As Button
	Private WithEvents m_Text As TextBox
	Private FlowLayout As FlowLayoutPanel

	Public Sub New(ByVal messages As Queue(Of String))
		InitializeComponent()
		SetIcon()
		m_Messages = messages
		m_Running = True
	End Sub

	Private Sub InitializeComponent()
		Me.m_Clear = New System.Windows.Forms.Button
		Me.m_Text = New System.Windows.Forms.TextBox
		Me.FlowLayout = New System.Windows.Forms.FlowLayoutPanel
		Me.FlowLayout.SuspendLayout()
		Me.SuspendLayout()
		'
		'm_Clear
		'
		Me.m_Clear.AutoSize = True
		Me.m_Clear.Location = New System.Drawing.Point(206, 3)
		Me.m_Clear.Name = "m_Clear"
		Me.m_Clear.Size = New System.Drawing.Size(75, 23)
		Me.m_Clear.TabIndex = 1
		Me.m_Clear.Text = "Clear"
		'
		'm_Text
		'
		Me.m_Text.Dock = System.Windows.Forms.DockStyle.Fill
		Me.m_Text.Location = New System.Drawing.Point(0, 0)
		Me.m_Text.Font = New System.Drawing.Font("Courier New", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
		Me.m_Text.Multiline = True
		Me.m_Text.Name = "m_Text"
		Me.m_Text.ScrollBars = ScrollBars.Vertical
		Me.m_Text.Size = New System.Drawing.Size(284, 262)
		Me.m_Text.TabIndex = 1
		'
		'FlowLayout
		'
		Me.FlowLayout.AutoSize = True
		Me.FlowLayout.Controls.Add(Me.m_Clear)
		Me.FlowLayout.Dock = System.Windows.Forms.DockStyle.Bottom
		Me.FlowLayout.FlowDirection = System.Windows.Forms.FlowDirection.RightToLeft
		Me.FlowLayout.Location = New System.Drawing.Point(0, 233)
		Me.FlowLayout.Name = "FlowLayout"
		Me.FlowLayout.Size = New System.Drawing.Size(284, 29)
		Me.FlowLayout.TabIndex = 0
		'
		'UserInterface
		'
		Me.ClientSize = New System.Drawing.Size(600, 800)
		Me.Controls.Add(Me.m_Text)
		Me.Controls.Add(Me.FlowLayout)
		Me.Name = "UserInterface"
		Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
		Me.Text = "Blue Prism - Test Web Server"
		Me.FlowLayout.ResumeLayout(False)
		Me.FlowLayout.PerformLayout()
		Me.ResumeLayout(False)
		Me.PerformLayout()

	End Sub

	Private Sub SetIcon()
		Try
			Me.Icon = Icon.ExtractAssociatedIcon(Process.GetCurrentProcess().MainModule.FileName)
		Catch
		End Try
	End Sub

	Private Sub Form_HandleCreated(ByVal sender As Object, ByVal e As EventArgs) Handles Me.HandleCreated
		Dim t As New Thread(AddressOf UpdateForm)
		t.Start()
	End Sub

	Private Sub UpdateForm()
		Try
			While m_Running
				If m_Messages.Count > 0 Then
					Dim txt As String = Nothing
					SyncLock m_Messages
						txt = m_Messages.Dequeue()
					End SyncLock
					AppendText(txt)
				Else
					Thread.Sleep(100)
				End If
			End While
		Catch
		End Try
	End Sub

	Private Sub AppendText(ByVal txt As String)
		If m_Text.InvokeRequired Then
			m_Text.Invoke(New Action(Of String)(AddressOf AppendText), txt)
		Else
			m_Text.AppendText(txt)
		End If
	End Sub

	Private Sub Form_Closed(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Closed
		m_Running = False
	End Sub

	Private Sub Clear_Click(ByVal sender As Object, ByVal e As EventArgs) Handles m_Clear.Click
		m_Text.Clear()
	End Sub

End Class

Private Class HttpWebServer

	Private m_Listener As HttpListener
	Private m_Messages As Queue(Of String)
	Private m_VBO As Utility___WebServer

	Public Sub New(ByVal prefix As String, ByVal vbo As Utility___WebServer, ByVal messages As Queue(Of String))
		m_VBO = vbo
		m_Messages = messages

		m_Listener = New HttpListener()
		m_Listener.Prefixes.Add(prefix)
		m_Listener.AuthenticationSchemeSelectorDelegate = New AuthenticationSchemeSelector(AddressOf AuthenticationScheme)
		Dim t As New Thread(AddressOf Listen)
		t.Start()
	End Sub

	Private Function AuthenticationScheme(ByVal req As HttpListenerRequest) As AuthenticationSchemes
		Dim authType As String = Nothing
		m_VBO.AuthenticationType(req.RawUrl, authType)
		Return DirectCast(System.[Enum].Parse(GetType(AuthenticationSchemes), authType), AuthenticationSchemes)
	End Function

	Private Sub Listen()
		m_Listener.Start()
		WriteTime("Webserver Started")
		While (m_Listener.IsListening)
			Dim ctx As HttpListenerContext = Nothing
			Dim req As HttpListenerRequest = Nothing
			Dim res As HttpListenerResponse = Nothing
			Try
				ctx = m_Listener.GetContext()
				req = ctx.Request
				res = ctx.Response

				WriteTime("Request")

				WriteIndent("Method:", req.HttpMethod)

				Dim url As String = req.RawUrl
				WriteIndent("URL:", url)

				Dim user As IPrincipal = ctx.User
				If user IsNot Nothing Then
					Dim id As HttpListenerBasicIdentity = TryCast(user.Identity, HttpListenerBasicIdentity)
					If id IsNot Nothing Then
						WriteIndent("User:", id.Name)
						WriteIndent("Password:", id.Password)
					End If
				End If

				Dim cert As X509Certificate2 = req.GetClientCertificate()
				If cert IsNot Nothing Then
					WriteLine("Certificate:")
					WriteIndent("Subject:", cert.Subject)
					WriteIndent("Issuer:", cert.Issuer)
				End If

				DisplayHeaders(req.Headers)

				Dim rq As String = Nothing
				Using sr As New StreamReader(req.InputStream)
					rq = sr.ReadToEnd()
				End Using
				WriteIndent("Content:", rq)

				WriteTime("Response")
				Dim rs As String = Nothing
				Dim dt As DataTable = HeadersToDataTable(req.Headers)
				m_VBO.Response(url, rq, dt, res.StatusCode, rs)
				WriteIndent("Status:", res.StatusCode)

				Using sw As New StreamWriter(res.OutputStream)
					sw.Write(rs)
				End Using

				DisplayHeaders(res.Headers)

				WriteIndent("Content:", rs)
			Catch ex As Exception
				WriteLine(ex.ToString())
			Finally
				If res IsNot Nothing Then
					res.OutputStream.Close()
				End If
			End Try
		End While
	End Sub

	Private Function HeadersToDataTable(ByVal headers As NameValueCollection) As DataTable
		Dim dt As New DataTable
		For Each key As String In headers.AllKeys
			dt.Columns.Add(key)
		Next

		Dim dr As DataRow = dt.NewRow
		For Each key As String In headers.AllKeys
			Dim values As String() = headers.GetValues(key)
			If values.Length > 0 Then
				dr(key) = values(0)
			End If
		Next
		dt.Rows.Add(dr)

		Return dt
	End Function

	Private Sub DisplayHeaders(ByVal headers As NameValueCollection)
		Dim sb As New StringBuilder()

		Dim first As Boolean = True
		For Each key As String In headers.AllKeys
			Dim values As String() = headers.GetValues(key)
			If values.Length > 0 Then
				If first Then
					sb.Append("Headers:".PadRight(pad))
				Else
					sb.Append(New String(" ", pad))
				End If
				sb.Append(key)
				For Each value As String In values
					sb.Append(": ")
					sb.Append(value)
				Next
				sb.AppendLine()
			End If
			first = False
		Next
		WriteLine(sb.ToString)
	End Sub

	Private Sub WriteTime(ByVal txt As String)
		txt = String.Format("{0} - {1}", DateTime.Now, txt)
		Dim sep As New String("-", 80)
		WriteLine(sep)
		WriteLine(txt)
	End Sub

	Private Sub WriteLine(ByVal txt As String)
		SyncLock m_Messages
			m_Messages.Enqueue(String.Format("{0}{1}", txt, vbCrLf))
		End SyncLock
	End Sub

	Const pad As Integer = 10
	Private Sub WriteIndent(ByVal name As String, ByVal txt As String)
		txt = String.Format("{0}{1}", name.PadRight(pad), txt)
		txt = txt.Replace(vbLf, vbLf & New String(" ", pad))
		WriteLine(txt)
	End Sub

	Public Sub Finish()
		m_Listener.Stop()
		m_Listener.Close()
	End Sub
End Class

Private Class CertificateManager

	Private m_Endpoint As IPEndPoint
	Private m_RootCertificate As X509Certificate2
	Private m_ServerCertificate As X509Certificate2
	Private m_ClientCertificate As X509Certificate2

	Public Sub New()
	End Sub
	Public Sub Create(ByVal uri As Uri, ByVal password As String)
		Const Issuer As String = "Blue Prism"
		m_RootCertificate = CreateSelfSignedCertificate(Issuer, CertificateType.RootCertificate, password)
		InstallRoot(m_RootCertificate)
		m_ServerCertificate = CreateCertificate(uri.Host, Issuer, m_RootCertificate, CertificateType.ServerAuthentication, password)
		m_ClientCertificate = CreateCertificate(Environment.UserName, Issuer, m_RootCertificate, CertificateType.ClientAuthentication, password)

		Dim appID As Guid = Guid.NewGuid
		Dim address As IPAddress = Dns.GetHostAddresses(uri.Host)(0)
		m_Endpoint = New IPEndPoint(address, uri.Port)
		BindCertificate(m_Endpoint, m_ServerCertificate.GetCertHash(), StoreName.My, appID)
	End Sub

	Public Sub Cleanup()
		Try
			DeleteBinding(m_Endpoint)
			DeleteCertificate(m_ServerCertificate)
			DeleteCertificate(m_RootCertificate)
		Catch ex As Exception
		End Try
	End Sub

	Private Sub InstallRoot(ByVal cert As X509Certificate2)
		Dim store As New X509Store(StoreName.Root, StoreLocation.LocalMachine)
		Try
			store.Open(OpenFlags.ReadWrite)
			store.Add(cert)
		Finally
			store.Close()
		End Try
	End Sub

	Private Sub DeleteCertificate(ByVal cert As X509Certificate2)
		Dim store As New X509Store(StoreName.My, StoreLocation.LocalMachine)
		Try
			store.Open(OpenFlags.ReadWrite Or OpenFlags.IncludeArchived)
			store.Remove(cert)
		Finally
			store.Close()
		End Try
	End Sub

	Private Enum X500NameFlags
		XCN_CERT_NAME_STR_NONE = 0
	End Enum

	Private Enum X509KeySpec
		XCN_AT_SIGNATURE = 2
	End Enum

	Private Enum X509PrivateKeyExportFlags
		XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2
	End Enum

	Private Enum ObjectIdGroupId
		XCN_CRYPT_HASH_ALG_OID_GROUP_ID = 1
	End Enum

	Private Enum ObjectIdPublicKeyFlags
		XCN_CRYPT_OID_INFO_PUBKEY_ANY = 0
	End Enum

	Private Enum AlgorithmFlags
		AlgorithmFlagsNone = 0
	End Enum

	Private Enum X509CertificateEnrollmentContext
		ContextMachine = 2
	End Enum

	Private Enum InstallResponseRestrictionFlags
		AllowUntrustedCertificate = 2
	End Enum

	Private Enum EncodingType
		XCN_CRYPT_STRING_BASE64 = 1
		XCN_CRYPT_STRING_HEX = 4
	End Enum

	Private Enum PFXExportOptions
		PFXExportChainWithRoot = 2
	End Enum

	Private Enum X509PrivateKeyVerify
		VerifyNone = 0
	End Enum

	Private Enum X509KeyUsageFlags
		XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128
		XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32
		XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16
		XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = 4
		XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2
		XCN_CERT_CRL_SIGN_KEY_USAGE = 2
	End Enum

	Private Enum X509PrivateKeyUsageFlags
		XCN_NCRYPT_ALLOW_ALL_USAGES = 16777215
	End Enum

	Private Enum CertificateType
		RootCertificate
		ServerAuthentication
		ClientAuthentication
	End Enum

	Private Function CreateObject(ByVal progid As String) As Object
		Return CreateObject(progid, Nothing)
	End Function

	Private Function CreateObject(ByVal progid As String, ByRef t As Type) As Object
		t = Type.GetTypeFromProgID(progid)
		Return Activator.CreateInstance(t)
	End Function

	Private Sub SetProperty(ByVal t As Type, ByVal name As String, ByVal o As Object, ByVal value As Object)
		t.InvokeMember(name, BindingFlags.PutDispProperty, Nothing, o, New Object() {value})
	End Sub

	Private Function CreateSelfSignedCertificate(ByVal subjectName As String, ByVal type As CertificateType, ByVal password As String) As X509Certificate2
		Return CreateCertificate(subjectName, subjectName, Nothing, type, password)
	End Function

	Private Function CreateCertificate(ByVal subjectName As String, ByVal issuerName As String, ByVal signer As X509Certificate2, ByVal type As CertificateType, ByVal password As String) As X509Certificate2
		Dim sname As Object = CreateObject("X509Enrollment.CX500DistinguishedName")
		sname.Encode("CN=" & subjectName, X500NameFlags.XCN_CERT_NAME_STR_NONE)

		Dim iname As Object = CreateObject("X509Enrollment.CX500DistinguishedName")
		iname.Encode("CN=" & issuerName, X500NameFlags.XCN_CERT_NAME_STR_NONE)

		Dim privateKey As Object = CreateObject("X509Enrollment.CX509PrivateKey")
		privateKey.ProviderName = "Microsoft Base Cryptographic Provider v1.0"
		privateKey.MachineContext = True
		privateKey.Length = 2048
		privateKey.KeySpec = X509KeySpec.XCN_AT_SIGNATURE
		privateKey.KeyUsage = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_ALL_USAGES
		privateKey.ExportPolicy = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG
		privateKey.Create()

		Dim hashobj As Object = CreateObject("X509Enrollment.CObjectId")
		hashobj.InitializeFromAlgorithmName(ObjectIdGroupId.XCN_CRYPT_HASH_ALG_OID_GROUP_ID, ObjectIdPublicKeyFlags.XCN_CRYPT_OID_INFO_PUBKEY_ANY, AlgorithmFlags.AlgorithmFlagsNone, "SHA512")


		Dim oidlist As Object = CreateObject("X509Enrollment.CObjectIds")
		Select Case type
			Case CertificateType.ServerAuthentication
				Dim oid As Object = CreateObject("X509Enrollment.CObjectId")
				oid.InitializeFromValue("1.3.6.1.5.5.7.3.1")
				oidlist.Add(oid)
			Case CertificateType.ClientAuthentication
				Dim oid As Object = CreateObject("X509Enrollment.CObjectId")
				oid.InitializeFromValue("1.3.6.1.5.5.7.3.2")
				oidlist.Add(oid)
			Case CertificateType.RootCertificate
				Dim oid1 As Object = CreateObject("X509Enrollment.CObjectId")
				oid1.InitializeFromValue("1.3.6.1.5.5.7.3.1")
				oidlist.Add(oid1)
				Dim oid2 As Object = CreateObject("X509Enrollment.CObjectId")
				oid2.InitializeFromValue("1.3.6.1.5.5.7.3.2")
				oidlist.Add(oid2)
		End Select

		Dim eku As Object = CreateObject("X509Enrollment.CX509ExtensionEnhancedKeyUsage")
		eku.InitializeEncode(oidlist)

		Dim keyUsage As Object = CreateObject("X509Enrollment.CX509ExtensionKeyUsage")
		Select Case type
			Case CertificateType.RootCertificate
				keyUsage.InitializeEncode( _
				X509KeyUsageFlags.XCN_CERT_KEY_CERT_SIGN_KEY_USAGE Or _
				X509KeyUsageFlags.XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE Or _
				X509KeyUsageFlags.XCN_CERT_CRL_SIGN_KEY_USAGE)
			Case Else
				keyUsage.InitializeEncode( _
				X509KeyUsageFlags.XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE Or _
				X509KeyUsageFlags.XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE Or _
				X509KeyUsageFlags.XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE)
		End Select

		Dim certType As Type = Nothing
		Dim cert As Object = CreateObject("X509Enrollment.CX509CertificateRequestCertificate", certType)
		cert.InitializeFromPrivateKey(X509CertificateEnrollmentContext.ContextMachine, privateKey, "")
		SetProperty(certType, "Subject", cert, sname)
		SetProperty(certType, "Issuer", cert, iname)
		Dim now As DateTime = DateTime.Now
		cert.NotBefore = now.AddDays(-1)
		cert.NotAfter = now.AddDays(1)
		cert.X509Extensions.Add(eku)
		SetProperty(certType, "HashAlgorithm", cert, hashobj)
		cert.X509Extensions.Add(keyUsage)

		If signer IsNot Nothing Then
			Dim signerCertificate As Object = CreateObject("X509Enrollment.CSignerCertificate")
			signerCertificate.Initialize(True, X509PrivateKeyVerify.VerifyNone, EncodingType.XCN_CRYPT_STRING_HEX, signer.GetRawCertDataString())
			SetProperty(certType, "SignerCertificate", cert, signerCertificate)
		End If
		cert.Encode()

		Dim enroll As Object = CreateObject("X509Enrollment.CX509Enrollment")
		enroll.InitializeFromRequest(cert)
		enroll.CertificateFriendlyName = subjectName
		Dim csr As String = enroll.CreateRequest()
		enroll.InstallResponse(InstallResponseRestrictionFlags.AllowUntrustedCertificate, csr, EncodingType.XCN_CRYPT_STRING_BASE64, password)
		Dim base64encoded As String = enroll.CreatePFX(password, PFXExportOptions.PFXExportChainWithRoot)

		Return New X509Certificate2(Convert.FromBase64String(base64encoded), password, X509KeyStorageFlags.Exportable)
	End Function

	Private Shared ReadOnly HttpApiVersion As New HTTPAPI_VERSION(1, 0)

	<DllImport("httpapi.dll", SetLastError:=True)> _
	Private Shared Function HttpInitialize(ByVal version As HTTPAPI_VERSION, ByVal flags As Integer, ByVal pReserved As IntPtr) As Integer
	End Function

	<DllImport("httpapi.dll", SetLastError:=True)> _
	Private Shared Function HttpSetServiceConfiguration(ByVal serviceIntPtr As IntPtr, ByVal configId As HTTP_SERVICE_CONFIG_ID, ByVal pConfigInformation As IntPtr, ByVal configInformationLength As Integer, ByVal pOverlapped As IntPtr) As Integer
	End Function

	<DllImport("httpapi.dll", SetLastError:=True)> _
	Private Shared Function HttpDeleteServiceConfiguration(ByVal serviceIntPtr As IntPtr, ByVal configId As HTTP_SERVICE_CONFIG_ID, ByVal pConfigInformation As IntPtr, ByVal configInformationLength As Integer, ByVal pOverlapped As IntPtr) As Integer
	End Function

	<DllImport("httpapi.dll", SetLastError:=True)> _
	Private Shared Function HttpTerminate(ByVal Flags As Integer, ByVal pReserved As IntPtr) As Integer
	End Function

	<DllImport("httpapi.dll", SetLastError:=True)> _
	Private Shared Function HttpQueryServiceConfiguration(ByVal serviceIntPtr As IntPtr, ByVal configId As HTTP_SERVICE_CONFIG_ID, ByVal pInputConfigInfo As IntPtr, ByVal inputConfigInfoLength As Integer, ByVal pOutputConfigInfo As IntPtr, ByVal outputConfigInfoLength As Integer, _
	 <[Optional]()> ByRef pReturnLength As Integer, ByVal pOverlapped As IntPtr) As Integer
	End Function

	Private Enum HTTP_SERVICE_CONFIG_ID
		HttpServiceConfigIPListenList = 0
		HttpServiceConfigSSLCertInfo
		HttpServiceConfigUrlAclInfo
		HttpServiceConfigMax
	End Enum

	<StructLayout(LayoutKind.Sequential)> _
	Private Structure HTTP_SERVICE_CONFIG_SSL_SET
		Public KeyDesc As HTTP_SERVICE_CONFIG_SSL_KEY
		Public ParamDesc As HTTP_SERVICE_CONFIG_SSL_PARAM
	End Structure

	<StructLayout(LayoutKind.Sequential)> _
	Private Structure HTTP_SERVICE_CONFIG_SSL_KEY
		Public pIpPort As IntPtr

		Public Sub New(ByVal pIpPort As IntPtr)
			Me.pIpPort = pIpPort
		End Sub
	End Structure

	<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)> _
	Private Structure HTTP_SERVICE_CONFIG_SSL_PARAM
		Public SslHashLength As Integer
		Public pSslHash As IntPtr
		Public AppId As Guid
		<MarshalAs(UnmanagedType.LPWStr)> _
		Public pSslCertStoreName As String
		Public DefaultCertCheckMode As Integer
		Public DefaultRevocationFreshnessTime As Integer
		Public DefaultRevocationUrlRetrievalTimeout As Integer
		<MarshalAs(UnmanagedType.LPWStr)> _
		Public pDefaultSslCtlIdentifier As String
		<MarshalAs(UnmanagedType.LPWStr)> _
		Public pDefaultSslCtlStoreName As String
		Public DefaultFlags As Integer
	End Structure

	<StructLayout(LayoutKind.Sequential, Pack:=2)> _
	Private Structure HTTPAPI_VERSION
		Public HttpApiMajorVersion As UShort
		Public HttpApiMinorVersion As UShort

		Public Sub New(ByVal majorVersion As UShort, ByVal minorVersion As UShort)
			HttpApiMajorVersion = majorVersion
			HttpApiMinorVersion = minorVersion
		End Sub
	End Structure

	<StructLayout(LayoutKind.Sequential)> _
	Private Structure HTTP_SERVICE_CONFIG_SSL_QUERY
		Public QueryDesc As HTTP_SERVICE_CONFIG_QUERY_TYPE
		Public KeyDesc As HTTP_SERVICE_CONFIG_SSL_KEY
		Public dwToken As Integer
	End Structure

	Private Enum HTTP_SERVICE_CONFIG_QUERY_TYPE
		HttpServiceConfigQueryExact = 0
		HttpServiceConfigQueryNext
		HttpServiceConfigQueryMax
	End Enum

	Private Const HTTP_INITIALIZE_CONFIG As Integer = &H2
	Private Const HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT As Integer = &H2
	Private Const HTTP_SERVICE_CONFIG_SSL_FLAG_NO_RAW_FILTER As Integer = &H4
	Private Const NOERROR As Integer = 0
	Private Const ERROR_INSUFFICIENT_BUFFER As Integer = 122
	Private Const ERROR_ALREADY_EXISTS As Integer = 183
	Private Const ERROR_FILE_NOT_FOUND As Integer = 2
	Private Const ERROR_NO_MORE_ITEMS As Integer = 259

	Private Class SslCertificateInfo
		Public Property Hash() As Byte()
			Get
				Return m_Hash
			End Get
			Set(ByVal value As Byte())
				m_Hash = value
			End Set
		End Property
		Private m_Hash As Byte()
		Public Property AppId() As Guid
			Get
				Return m_AppId
			End Get
			Set(ByVal value As Guid)
				m_AppId = value
			End Set
		End Property
		Private m_AppId As Guid
		Public Property StoreName() As String
			Get
				Return m_StoreName
			End Get
			Set(ByVal value As String)
				m_StoreName = value
			End Set
		End Property
		Private m_StoreName As String
		Public Property IpPort() As IPEndPoint
			Get
				Return m_IpPort
			End Get
			Set(ByVal value As IPEndPoint)
				m_IpPort = value
			End Set
		End Property
		Private m_IpPort As IPEndPoint
	End Class

	Private Function CreateSockaddrStructure(ByVal ipEndPoint As IPEndPoint) As GCHandle
		Dim socketAddress As SocketAddress = ipEndPoint.Serialize()
		Dim sockAddrStructureBytes As Byte() = New Byte(socketAddress.Size - 1) {}
		Dim sockAddrHandle As GCHandle = GCHandle.Alloc(sockAddrStructureBytes, GCHandleType.Pinned)
		For i As Integer = 0 To socketAddress.Size - 1
			sockAddrStructureBytes(i) = socketAddress(i)
		Next
		Return sockAddrHandle
	End Function

	Public Sub BindCertificate(ByVal ipPort As IPEndPoint, ByVal hash As Byte(), ByVal storeName As StoreName, ByVal appId As Guid)
		If ipPort Is Nothing Then
			Throw New ArgumentNullException("ipPort")
		End If
		If hash Is Nothing Then
			Throw New ArgumentNullException("hash")
		End If

		Dim retVal As Integer = HttpInitialize(HttpApiVersion, HTTP_INITIALIZE_CONFIG, IntPtr.Zero)
		ThrowWin32ExceptionIfError(retVal)

		Try

			Dim configSslSet As New HTTP_SERVICE_CONFIG_SSL_SET()

			Dim sockAddrHandle As GCHandle = CreateSockaddrStructure(ipPort)
			Dim pIpPort As IntPtr = sockAddrHandle.AddrOfPinnedObject()
			Dim httpServiceConfigSslKey As New HTTP_SERVICE_CONFIG_SSL_KEY(pIpPort)
			Dim configSslParam As New HTTP_SERVICE_CONFIG_SSL_PARAM()


			Dim handleHash As GCHandle = GCHandle.Alloc(hash, GCHandleType.Pinned)
			configSslParam.AppId = appId
			configSslParam.DefaultCertCheckMode = 0
			configSslParam.DefaultFlags = HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT
			configSslParam.DefaultRevocationFreshnessTime = 0
			configSslParam.DefaultRevocationUrlRetrievalTimeout = 0
			configSslParam.pSslCertStoreName = storeName.ToString()
			configSslParam.pSslHash = handleHash.AddrOfPinnedObject()
			configSslParam.SslHashLength = hash.Length
			configSslSet.ParamDesc = configSslParam
			configSslSet.KeyDesc = httpServiceConfigSslKey

			Dim pInputConfigInfo As IntPtr = Marshal.AllocCoTaskMem(Marshal.SizeOf(GetType(HTTP_SERVICE_CONFIG_SSL_SET)))
			Marshal.StructureToPtr(configSslSet, pInputConfigInfo, False)

			Try
				retVal = HttpSetServiceConfiguration(IntPtr.Zero, HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSSLCertInfo, pInputConfigInfo, Marshal.SizeOf(configSslSet), IntPtr.Zero)

				If ERROR_ALREADY_EXISTS <> retVal Then
					ThrowWin32ExceptionIfError(retVal)
				Else
					retVal = HttpDeleteServiceConfiguration(IntPtr.Zero, HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSSLCertInfo, pInputConfigInfo, Marshal.SizeOf(configSslSet), IntPtr.Zero)
					ThrowWin32ExceptionIfError(retVal)

					retVal = HttpSetServiceConfiguration(IntPtr.Zero, HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSSLCertInfo, pInputConfigInfo, Marshal.SizeOf(configSslSet), IntPtr.Zero)
					ThrowWin32ExceptionIfError(retVal)
				End If
			Finally
				Marshal.FreeCoTaskMem(pInputConfigInfo)
				If handleHash.IsAllocated Then
					handleHash.Free()
				End If
				If sockAddrHandle.IsAllocated Then
					sockAddrHandle.Free()
				End If
			End Try

		Finally
			HttpTerminate(HTTP_INITIALIZE_CONFIG, IntPtr.Zero)
		End Try
	End Sub

	Public Sub DeleteBinding(ByVal ipPort As IPEndPoint)
		Dim retVal As Integer = HttpInitialize(HttpApiVersion, HTTP_INITIALIZE_CONFIG, IntPtr.Zero)
		ThrowWin32ExceptionIfError(retVal)

		Try
			Dim configSslSet As New HTTP_SERVICE_CONFIG_SSL_SET()

			Dim sockAddrHandle As GCHandle = CreateSockaddrStructure(ipPort)
			Dim pIpPort As IntPtr = sockAddrHandle.AddrOfPinnedObject()
			Dim httpServiceConfigSslKey As New HTTP_SERVICE_CONFIG_SSL_KEY(pIpPort)
			configSslSet.KeyDesc = httpServiceConfigSslKey

			Dim pInputConfigInfo As IntPtr = Marshal.AllocCoTaskMem(Marshal.SizeOf(GetType(HTTP_SERVICE_CONFIG_SSL_SET)))
			Marshal.StructureToPtr(configSslSet, pInputConfigInfo, False)

			Try
				retVal = HttpDeleteServiceConfiguration(IntPtr.Zero, HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSSLCertInfo, pInputConfigInfo, Marshal.SizeOf(configSslSet), IntPtr.Zero)
				ThrowWin32ExceptionIfError(retVal)
			Finally
				Marshal.FreeCoTaskMem(pInputConfigInfo)
				If sockAddrHandle.IsAllocated Then
					sockAddrHandle.Free()
				End If
			End Try
		Finally
			HttpTerminate(HTTP_INITIALIZE_CONFIG, IntPtr.Zero)
		End Try
	End Sub

	Private Shared Sub ThrowWin32ExceptionIfError(ByVal retVal As Integer)
		If NOERROR <> retVal Then
			Throw New Win32Exception(Convert.ToInt32(retVal))
		End If
	End Sub
End Class]]></code>
  </stage>
  <stage stageid="2fa6da15-ba0d-4b7f-8c6d-acb7f22707ab" name="Clean Up" type="SubSheetInfo">
    <subsheetid>ba9d2d3d-934a-4671-b4eb-d427dbebe6e9</subsheetid>
    <narrative>
    </narrative>
    <displayx>-195</displayx>
    <displayy>-105</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="cf77d892-7fe8-4ba2-a6e7-829acad0508e" name="Start" type="Start">
    <subsheetid>ba9d2d3d-934a-4671-b4eb-d427dbebe6e9</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>-75</displayx>
    <displayy>-120</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <onsuccess>dafcba4e-2ac2-4eb5-9b40-c9c8b4749073</onsuccess>
  </stage>
  <stage stageid="dafcba4e-2ac2-4eb5-9b40-c9c8b4749073" name="End" type="End">
    <subsheetid>ba9d2d3d-934a-4671-b4eb-d427dbebe6e9</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>-75</displayx>
    <displayy>-90</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="672ad929-f2b0-4cfa-a423-38cbb6a09049" name="End1" type="End">
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>-15</displayx>
    <displayy>-45</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="768e1ae6-062f-4735-aa33-bc6d52512d2d" name="Launch" type="SubSheetInfo">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <narrative>
    </narrative>
    <displayx>-135</displayx>
    <displayy>-75</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="9a4e4be0-bcdc-4aae-a9cb-72148fd41b27" name="Start" type="Start">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>15</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="Prefix" narrative="The prefix that the web server uses e.g. &quot;http://localhost:9090/&quot;" stage="Prefix" />
    </inputs>
    <onsuccess>842efe05-9d37-4712-925c-9bb3998a6ca6</onsuccess>
  </stage>
  <stage stageid="842efe05-9d37-4712-925c-9bb3998a6ca6" name="Launch" type="Code">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>15</displayx>
    <displayy>15</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="Prefix" expr="[Prefix]" />
    </inputs>
    <onsuccess>ea0576ed-559c-4908-a7af-f10d48ba4c28</onsuccess>
    <code><![CDATA[StartServer(Prefix)]]></code>
  </stage>
  <stage stageid="bd30061c-9a9e-4472-be9d-944babb36f1f" name="Response" type="Code">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>315</displayx>
    <displayy>15</displayy>
    <displaywidth>120</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="URL" expr="&quot;&quot;" />
      <input type="text" name="Input" expr="&quot;&quot;" />
      <input type="collection" name="Headers" expr="[Coll1]" />
    </inputs>
    <outputs>
      <output type="number" name="Status" stage="Prefix" />
      <output type="text" name="Output" stage="Prefix" />
    </outputs>
    <onsuccess>41e54768-8aeb-4cc7-a3e4-52554f29d66b</onsuccess>
    <code><![CDATA['Every other minute simulate invalid access token
Dim now As DateTime = DateTime.Now
Dim Token As String = Convert.ToBase64String(BitConverter.GetBytes(now.Hour*60 + now.Minute))

Select Case URL
  Case "/request"
    Output = "{" & vbCrLf & _
             """scope"":""default""," & vbCrLf & _
             """token_type"":""bearer""," & vbCrLf & _
             """expires_in"":60," & vbCrLf & _
             """access_token"":""" & Token & """" & vbCrLf & _
             "}"
   Case "/resource/1"
     Dim Bearer As String = ""
     Try
        Bearer = Headers.Rows(0)("Authorization").Split(" ")(1)
     Catch
     End Try
     If Token = Bearer Then
       Output = "{""Reply"":""Hello World!""}"
     Else
       Status = 401
     End If
End Select]]></code>
  </stage>
  <stage stageid="f2eb30d8-d7b7-4c80-a498-b3fe63d3bf36" name="Prefix" type="Data">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>165</displayx>
    <displayy>-105</displayy>
    <displaywidth>180</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>text</datatype>
    <initialvalue xml:space="preserve">https://localhost:9090/</initialvalue>
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="fe9c8625-e008-4979-b69f-7e816458454c" name="AuthenticationType" type="Code">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>150</displayx>
    <displayy>15</displayy>
    <displaywidth>120</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="URL" expr="&quot;&quot;" />
    </inputs>
    <outputs>
      <output type="text" name="Output" stage="Prefix" />
    </outputs>
    <onsuccess>133c5b56-d778-4e1b-9f9f-7d58f3e2aa21</onsuccess>
    <code><![CDATA[Dim authType As AuthenticationSchemes
Select Case URL
  Case "/request"
    authType = AuthenticationSchemes.Basic
  Case "/resource/1"
    authType = AuthenticationSchemes.Anonymous
  Case Else
    authType = AuthenticationSchemes.None
End Select

Output = authType.ToString()]]></code>
  </stage>
  <stage stageid="ea0576ed-559c-4908-a7af-f10d48ba4c28" name="End2" type="End">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>15</displayx>
    <displayy>120</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="4da6cada-cf0f-4b3d-873a-7e6a4de701b2" name="anchor1" type="Anchor">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>315</displayx>
    <displayy>-45</displayy>
    <displaywidth>10</displaywidth>
    <displayheight>10</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <onsuccess>bd30061c-9a9e-4472-be9d-944babb36f1f</onsuccess>
  </stage>
  <stage stageid="000210eb-01c6-4b8f-918f-23f3e43d741c" name="anchor2" type="Anchor">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>150</displayx>
    <displayy>-45</displayy>
    <displaywidth>10</displaywidth>
    <displayheight>10</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <onsuccess>fe9c8625-e008-4979-b69f-7e816458454c</onsuccess>
  </stage>
  <stage stageid="133c5b56-d778-4e1b-9f9f-7d58f3e2aa21" name="End3" type="End">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>150</displayx>
    <displayy>120</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="41e54768-8aeb-4cc7-a3e4-52554f29d66b" name="End4" type="End">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>315</displayx>
    <displayy>120</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="f77e22fd-17f0-4139-b2b4-62f8a668e396" name="Create Certificates" type="SubSheetInfo">
    <subsheetid>180af822-1b53-4b4c-9026-ea63c305201c</subsheetid>
    <narrative>
    </narrative>
    <displayx>-195</displayx>
    <displayy>-105</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="83156ee2-c24d-46a0-a496-d101ff7c6f1b" name="Start" type="Start">
    <subsheetid>180af822-1b53-4b4c-9026-ea63c305201c</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>15</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="Prefix" narrative="The prefix that the web server uses e.g. &quot;http://localhost:9090/&quot;" stage="Prefix" />
      <input type="password" name="Password" narrative="The password for the certificates private keys" stage="Password" />
    </inputs>
    <onsuccess>7730afc5-e1ad-4dcf-8aaf-806116741c06</onsuccess>
  </stage>
  <stage stageid="7a67790d-af1c-4bc1-852a-24b8f3ff3e4d" name="End" type="End">
    <subsheetid>180af822-1b53-4b4c-9026-ea63c305201c</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>15</displayx>
    <displayy>90</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="7730afc5-e1ad-4dcf-8aaf-806116741c06" name="Create" type="Code">
    <subsheetid>180af822-1b53-4b4c-9026-ea63c305201c</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>15</displayx>
    <displayy>-15</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="prefix" expr="[Prefix]" />
      <input type="password" name="password" expr="[Password]" />
    </inputs>
    <onsuccess>7a67790d-af1c-4bc1-852a-24b8f3ff3e4d</onsuccess>
    <code><![CDATA[CreateCertificates(prefix,password)]]></code>
  </stage>
  <stage stageid="bb727230-dec2-4f23-87c4-4e9241a619e8" name="Prefix" type="Data">
    <subsheetid>180af822-1b53-4b4c-9026-ea63c305201c</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>165</displayx>
    <displayy>-105</displayy>
    <displaywidth>180</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>text</datatype>
    <initialvalue xml:space="preserve">https://localhost:9090/</initialvalue>
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="f3536732-4ff9-45c6-a4b2-9631674ea633" name="Password" type="Data">
    <subsheetid>180af822-1b53-4b4c-9026-ea63c305201c</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>300</displayx>
    <displayy>-105</displayy>
    <displaywidth>120</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>password</datatype>
    <initialvalueenc>
    </initialvalueenc>
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="943b9d28-0555-4a57-bb25-5787089937a5" name="Coll1" type="Collection">
    <subsheetid>59169972-49de-497e-91d2-a5e792d4571b</subsheetid>
    <loginhibit />
    <narrative>
    </narrative>
    <displayx>-135</displayx>
    <displayy>-60</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>collection</datatype>
    <private />
    <alwaysinit />
  </stage>
</process>