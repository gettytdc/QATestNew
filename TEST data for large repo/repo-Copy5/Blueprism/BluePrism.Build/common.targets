<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Revision number that is combined with the version in version.txt to provide the full
    assembly version number (in [Major].[Minor].[Build].[Revision] format) -->
    <VersionRevisionNumber>0</VersionRevisionNumber>
    <!-- The full version number in "[Major].[Minor].[Build].[Revision]" format to be applied to build output.
    This can be specified via command line to override the version number derived from version.txt and the
    Revision property. -->
    <AssemblyVersion></AssemblyVersion>
    <!-- Version number based on Semantic Versioning spec which is currently used to label msi filenames. This can be 
    specified via command line to override the version number derived from version.txt and the SemanticVersionSuffix
    property.-->
    <SemanticVersion></SemanticVersion>
    <!-- The shortened version number in "[Major].[Minor].[Build]" format, shortened to "[Major].[Minor]" 
    if the build number is zero. This can be specified via command line to override the version number 
    derived from the version.txt file. -->
    <FriendlyVersion></FriendlyVersion>
    <!-- Controls whether source code is updated with version numbers before build -->
    <UpdateVersionNumbersInSourceCodeEnabled Condition=" '$(Configuration)' == 'Release' ">True</UpdateVersionNumbersInSourceCodeEnabled>
  </PropertyGroup>

  <PropertyGroup>
    <NuGetPackagesDirectory>$(UserProfile)\.nuget\packages</NuGetPackagesDirectory>
    <BuildDirectory>$(MSBuildProjectDirectory)</BuildDirectory>

    <RootDirectory Condition="$(RootDirectory) == ''">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..'))</RootDirectory>
    <Configuration Condition="$(Configuration) == ''">Debug</Configuration>
    <OutputDirectory>$(BuildDirectory)\Output</OutputDirectory>

    <!-- Paths to libraries and tools -->
    <NuGetExeFullPath>NuGet.exe</NuGetExeFullPath>
    <NUnitRunnerToolsDirectory>$(NuGetPackagesDirectory)\NUnit.ConsoleRunner\3.7.0\tools</NUnitRunnerToolsDirectory>
    <DynamicNUnitRunnerToolsDirectory Condition="$(DynamicNUnitRunnerToolsDirectory) == '' OR !Exists('$(DynamicNUnitRunnerToolsDirectory)')">$(NuGetPackagesDirectory)\NUnit.ConsoleRunner\3.11.1\tools</DynamicNUnitRunnerToolsDirectory>
    <DynamicNUnitRunnerToolsDirectory Condition="$(DynamicNUnitRunnerToolsDirectory) == '' OR !Exists('$(DynamicNUnitRunnerToolsDirectory)')">$(NuGetPackagesDirectory)\NUnit.ConsoleRunner\3.10.0\tools</DynamicNUnitRunnerToolsDirectory>
    <DynamicNUnitRunnerToolsDirectory Condition="$(DynamicNUnitRunnerToolsDirectory) == '' OR !Exists('$(DynamicNUnitRunnerToolsDirectory)')">$(NuGetPackagesDirectory)\NUnit.ConsoleRunner\3.7.0\tools</DynamicNUnitRunnerToolsDirectory>
    <SDKVersionDirectoryName>10.0.15063.0</SDKVersionDirectoryName>
    <WindowsKitsRootDirectory>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots', 'KitsRoot10', null, RegistryView.Registry32, RegistryView.Default))</WindowsKitsRootDirectory>
    <WindowsKitsRootDirectory Condition="'$(WindowsKitsRootDirectory)' == ''">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots', 'KitsRoot81', null, RegistryView.Registry32, RegistryView.Default))</WindowsKitsRootDirectory>
    <WindowsKitsRootDirectory Condition="'$(WindowsKitsRootDirectory)' == ''">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots', 'KitsRoot', null, RegistryView.Registry32, RegistryView.Default))</WindowsKitsRootDirectory>
    <SignToolFullPath>$(WindowsKitsRootDirectory)bin\$(SDKVersionDirectoryName)\x86\signtool.exe</SignToolFullPath>

    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <VSToolsPath Condition="'$(VSToolsPath)' == '' OR !Exists('$(VSToolsPath)')">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v16.0</VSToolsPath>
    <VSToolsPath Condition="'$(VSToolsPath)' == '' OR !Exists('$(VSToolsPath)')">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v15.0</VSToolsPath>
    <VSToolsPath Condition="'$(VSToolsPath)' == '' OR !Exists('$(VSToolsPath)')">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v14.0</VSToolsPath>
  </PropertyGroup>

  <Import Project="$(NuGetPackagesDirectory)\MSBuild.Extension.Pack\1.9.1\build\net40\MSBuild.Extension.Pack.targets" />

  <!-- Prepares for build, cleaning up any directories used to store build artifacts -->
  <Target Name="Prepare" DependsOnTargets="CleanBeforeBuild;ResetOutputDirectory" />

  <Target Name="CleanBeforeBuild" Condition=" '$(CleanBeforeBuildEnabled)' == 'True' ">
    <Exec Command="git clean -d -f -e msbuild.log -e .vs -x &quot;$(RootDirectory)&quot;" />
  </Target>

  <Target Name="ResetOutputDirectory">
    <Message Text="$(DynamicNUnitRunnerToolsDirectory)" />
    <RemoveDir Directories="$(OutputDirectory)" Condition="Exists($(OutputDirectory))" />
    <MakeDir Directories="$(OutputDirectory)" />
  </Target>

<!-- Updates version information in source code -->
  <Target Name="UpdateVersionNumbersInSourceCode" DependsOnTargets="InitVersionNumbers;" Condition=" '$(UpdateVersionNumbersInSourceCodeEnabled)' == 'True' ">
    <CallTarget Targets="UpdateAssemblyInfoVersionNumbers" />
    <CallTarget Targets="UpdateVBOVersionNumbers" />
    <CallTarget Targets="UpdateCPlusPlusVersionNumbers" />
	<CallTarget Targets="UpdateFirefoxPluginVersionNumber" />
  </Target>

<!-- Updates AssemblyVersion and AssemblyFileVersion attributes in AssemblyInfo files -->
  <Target Name="UpdateAssemblyInfoVersionNumbers">
    <ItemGroup>
      <AssemblyInfoFiles Include="$(RootDirectory)\SharedAssemblyInfo.cs;$(RootDirectory)\SharedAssemblyInfo.vb" />
    </ItemGroup>
    <MSBuild.ExtensionPack.Framework.AssemblyInfo AssemblyInfoFiles="@(AssemblyInfoFiles)" AssemblyFileVersion="$(AssemblyVersion)" AssemblyVersion="$(AssemblyVersion)" />
  </Target>

  <!-- Initialises version number properties -->
  <Target Name="InitVersionNumbers" DependsOnTargets="InitVersionNumberProperties;" />

  <!-- Sets the AssemblyVersion, SemanticVersion and FriendlyVersion properties based on the 
  Version.txt file combined with the VersionRevisionNumber and SemanticVersionSuffix properties.
  The properties will not be set if they have already been set via command line. -->
  <Target Name="InitVersionNumberProperties">
    <GetVersionNumber FilePath="$(RootDirectory)\BluePrism.Build\Version.txt" RevisionNumber="$(VersionRevisionNumber)" SemanticVersionSuffix="$(SemanticVersionSuffix)">
      <Output PropertyName="GeneratedAssemblyVersion" TaskParameter="AssemblyVersion" />
      <Output PropertyName="GeneratedSemanticVersion" TaskParameter="SemanticVersion" />
      <Output PropertyName="GeneratedFriendlyVersion" TaskParameter="FriendlyVersion" />
    </GetVersionNumber>
    <PropertyGroup>
      <AssemblyVersion Condition=" '$(AssemblyVersion)' == '' ">$(GeneratedAssemblyVersion)</AssemblyVersion>
      <SemanticVersion Condition=" '$(SemanticVersion)' == '' ">$(GeneratedSemanticVersion)</SemanticVersion>
      <FriendlyVersion Condition=" '$(FriendlyVersion)' == '' ">$(GeneratedFriendlyVersion)</FriendlyVersion>
    </PropertyGroup>
    <Message Text="Initialised version numbers. Assembly version: &quot;$(AssemblyVersion)&quot;, semantic version: &quot;$(SemanticVersion)&quot;, friendly version: &quot;$(FriendlyVersion)&quot;" />
  </Target>
    
  <UsingTask TaskName="GetVersionNumber" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">  
    <ParameterGroup>  
      <FilePath ParameterType="System.String" Required="true" />  
      <RevisionNumber ParameterType="System.String" Required="false" />  
      <SemanticVersionSuffix ParameterType="System.String" Required="false" />
      <AssemblyVersion ParameterType="System.String" Output="true"/>  
      <SemanticVersion ParameterType="System.String" Output="true" />
      <FriendlyVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>  
    <Task>  
      <Code Type="Fragment" Language="cs">
        <![CDATA[  
          string content = File.ReadAllText(FilePath);
          var version = System.Version.Parse(content);  
          var completeVersion = new System.Version(version.Major, version.Minor, version.Build, Int32.Parse(RevisionNumber));

          AssemblyVersion = completeVersion.ToString();
          SemanticVersion = string.Format("{0}.{1}.{2}", version.Major, version.Minor, version.Build);
          if(!string.IsNullOrEmpty(SemanticVersionSuffix))
          {
              SemanticVersion += "-" + SemanticVersionSuffix;
          }
          FriendlyVersion = string.Format("{0}.{1}", version.Major, version.Minor);
          if(version.Build > 0)
          {
              FriendlyVersion += "." + version.Build;
          }
        ]]>
      </Code>  
    </Task>  
  </UsingTask>

</Project>
