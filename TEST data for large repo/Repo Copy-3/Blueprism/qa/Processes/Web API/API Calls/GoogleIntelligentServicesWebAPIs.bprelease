<?xml version="1.0" encoding="utf-8"?>
<bpr:release xmlns:bpr="http://www.blueprism.co.uk/product/release">
    <bpr:name>GoogleIntelligentServicesWebAPIs</bpr:name>
    <bpr:release-notes />
    <bpr:created>2019-08-14 12:55:15Z</bpr:created>
    <bpr:package-id>-1</bpr:package-id>
    <bpr:package-name>&lt;Adhoc Package&gt;</bpr:package-name>
    <bpr:user-created-by>matt</bpr:user-created-by>
    <bpr:contents count="3">
        <webapiservice id="532d6da4-2c6b-48d0-9b98-f77f31a7d9e3" name="Google: Computer Vision" enabled="true" xmlns="http://www.blueprism.co.uk/product/webapiservice">
            <configuration baseurl="https://vision.googleapis.com/" xmlns="">
                <actions>
                    <action id="9" name="Detect Face" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "FACE_DETECTION"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="CustomCode" name="Image Properties" datatype="collection"></customoutputparameter>
                                <customoutputparameter type="JsonPath" name="Facial Attributes" path="$.responses[0].faceAnnotations[0].landmarks" datatype="collection"></customoutputparameter>
                                <customoutputparameter type="JsonPath" name="Facial Detection Confidence" path="$.responses[0].faceAnnotations[0].detectionConfidence" datatype="number"></customoutputparameter>
                                <customoutputparameter type="JsonPath" name="Facial Landmarking Confidence" path="$.responses[0].faceAnnotations[0].landmarkingConfidence" datatype="number"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[List<string[]> columnNames = new List<string[]> { 
	new string[] {"Roll Angle",  "rollAngle"},
	new string[] {"Pan Angle",  "panAngle"},
	new string[] {"Tilt Angle",  "tiltAngle"},
	new string[] {"Joy Likelihood",  "joyLikelihood"},
	new string[] {"Sorrow Likelihood",  "sorrowLikelihood"},
	new string[] {"Anger Likelihood",  "angerLikelihood"},
	new string[] {"Surprise Likelihood",  "surpriseLikelihood"},
	new string[] {"Under Exposed Likelihood",  "underExposedLikelihood"},
	new string[] {"Blurred Likelihood",  "blurredLikelihood"},
	new string[] {"Headwear Likelihood",  "headwearLikelihood"}
};
	
Image_Properties = ConvertOutput(Response_Content, "responses[0].faceAnnotations", columnNames, "fdBoundingPoly", "boundingPoly");]]></code>
                        </outputparameters>
                    </action>
                    <action id="10" name="Get Image Properties" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "IMAGE_PROPERTIES"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Dominant Colours" path="$.responses[0].imagePropertiesAnnotation.dominantColors.colors" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="11" name="Safe Search Classification" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "SAFE_SEARCH_DETECTION"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Safe Search Annotation" path="$.responses[0].safeSearchAnnotation" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="12" name="Label Entities" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "LABEL_DETECTION"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Labelled Annotations" path="$.responses[0].labelAnnotations" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="13" name="Text Detection" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[Text detection detects and extracts text from any image. For example, a photograph might contain a street sign or traffic sign. If you wish to run OCR on a dense document, then use the OCR action.]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "TEXT_DETECTION"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Detected Text" path="$.responses[0].fullTextAnnotation.text" datatype="text"></customoutputparameter>
                                <customoutputparameter type="CustomCode" name="Text Annotations" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[List<string[]> columnNames = new List<string[]> { 
	new string[] {"Description",  "description"}
};
	
Text_Annotations = ConvertOutput(Response_Content, "responses[0].textAnnotations", columnNames, "locale", "boundingPoly");]]></code>
                        </outputparameters>
                    </action>
                    <action id="14" name="Logo Detection" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "LOGO_DETECTION"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="CustomCode" name="Logo Annotations" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[List<string[]> columnNames = new List<string[]> {
	new string[] {"Description",  "description"},
	new string[] {"Score",  "score"}
};

Logo_Annotations = ConvertOutput(Response_Content, "responses[0].logoAnnotations", columnNames, "mid");]]></code>
                        </outputparameters>
                    </action>
                    <action id="15" name="Landmark Detection" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "LANDMARK_DETECTION"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Landmark Annotation" path="$.responses[0].landmarkAnnotations" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="16" name="Document Text Extraction (OCR)" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="v1/images:annotate">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "requests": [
    {
      "image": {
        "content": "[Image to Analyse]"
      },
      "features": [
        {
          "type": "DOCUMENT_TEXT_DETECTION"
        }
      ]
    }
  ]
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Read Document" path="$.responses[0].textAnnotations[0].description" datatype="text"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                </actions>
                <commonparameters>
                    <actionparameter name="Image to Analyse" expose="true" datatype="512">
                        <initialvalue><![CDATA[]]></initialvalue>
                        <description><![CDATA[]]></description>
                    </actionparameter>
                </commonparameters>
                <commonheaders />
                <commonauthentications>
                    <authentication type="5" authorizationserver="https://www.googleapis.com/oauth2/v4/token">
                        <jwtconfiguration algorithm="RS256" audience="https://www.googleapis.com/oauth2/v4/token" scope="https://www.googleapis.com/auth/cloud-platform" subject="" jwtexpiry="3600">
                            <credential credentialname="GoogleJWT" exposetoprocess="true" inputparametername="OAuth 2 (JWT Bearer Token) Authentication Credential Name" />
                        </jwtconfiguration>
                    </authentication>
                </commonauthentications>
                <commoncode>
                    <codeproperties code="public List&lt;string&gt; GetJValueList(string json, string name) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;JObject obj = JsonConvert.DeserializeObject&lt;JObject&gt;(json);&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;List&lt;JProperty&gt; valueList = obj&#xD;&#xA;&#x9;.Descendants().OfType&lt;JProperty&gt;()&#xD;&#xA;&#x9;.Where(attr =&gt; attr.Name&#xD;&#xA;&#x9;.Equals(name))&#xD;&#xA;&#x9;.ToList();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return valueList.Select(c =&gt; (Convert.ToString(c.Value))).ToList();&#xD;&#xA;}&#xD;&#xA;public DataTable ConvertOutput(string json, string path, List&lt;string[]&gt; ColumnNames, params string[] propertiesToRemove)&#xD;&#xA;{&#xD;&#xA;&#x9;DataTable Collection = new DataTable(&quot;Collection&quot;);&#xD;&#xA;&#xD;&#xA;&#x9;for (int i = 0; i &lt; ColumnNames.Count; i++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;Collection.Columns.Add(ColumnNames[i][0], typeof(String));&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;JObject obj = JsonConvert.DeserializeObject&lt;JObject&gt;(json);&#xD;&#xA;&#xD;&#xA;&#x9;obj = RemoveProperties(obj, propertiesToRemove);&#xD;&#xA;&#xD;&#xA;&#x9;List&lt;JToken&gt; jTokens = obj.SelectTokens(path).ToList();&#xD;&#xA;&#xD;&#xA;&#x9;foreach (JToken token in jTokens.Children&lt;JToken&gt;())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;List&lt;string&gt; dataToAdd = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for (int i = 0; i &lt; ColumnNames.Count; i++)&#xD;&#xA;&#x9;&#x9;{&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if(token.Count() == 0)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (token.First[ColumnNames[i][1]].Type != JTokenType.Object)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dataToAdd.Add((string)token.First[ColumnNames[i][1]] ?? &quot;&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;dataToAdd.Add((string)token[ColumnNames[i][1]] ?? &quot;&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}     &#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;Collection.Rows.Add(dataToAdd.ToArray&lt;string&gt;());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return Collection;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public JObject RemoveProperties(JObject obj, params string[] values)&#xD;&#xA;{&#xD;&#xA;&#x9;foreach(string value in values)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;obj.Descendants().&#xD;&#xA;&#x9;&#x9;&#x9;OfType&lt;JProperty&gt;().&#xD;&#xA;&#x9;&#x9;&#x9;Where(attr =&gt; attr.Name.StartsWith(value)).ToList().ForEach(attr =&gt; attr.Remove());&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return obj;&#xD;&#xA;} " language="csharp">
                        <namespaces>
                            <namespace>System</namespace>
                            <namespace>System.Drawing</namespace>
                            <namespace>System.Data</namespace>
                            <namespace>System.IO</namespace>
                            <namespace>System.Text</namespace>
                            <namespace>System.Collections.Generic</namespace>
                            <namespace>System.Text.RegularExpressions</namespace>
                            <namespace>System.Linq</namespace>
                            <namespace>Newtonsoft.Json</namespace>
                            <namespace>Newtonsoft.Json.Linq</namespace>
                        </namespaces>
                        <references>
                            <reference>System.dll</reference>
                            <reference>System.Data.dll</reference>
                            <reference>System.Xml.dll</reference>
                            <reference>System.Drawing.dll</reference>
                            <reference>System.Core.dll</reference>
                            <reference>Newtonsoft.Json.dll</reference>
                        </references>
                    </codeproperties>
                </commoncode>
                <configurationsettings>
                    <configurationsettings requesttimeout="40" authserverrequesttimeout="10" />
                </configurationsettings>
            </configuration>
        </webapiservice>
        <webapiservice id="aa444b78-725a-4928-a7f5-80beadbe4efb" name="Google: Natural Language Processing" enabled="true" xmlns="http://www.blueprism.co.uk/product/webapiservice">
            <configuration baseurl="https://language.googleapis.com/" xmlns="">
                <actions>
                    <action id="17" name="Sentiment Analysis" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[Sentiment Analysis allows your organisation to analyse the sentiment of any provided information.]]></description>
                        <request httpmethod="POST" urlpath="/v1/documents:analyzeSentiment">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "encodingType": "[Encoding Type]",
  "document":{
    "type":"[Content Type]",
    "content":"[Text to Analyse]"
  }
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Document Sentiment" path="$.documentSentiment" datatype="collection"></customoutputparameter>
                                <customoutputparameter type="JsonPath" name="Sentence Sentiment" path="$.sentences" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="18" name="Entity Analysis" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[Entity Analysis allows your organisation to analyse and find entities in the given text. An entity can be classed as a proper name, or common nouns. This function will also find entity types, such as salience, mentions and other properties.]]></description>
                        <request httpmethod="POST" urlpath="/v1/documents:analyzeEntities">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "encodingType": "[Encoding Type]",
  "document":{
    "type":"[Content Type]",
    "content":"[Text to Analyse]"
  }
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters />
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="19" name="Classify Content" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[Content Classification classifies the given text into specific categories with a confidence score. ]]></description>
                        <request httpmethod="POST" urlpath="/v1/documents:classifyText">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "document":{
    "type":"[Content Type]",
    "content":"[Text to Analyse]"
  }
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Content Classification" path="$.categories" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="20" name="Syntax Analysis" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[Syntax Analysis analyses the syntax of the text and provides sentence tokenisation along with part of speech tags, dependency trees, and other properties.]]></description>
                        <request httpmethod="POST" urlpath="/v1/documents:analyzeSyntax">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "encodingType": "[Encoding Type]",
  "document":{
    "type":"[Content Type]",
    "content":"[Text to Analyse]"
  }
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Sentences" path="$.sentences" datatype="collection"></customoutputparameter>
                                <customoutputparameter type="JsonPath" name="Tokens" path="$.tokens" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="21" name="Sentiment Entity Analysis" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[Sentiment Entity Analysis allows your organisation to find entities and analyse their sentiment values in the given text. An entity can be classed as a proper name, or common nouns. ]]></description>
                        <request httpmethod="POST" urlpath="/v1/documents:analyzeEntitySentiment">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "encodingType": "[Encoding Type]",
  "document":{
    "type":"[Content Type]",
    "content":"[Text to Analyse]"
  }
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters />
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Entity Sentiment Classification" path="$.entities" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                </actions>
                <commonparameters>
                    <actionparameter name="Content Type" expose="true" datatype="64">
                        <initialvalue><![CDATA[PLAIN_TEXT]]></initialvalue>
                        <description><![CDATA[]]></description>
                    </actionparameter>
                    <actionparameter name="Text to Analyse" expose="true" datatype="64">
                        <initialvalue><![CDATA[]]></initialvalue>
                        <description><![CDATA[]]></description>
                    </actionparameter>
                    <actionparameter name="Encoding Type" expose="true" datatype="64">
                        <initialvalue><![CDATA[UTF8]]></initialvalue>
                        <description><![CDATA[]]></description>
                    </actionparameter>
                </commonparameters>
                <commonheaders />
                <commonauthentications>
                    <authentication type="5" authorizationserver="https://www.googleapis.com/oauth2/v4/token">
                        <jwtconfiguration algorithm="RS256" audience="https://www.googleapis.com/oauth2/v4/token" scope="https://www.googleapis.com/auth/cloud-platform" subject="" jwtexpiry="3600">
                            <credential credentialname="GoogleJWT" exposetoprocess="true" inputparametername="OAuth 2 (JWT Bearer Token) Authentication Credential Name" />
                        </jwtconfiguration>
                    </authentication>
                </commonauthentications>
                <commoncode>
                    <codeproperties code="" language="visualbasic">
                        <namespaces>
                            <namespace>System</namespace>
                            <namespace>System.Drawing</namespace>
                            <namespace>System.Data</namespace>
                        </namespaces>
                        <references>
                            <reference>System.dll</reference>
                            <reference>System.Data.dll</reference>
                            <reference>System.Xml.dll</reference>
                            <reference>System.Drawing.dll</reference>
                        </references>
                    </codeproperties>
                </commoncode>
                <configurationsettings>
                    <configurationsettings requesttimeout="10" authserverrequesttimeout="10" />
                </configurationsettings>
            </configuration>
        </webapiservice>
        <webapiservice id="0c0768f1-e5de-4fc7-af67-487f7d2a9d1e" name="Google: Translation" enabled="true" xmlns="http://www.blueprism.co.uk/product/webapiservice">
            <configuration baseurl="https://translation.googleapis.com/" xmlns="">
                <actions>
                    <action id="22" name="Detect Single Language" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="/language/translate/v2/detect">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "q": "[Document]"
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters>
                            <actionparameter name="Document" expose="true" datatype="64">
                                <initialvalue><![CDATA[]]></initialvalue>
                                <description><![CDATA[]]></description>
                            </actionparameter>
                        </parameters>
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="CustomCode" name="Detected Language" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[List<string[]> columnNames = new List<string[]> { 
	new string[] {"Confidence",  "confidence"},
	new string[] {"Is Reliable",  "isReliable"},
	new string[] {"Language",  "language"}
};
	
Detected_Language = ConvertOutput(Response_Content, "data.detections", columnNames);]]></code>
                        </outputparameters>
                    </action>
                    <action id="23" name="Detect Multiple Languages" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="/language/translate/v2/detect">
                            <headers />
                            <bodycontent type="4">
                                <code><![CDATA[List<string> sentences = new List<string>();

foreach(DataRow row in Collection_of_Documents.Rows)
{
	sentences.Add(row["Words"].ToString() );
}

Request_Content = JsonConvert.SerializeObject(
		new JObject(
			new JProperty("q", 
				new JArray(
					from sentence in sentences
					select new JValue(sentence)))));]]></code>
                            </bodycontent>
                        </request>
                        <parameters>
                            <actionparameter name="Collection of Documents" expose="true" datatype="1">
                                <initialvalue><![CDATA[<collection />]]></initialvalue>
                                <description><![CDATA[]]></description>
                            </actionparameter>
                        </parameters>
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="CustomCode" name="Detected Languages" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[List<string[]> columnNames = new List<string[]> { 
	new string[] {"Confidence",  "confidence"},
	new string[] {"Is Reliable",  "isReliable"},
	new string[] {"Language",  "language"}
};
	
Detected_Languages = ConvertOutput(Response_Content, "data.detections", columnNames);]]></code>
                        </outputparameters>
                    </action>
                    <action id="24" name="Translate Single Document" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="/language/translate/v2">
                            <headers />
                            <bodycontent type="1">
                                <template><![CDATA[{
  "q": "[Document]",
  "target": "[Target Language]",
}]]></template>
                            </bodycontent>
                        </request>
                        <parameters>
                            <actionparameter name="Document" expose="true" datatype="64">
                                <initialvalue><![CDATA[]]></initialvalue>
                                <description><![CDATA[]]></description>
                            </actionparameter>
                            <actionparameter name="Target Language" expose="true" datatype="64">
                                <initialvalue><![CDATA[]]></initialvalue>
                                <description><![CDATA[]]></description>
                            </actionparameter>
                        </parameters>
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Translated Document" path="$.data.translations" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                    <action id="25" name="Translate Multiple Documents" enabled="true" enableRequestOutputParameter="false" disableSendingOfRequest="false">
                        <description><![CDATA[]]></description>
                        <request httpmethod="POST" urlpath="/language/translate/v2">
                            <headers />
                            <bodycontent type="4">
                                <code><![CDATA[List<string> sentences = new List<string>();

foreach(DataRow row in Collection_of_Documents.Rows)
{
	sentences.Add(row["Words"].ToString() );
}



Request_Content = JsonConvert.SerializeObject(
		new JObject(
			new JProperty("q", 
				new JArray(
					from sentence in sentences
					select new JValue(sentence))),
			new JProperty("target", Target_Language )));]]></code>
                            </bodycontent>
                        </request>
                        <parameters>
                            <actionparameter name="Collection of Documents" expose="true" datatype="1">
                                <initialvalue><![CDATA[<collection />]]></initialvalue>
                                <description><![CDATA[]]></description>
                            </actionparameter>
                            <actionparameter name="Target Language" expose="true" datatype="64">
                                <initialvalue><![CDATA[]]></initialvalue>
                                <description><![CDATA[]]></description>
                            </actionparameter>
                        </parameters>
                        <outputparameters>
                            <parameters>
                                <customoutputparameter type="JsonPath" name="Translated Documents" path="$.data.translations" datatype="collection"></customoutputparameter>
                            </parameters>
                            <code><![CDATA[]]></code>
                        </outputparameters>
                    </action>
                </actions>
                <commonparameters />
                <commonheaders />
                <commonauthentications>
                    <authentication type="5" authorizationserver="https://www.googleapis.com/oauth2/v4/token">
                        <jwtconfiguration algorithm="RS256" audience="https://www.googleapis.com/oauth2/v4/token" scope="https://www.googleapis.com/auth/cloud-platform" subject="" jwtexpiry="3600">
                            <credential credentialname="GoogleJWT" exposetoprocess="true" inputparametername="OAuth 2 (JWT Bearer Token) Authentication Credential Name" />
                        </jwtconfiguration>
                    </authentication>
                </commonauthentications>
                <commoncode>
                    <codeproperties code="public List&lt;string&gt; GetJValueList(string json, string name) {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;JObject obj = JsonConvert.DeserializeObject&lt;JObject&gt;(json);&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;List&lt;JProperty&gt; valueList = obj&#xD;&#xA;&#x9;.Descendants().OfType&lt;JProperty&gt;()&#xD;&#xA;&#x9;.Where(attr =&gt; attr.Name&#xD;&#xA;&#x9;.Equals(name))&#xD;&#xA;&#x9;.ToList();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return valueList.Select(c =&gt; (Convert.ToString(c.Value))).ToList();&#xD;&#xA;}&#xD;&#xA;public DataTable ConvertOutput(string json, string path, List&lt;string[]&gt; ColumnNames, params string[] propertiesToRemove)&#xD;&#xA;{&#xD;&#xA;&#x9;DataTable Collection = new DataTable(&quot;Collection&quot;);&#xD;&#xA;&#xD;&#xA;&#x9;for (int i = 0; i &lt; ColumnNames.Count; i++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;Collection.Columns.Add(ColumnNames[i][0], typeof(String));&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;JObject obj = JsonConvert.DeserializeObject&lt;JObject&gt;(json);&#xD;&#xA;&#xD;&#xA;&#x9;obj = RemoveProperties(obj, propertiesToRemove);&#xD;&#xA;&#xD;&#xA;&#x9;List&lt;JToken&gt; jTokens = obj.SelectTokens(path).ToList();&#xD;&#xA;&#xD;&#xA;&#x9;foreach (JToken token in jTokens.Children&lt;JToken&gt;())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;List&lt;string&gt; dataToAdd = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for (int i = 0; i &lt; ColumnNames.Count; i++)&#xD;&#xA;&#x9;&#x9;{&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if(token.Count() == 1)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (token.First[ColumnNames[i][1]].Type != JTokenType.Object)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dataToAdd.Add((string)token.First[ColumnNames[i][1]] ?? &quot;&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;dataToAdd.Add((string)token[ColumnNames[i][1]] ?? &quot;&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}     &#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;Collection.Rows.Add(dataToAdd.ToArray&lt;string&gt;());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return Collection;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public JObject RemoveProperties(JObject obj, params string[] values)&#xD;&#xA;{&#xD;&#xA;&#x9;foreach(string value in values)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;obj.Descendants().&#xD;&#xA;&#x9;&#x9;&#x9;OfType&lt;JProperty&gt;().&#xD;&#xA;&#x9;&#x9;&#x9;Where(attr =&gt; attr.Name.StartsWith(value)).ToList().ForEach(attr =&gt; attr.Remove());&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return obj;&#xD;&#xA;} " language="csharp">
                        <namespaces>
                            <namespace>System</namespace>
                            <namespace>System.Drawing</namespace>
                            <namespace>System.Data</namespace>
                            <namespace>Newtonsoft.Json</namespace>
                            <namespace>Newtonsoft.Json.Linq</namespace>
                            <namespace>System.Collections.Generic</namespace>
                            <namespace>System.Linq</namespace>
                        </namespaces>
                        <references>
                            <reference>System.dll</reference>
                            <reference>System.Data.dll</reference>
                            <reference>System.Xml.dll</reference>
                            <reference>System.Drawing.dll</reference>
                            <reference>Newtonsoft.Json.dll</reference>
                            <reference>System.Core.dll</reference>
                        </references>
                    </codeproperties>
                </commoncode>
                <configurationsettings>
                    <configurationsettings requesttimeout="10" authserverrequesttimeout="10" />
                </configurationsettings>
            </configuration>
        </webapiservice>
    </bpr:contents>
</bpr:release>