<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link type="text/css" href="AutomateHelp.css" rel="stylesheet"/>
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
    <title>应用程序挂钩</title>
</head>

<body>
    <div class="header">
        <h1 class="pagetitle">帮助</h1>
    </div>
    
    <h3>概述</h3>
    <p>
 应用程序挂钩是一种侵入式的自动化技术，用于从图形应用程序中获取数据。它涉及将可执行代码注入到目标应用程序的内存空间中，以便反馈信息。虽然从技术层面来看具有侵入性，但这一技术不会影响目标应用程序的行为。
	</p>
	<p>
 反馈数据的具体过程可以概述如下：Blue Prism 会预测应用程序将在何处发送数据，侦听该位置的数据，拦截并观察数据，然后将其传递到预定目标。
 下面，我们会从技术层面更加详尽地描述这个过程。
	</p>
    
    <h3>挂钩的工作原理</h3>
    <p>
 您需要具备一些相关的技术知识，才能理解下述内容。
	</p>
	<p>
 Blue Prism 会替换目标应用程序的 Windows user32、Kernel32 和 gdi32 库副本中的函数实现。新的实现会记录所有传入的参数，以使这些信息可供 Blue Prism 使用；然后，调用原有的实现，以使应用程序继续像以前一样执行。
	</p>
	<p>
 关于被替换的函数，示例包括 DrawTextA 和 SetWindowPos，这两个函数分别能让 Blue Prism 知晓屏幕上所渲染的所有文本以及在应用程序中创建的所有窗口。
	</p>
	<p>
 Blue Prism 会将这些信息整理到一个对象模型中，并记住所收集到的每一项信息以及各项信息与所有信息之间的关系。
 这个模型会实时更新，以丢弃过时的信息并时刻观测新的信息；这意味着，Blue Prism 总能掌握应用程序的当前状态且随时可以提供相关报告。
	</p>
	<p>
 该功能使得 Blue Prism 能够通过 <a href="helpObjectStudio.htm">object studio</a> 与目标应用程序进行交互，例如<a href="frmStagePropertiesWait.htm">等待</a>对象模型中的某个预期功能，或者从模型中<a href="frmStagePropertiesRead.htm">读取</a>要在业务流程中使用的数据。
	</p>
	
	
    <h3>使用</h3>
    <p>
 在没有更好的集成方式可供使用时（“更好”是指更特定于平台的方法，如 <a href="helpJavaAutomation.htm">java集成</a>），挂钩常会被当作最后的选择。
	</p>
	<p>
 通常，如果目标应用程序是针对某个框架实现的，而这个框架重新实现了 Windows API 提供的功能，那么就会使用挂钩。例如，框架可以在屏幕上呈现自己的按钮，而不是通过 Windows API 来创建按钮。因此，当 Blue Prism 尝试使用 Windows 集成技术来检查应用程序时，您所能看到的就只有一个窗口，而不是包含多个单独组件（如按钮、编辑字段和组合框）的窗口。在这种情况下，Blue Prism 可以借助挂钩观察按钮上所绘制的文本，而这意味着它可以推断出按钮所在的位置。
	</p>
	<p>
 关于适合使用挂钩的框架，示例包括 <a href="http://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a>、<a href="http://en.wikipedia.org/wiki/GTK+">GTK+</a> 和 <a href="http://en.wikipedia.org/wiki/Qt_%28toolkit%29">Qt</a>。
	</p>
	
	<h3>优点</h3>
	<p>
 挂钩技术很有用，因为它具备基于宏的传统自动化方法所具备的关键特性：
	</p>
	<ul>
		<li class="bold">可靠性
			<p class="indented">
 基于宏的自动化依赖于“点击并祈祷”方法，即简单地在预先确定的屏幕坐标处发送鼠标点击消息。这类技术容易出错，而且其不可预测性也是众所周知的。尤其是，如果应用程序的外观发生任何变化（无论是因为软件升级、屏幕分辨率的变化，还是在不同 PC 上使用了不同的主题/皮肤），这类技术就会以失败告终。这可能会导致宏不起作用；或者，更糟糕的是，宏会出现意外行为，从而导致数据损坏。
			</p>
		</li>
		<li class="bold">轻松获取数据
			<p class="indented">
 基于宏的自动化无法应对获取数据时所出现的故障。它最多只能通过（简单的）鼠标点击操作聚焦所需的元素，发送键盘快捷键以选择所有文本，然后将所选文本复制到剪贴板。因此，数据很容易被遗漏，而且往往不完整。相反，挂钩会实时捕获所有数据，甚至可以检测数据是否存在。请参阅下面的“检测就绪情况”。
			</p>
		</li>
		<li class="bold">检测就绪情况
			<p class="indented">
 基于宏的自动化通常基于简单的暂停操作（定时等待）来确保应用程序已准备好接收输入，或确保数据存在且可供读取。
 例如，在单击“获取详细信息”按钮后，可能要先等待远程数据库回复，然后应用程序才能在屏幕上显示某些数据。完成这类操作所需的时间是不可预测的，而且可能会因数据库服务器上的负载而出现很大的差异。所以，宏可能常会出现意外行为，因为它会在目标应用程序准备就绪之前进入下一个环节。
			</p>
			<p class="indented">
 相较之下，Blue Prism 的挂钩模型可以掌握目标应用程序的状态详细信息。
 根据该模型中所含的信息可以确定当前存在哪些组件和哪些信息。例如，如果数据会以弹出式窗口的方式呈现，那么 Blue Prism 可以一直等到窗口出现为止（实际上是等到窗口中的数据出现为止）。这个等待功能不同于宏中固定等待 30 秒（例如）的机制，前者在大多数情况下都会等到弹出式窗口出现为止。
			</p>
		</li>
		<li class="bold">高速
			<p class="indented">
 如上所述，Blue Prism 采用了先进的等待功能来检测目标应用程序的就绪情况。这意味着，它只需要在每个环节等待所需的时长。请回想一下刚才那个等待弹出式窗口出现的示例。宏可以决定在所有情况下都等待 30 秒，以保证实现 99% 的可靠性（仅凭感知），而实际上通常只需要等待 5 秒。挂钩能使应用程序在准备就绪后立刻自动继续运行，从而实现卓越的性能。
			</p>
		</li>
	</ul>
	<p>
 总之，挂钩技术使得自动化在以前可能被视为不适用的情况下变得可行且可取。
	</p>
    
    
    <h3>缺点</h3>
    <p>
 挂钩是一种先进的技术，旨在应对各种没有明显或直接的机制可以轻松实现自动化的情景（如上文所述）。所以，相较于其他的某些首选技术，挂钩技术似乎有所欠缺。下方列出了相关的提醒：
	</p>
	<ul>
		<li class="bold">对于应用程序启动方式的控制有所弱化
			<p class="indented">
 鉴于挂钩特性方面固有的技术原因，挂接只能在应用程序启动时由 Blue Prism 来完成。因此，应用程序必须由 Blue Prism 来启动；也就是说，不能像使用其他集成技术时一样连接到已经在运行的应用程序。
			</p>
		</li>
		<li class="bold">创建业务对象时操作更加繁复
			<p class="indented">
 用户必须采取一些措施，以确保对象模型中的某些数据不会被混淆。例如，Blue Prism 无法确定通过挂钩获取的文本是属于某个按钮，还是属于附近的某个组合框。用户必须小心谨慎，以免出现问题
			</p>
			<p class="indented">
 因此，用户可能需要根据目标应用程序的工作方式以及 Blue Prism 通过挂钩方法可以获取的信息（可用信息因应用程序而异），来确定与目标应用程序的交互方式。
			</p>
		</li>
		<li class="bold">没有现成的便利方法
			<p class="indented">
 由于挂钩不依赖于特定的工具包及其功能（例如，与 Blue Prism 的 <a href="helpJavaAutomation.htm">Java 自动化技术</a>相比），因此无法提供一组特定的功能，以用于与特定类型的用户界面元素进行交互。因此，用户必须手动模拟组合框项的选择过程（举例来说）；而对于 Windows 应用程序，Blue Prism 可以完成组合框项的选择工作，用户只需通过<a href="frmStagePropertiesNavigate.htm">导航环节</a>发出相关指令即可。
			</p>
		</li>
	</ul>
	
	   
    
    <h3>何时应该选用挂钩？<a name="WhenToUseHooking" id="WhenToUseHooking"></a></h3>
    <p>
 简而言之：挂钩是在万不得已时才能使用的一种方法。如果可用且适用，请使用更加具体的技术，如浏览器自动化或 <a href="helpJavaAutomation.htm">Java 自动化</a>。
	</p>
    
</body>
</html>
