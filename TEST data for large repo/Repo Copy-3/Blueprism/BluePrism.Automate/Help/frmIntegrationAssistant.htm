<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<link type="text/css" href="AutomateHelp.css" rel="stylesheet" />
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
	<title>Application Modeller</title>
	<script type="text/javascript" src="script/imagezoom.js"></script>
</head>

<body class="slick">
	<div class="header">
		<h1 class="pagetitle">Object Studio</h1>
		<h2>Application Modeller</h2>
	</div>

	<h3 id="intro">Introduction</h3>
	<p>
		<a href="helpObjectStudio.htm">Object Studio</a> is designed to
		help you create small modular units for interacting with end-user
		applications. Traditionally, it would have been necessary to
		seek the services of a computer programmer in order to
		communicate with such an application. Object Studio opens this
		opportunity up to the business user, as well as the technical
		expert.
	</p>

	<p>To this end, Object Studio introduces the <span class="emphasis">
	Application Modeller</span>. The Application Modeller allows you to
	run Blue Prism and your target application side by side, and invites
	you to teach Object Studio about the features of your target
	application, by pointing and clicking.</p>

	<h3 id="elements">The teaching process - Creating new application
	elements</h3>

	<p>A new element representing a user interface element can be added
	to the Application Model by opening the Application Modeller and
	clicking "Add Element". By doing this, you are introducing Object
	Studio to a new feature of your target application. Such features
	are known as <span class="emphasis">Application Elements</span>. For
	the sake of example, we shall assume that you are introducing the
	"OK" button on the main window of your target application.</p>

	<p>You should then give your new application element a friendly name.
	This could be any name of your choosing, but the name "Main Window
	OK button" might be most appropriate.</p>

	<p>The next step is to click the "spy details" button. After doing
	this you will be given the opportunity to show the Application
	Modeller which application element you are talking about in your
	target application. Essentially, this will merely consist of making
	your target application visible (remember it will already be running
	at this stage), navigating to the button of interest and clicking on
	it.</p>

	<p>In most cases, Blue Prism will be able to detect that the
	application element that you have identified using the spy tool is a
	button. On such occasions the combo box labelled "Element Type" will
	be populated with the "Button" option. In the rare case that Blue
	Prism has been unable to detect this fact Automatically, you will
	have to fill it in by selecting the most appropriate option from the
	drop-down list.</p>

	<p>In some cases you may wish to associate a data type with the
	application element that you have identified. In the case of a
	button this would not be appropriate; but in the case of a data
	field that represents a number or a date, you would certainly want
	to choose the corresponding data type from the drop-down list. This
	allows Object Studio to do some intelligent data processing on the
	field, saving you the work of processing it manually.</p>
	
	<h3 id="Attributes">Refining the data - Attributes</h3>

	<p>At this stage you have identified the application element of
	interest and Object Studio has collected a lot of internal
	information about that application element. Some of this information
	is presented in the "Details" list. Examples include the text on a
	button (if the application element of interest really is a button),
	the location of the application element, which window it belongs to,
	etc. This information is presented row by row, with each row
	representing a piece of information. Such pieces of information are
	referred to as the <span class="emphasis">attributes</span> of the
	application element.</p>

	<p>The attributes captured are used by Object Studio to identify the
	same application element at a later time, specifically when running
	the business object against your target application. You are now
	given the opportunity to give Object Studio a helping hand in
	identifying the application element at a later stage.</p>

	<p>For example, Object Studio may have observed that your button has
	the text "OK", but having had more experience of the target
	application you are aware that sometimes the same button has the
	text "Save" depending on the circumstances. Not wanting Object
	Studio to be misled by its belief that the button will always have
	the text "OK", you should untick the "In Use" box beside the text
	element. By doing so, you instruct Object Studio to ignore the text
	on the button, and to use other attributes instead as a means of
	identifying the application element. In this sense, the text on the
	button is no longer "In Use".</p>
	
	<h3 id="dynamic">Further refinements - Attribute match types</h3>
	
	 <p>Object Studio recognises that whilst some attributes change 
	according to circumstances, they often change with a definite 
	pattern. For example, a word processing package may have the window 
	title "My Word Processor - Document 1", where "Document 1" is the 
	name of the document currently being edited. The "My Word Processor" 
	part of the title is always fixed and thus is of help in identifying 
	the window.</p> 

	<p>For this reason, attributes may be matched against an expression
	rather than a fixed value. The expression is determined by a match
	type, and the match types that are available are: </p>
	
	<dl>
		<dt>Equal</dt>
		<dd>Matches the given value exactly.</dd>

		<dt>Not Equal</dt>
		<dd>Matches only if it is anything other than the given value.</dd>

		<dt>Less than</dt>
		<dd>Matches if it is less than the given value.</dd>

		<dt>Greater than</dt>
		<dd>Matches if it is greater than the given value.</dd>

		<dt>Less than or Equal</dt>
		<dd>Matches if it is less than or equal to the given value.</dd>

		<dt>Greater than or Equal</dt>
		<dd>Matches if it is greater than or equal to the given
			value.</dd>

		<dt>Wildcard</dt>
		<dd>Matches against a wildcard expression in which
			<code>*</code> represents any or no characters,
			<code>?</code> matches any single character and
			<code>#</code> matches any single number.</dd>

		<dt>Reg Ex</dt>
		<dd>Matches against a <a 
			href="helpRegularExpressions.htm">
			regular expression</a>.</dd>

		<dt>Range</dt>
		<dd>Matches if it falls within a specific range of values
			(inclusive). The syntax for the value must be in the form
			<code>X..Y</code> i.e. the lower (<code>X</code>) and upper 
			(<code>Y</code>) values are separated by two dots.</dd>

		<dt>Dynamic</dt>
		<dd>Matches an expression within Read, Write, Navigate, and Wait
			stages at runtime.</dd>

	</dl>
	
	<p>Different match types are available depending on the data type
	of the attribute value. So for example, Wildcard and Regular
	Expression are available for text based attributes, whereas Greater
	than and Less than, are available for number based attributes.
	There is also a special Dynamic match type available. Dynamic means
	that a specific value is not supplied for an attribute straight
	away when you design the business object, but that the value is
	supplied instead when the business object is running. For example
	if you open the document "Tax Return 2006" in your word processor
	as part of running the business object, you may supply the document
	name to a parameter so that the attribute can make use of it.</p>

	<p>To alter the match type of an attribute, select the match type
	from the drop down box in the Match Type column. This will then
	match the attribute value against the selected criteria. Selecting
	“Dynamic” disables the value of the attribute in Application
	Modeller. Dynamic attributes can be set in the individual read,
	write, navigate and wait properties forms that reference the element.
	In the properties forms you will notice that the ... button is
	enabled, pressing it will allow you to enter expressions for the
	various attributes.</p>

	<h3 id="attribute-masks">Element Masks</h3>
	
	<p>You may find that you want many elements within the application
	model to utilise the same attributes (eg. <code>Class Name</code>, 
	<code>Window Text</code>, <code>X</code> and <code>Y</code>). In
	order to achieve this you can create an element with the attributes
	required, copy its "Element Mask" and then paste that mask onto
	other elements. This will enable the same attributes in the target
	element that are enabled in the source element, and also set the
	match types (<code>Equals</code>, <code>Greater Than</code> etc.)
	to be the same. Note that this will not set the values of the
	attributes - just their "In Use" / "Match Type" configurations.</p>
	
	<p>To copy an attribute mask, right-click the source element and
	choose <code>Copy Element Mask</code>.</p>
	
	<p>To paste an element mask, right-click the target element and
	choose <code>Paste Element Mask</code>.</p>

	<h3 id="structure">Structuring your application - groups</h3>
	
	<p>You will notice that there are two buttons underneath the tree
	view. One with the text "Add Element" and the other with the text
	"Add Child Element". If you click the second of these buttons, the
	effect will be to create a new application element as before, but it
	will be grouped underneath the currently selected element instead.
	In this sense the new element is considered to be a child of the
	first.</p>

	<p>This ability to group elements provides you with a means of 
	representing the structure of your target application. For example, 
	if your target application consists of several different screens, 
	you may need three or four "OK" buttons, one for each screen. By 
	grouping each button under its parent window in the tree you may 
	associate the buttons with their respective parents. This will aid 
	in when searching the tree of application elements at a later stage 
	(e.g. when editing the <a href="frmstagepropertiesRead.htm">Read 
	Stage Properties</a>).</p> 

	<p>Note that such groupings are not of interest to Blue Prism and 
	will not affect the behaviour of the business object. The facility 
	to group your application elements is simply to allow you to 
	represent your own mental map of the target application within the 
	business object. It is not necessary to have your structure to 
	reflect the true layout of your target application, or its internal 
	workings.</p> 

	<h3 id="organisation">Adjusting groups - deleting copying and
	moving elements</h3>
	
	<p>The Application Modeller treeview allows you to reorganise your 
	application elements. Should you wish to delete an element, you may 
	right-click the element and choose the appropriate option from the 
	context menu. Please note that if you delete an element which has 
	child elements, all of its children will also be deleted. If you 
	wish to keep such children you should move them first.</p> 

	<p>To move an element you may simply drag it and drop it into its 
	new location. If you drop one element on top of another, the dropped 
	element will become a child of the other. If you drop one element in 
	between two other elements, it will be placed between those two 
	elements.</p> 

	<p>By holding the shift key during a drag-drop operation, you will 
	cause a copy of the dragged application element to be placed in the 
	end location, instead of moving it.</p>

  <h3 id="filtering">Filtering the Application Model</h3>

  <p>The Application Model treeview can be filtered using the filter
  box above it. If any text is entered, the treeview will be scanned
  and any elements which match the specified filter will remain
  visible while any non-matching elements will be hidden.</p>

  <p>The filtering is not case sensitive, and an element will match
  the filter if its name, description or any of the <em>active</em>
  attribute values contain the filter text. There is no wildcard
  or regular expression support.</p>

  <p>While the tree is filtered, the tree is read-only - you can
  still change the attribute selection / values, but the structure
  of the application model cannot be amended.</p>

	<h3 id="locating-elements">Locating Elements</h3>

	<p>After having defined your elements and made use of them in object
	studio stages such as the <a href="frmStagePropertiesRead.htm">read
	</a>, <a href="frmStagePropertiesWrite.htm">write</a> or <a
	href="frmStagePropertiesNavigate.htm">navigate</a> stages, you may
	wish to locate all references to a particular element.</p>
	
	<p> To this end, the <a href="helpProcessSearch.htm">search</a>
	feature accepts a special syntax for <a 
	href="helpProcessSearch.htm#ElementSearch">searching for application 
	elements</a>.</p>

	<h3>Diagnostic Snapshot</h3>
	<p>Blueprism offers a Diagnostic snapshot feature that can be useful
	when troubleshooting problems. For more information see 
	<a href="helpApplicationModellerSnapshot.htm"> Diagnostic Snapshot</a></p>
</body>
</html>
