Imports System.IO

''' <summary>
''' Abstract base class for a report generator. The reports generated by these are
''' available via the command-line, or through the GUI.
''' </summary>
Public MustInherit Class clsReporter

    ''' <summary>
    ''' Get all the available reporters.
    ''' </summary>
    ''' <returns>An ICollection containing instances of all the available reporter
    ''' classes.</returns>
    Public Shared Function GetAll() As ICollection(Of clsReporter)
        Dim lst As New List(Of clsReporter) From {
            New clsRoleReporter(),
            New clsSystemReporter(),
            New clsElementUsageReporter(),
            New clsHighLoggingReport(),
            New EnvironmentSummaryReport(),
            New ResourceSummaryReport()
        }
        Return lst
    End Function

    Public Enum OutputFormats
        WikiText
        CSV
    End Enum

    Public Class ArgumentInfo
        Public Sub New(ByVal name As String, ByVal description As String, ByVal required As Boolean, ByVal datatype As Type)
            Me.Name = name
            Me.Description = description
            Me.Required = required
            Me.DataType = datatype
        End Sub
        Public Name As String
        Public Description As String
        Public Required As Boolean
        Public DataType As Type
    End Class

    ''' <summary>
    ''' The name of the report - this will be displayed in the user interface.
    ''' </summary>
    Public MustOverride ReadOnly Property Name() As String

    ''' <summary>
    ''' A short description of the report - one line. This will be displayed in the user
    ''' interface.
    ''' </summary>
    Public MustOverride ReadOnly Property Description() As String

    Public MustOverride ReadOnly Property OutputFormat() As OutputFormats

    ''' <summary>
    ''' Check if the current user has the necessary permissions to generate this report.
    ''' </summary>
    ''' <returns>True if the report can be generated.</returns>
    Public MustOverride Function HasPermission() As Boolean

    ''' <summary>
    ''' Get the arguments needed to generate the report.
    ''' </summary>
    ''' <returns>A List of ArgumentInfo objects describing each argument.</returns>
    Public MustOverride Function GetArguments() As List(Of ArgumentInfo)

    ''' <summary>
    ''' Generate the report. Throws an Exception if anything goes wrong.
    ''' </summary>
    ''' <param name="args">The arguments. Each Object in this list should correspond to
    ''' one in the list returned by GetArguments. The datatypes need to match too, and
    ''' there must be the correct number of items in the list.</param>
    ''' <remarks>When implementing this method you should first call this base method
    ''' (but discard the result).</remarks>
    Protected Overridable Sub GenerateReport(ByVal args As List(Of Object), ByVal sw As StreamWriter)
        If Not HasPermission() Then
            Throw New InvalidOperationException(My.Resources.clsReporter_InsufficientPermissionToGenerateThatReport)
        End If
        Dim xargs As List(Of ArgumentInfo) = GetArguments()
        If xargs.Count <> args.Count Then
            Throw New InvalidOperationException(My.Resources.clsReporter_NumberOfArgumentsToReportGeneratorIsWrong)
        End If
        For i As Integer = 0 To xargs.Count - 1
            If args(i) Is Nothing Then
                If xargs(i).Required Then
                    Throw New InvalidOperationException(String.Format(My.Resources.clsReporter_Argument0IsRequired, xargs(i).Name))
                End If
            Else
                If Not (args(i).GetType Is xargs(i).DataType) Then
                    Throw New InvalidOperationException(String.Format(My.Resources.clsReporter_Argument0IsWrongType, xargs(i).Name))
                End If
            End If
        Next
    End Sub

    ''' <summary>
    ''' Generate the report and writes an audit record. Throws an Exception if anything goes
    ''' wrong.
    ''' </summary>
    ''' <param name="args">The arguments. Each Object in this list should correspond to
    ''' one in the list returned by GetArguments. The datatypes need to match too, and
    ''' there must be the correct number of items in the list.</param>
    Public Sub Generate(ByVal args As List(Of Object), ByVal sw As StreamWriter)
        Try
            GenerateReport(args, sw)
        Catch e As Exception
            sw.WriteLine(String.Format(My.Resources.clsReporter_ErrorGeneratingReport0, e.ToString))
            Throw
        End Try
        gSv.AuditRecordSysConfigEvent(SysConfEventCode.RunReport, "", Me.Name)
    End Sub

End Class

