<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ThereAreLessThan01SIn2MMMM" xml:space="preserve">
    <value>T_There are less than : {0} {1}s in {2:MMMM}</value>
  </data>
  <data name="FATALNoOldValueSetForLast0OfMonth1" xml:space="preserve">
    <value>T_FATAL: no 'old' value set for last {0} of month: T_{1}</value>
  </data>
  <data name="PublicHolidayCircularDependencyStackFollows" xml:space="preserve">
    <value>T_Public Holiday Circular Dependency: T_Stack follows: </value>
  </data>
  <data name="NoCalendarFoundWithTheID0" xml:space="preserve">
    <value>T_No calendar found with the ID: T_{0}</value>
  </data>
  <data name="TheSchedule0IsNotAssignedToASchedulerThisIsRequiredBeforeItCanBeUsed" xml:space="preserve">
    <value>T_The schedule: {0} is not assigned to a scheduler. T_This is required before it can be used</value>
  </data>
  <data name="ThisTriggerNeedsToBeAssignedToAScheduleBeforeUse" xml:space="preserve">
    <value>T_This trigger needs to be assigned to a schedule before use</value>
  </data>
  <data name="CannotGenerateASingleMetadataAndNoMultipleMetadataAvailable" xml:space="preserve">
    <value>T_Cannot generate a single metadata, and no multiple metadata available</value>
  </data>
  <data name="InvalidIntervalProvided0" xml:space="preserve">
    <value>T_Invalid interval provided: T_{0}</value>
  </data>
  <data name="Trigger0IsNotAUserTrigger" xml:space="preserve">
    <value>T_Trigger {0} is not a user trigger</value>
  </data>
  <data name="ArrayIndex0ArrayLength1MembersCount2" xml:space="preserve">
    <value>T_arrayIndex:{0}; array.Length:{1}; members.Count:{2}</value>
  </data>
  <data name="TheProvidedTriggerIsAlreadyAssociatedWithADifferentSchedule" xml:space="preserve">
    <value>T_The provided trigger is already associated with a different schedule.</value>
  </data>
  <data name="TheProvidedTriggerIsAlreadyAssignedToADifferentGroup" xml:space="preserve">
    <value>T_The provided trigger is already assigned to a different group.</value>
  </data>
  <data name="_0IsAnAncestorOfThisTriggerATriggerCannotBeOwnedParentedByItself" xml:space="preserve">
    <value>T_{0} is an ancestor of this trigger. T_A trigger cannot be owned / parented by itself.</value>
  </data>
  <data name="TheEndDateOfATriggerGroupCannotBeModifiedInThisManner" xml:space="preserve">
    <value>T_The end date of a trigger group cannot be modified in this manner</value>
  </data>
  <data name="TheStartDateOfATriggerGroupCannotBeModifiedInThisManner" xml:space="preserve">
    <value>T_The start date of a trigger group cannot be modified in this manner</value>
  </data>
  <data name="TheModeOfATriggerGroupCannotBeModifiedInThisManner" xml:space="preserve">
    <value>T_The mode of a trigger group cannot be modified in this manner</value>
  </data>
  <data name="ThePriorityOfATriggerGroupCannotBeModifiedInThisManner" xml:space="preserve">
    <value>T_The priority of a trigger group cannot be modified in this manner</value>
  </data>
  <data name="UserAbortedSchedule" xml:space="preserve">
    <value>T_The schedule was stopped by the user</value>
  </data>
  <data name="BadMisfireActionForIndeterminateModes0" xml:space="preserve">
    <value>T_Bad Misfire action for indeterminate modes : T_{0}</value>
  </data>
  <data name="NoReasonFoundForNotExecutingSchedule0ButExecuteFlagIsUnset" xml:space="preserve">
    <value>T_No reason found for not executing schedule '{0}', but execute flag is unset</value>
  </data>
  <data name="BadMisfireActionForAlreadyRunningSchedule0" xml:space="preserve">
    <value>T_Bad Misfire action for already running schedule: T_{0}</value>
  </data>
  <data name="InstanceTimeMustBeProvidedForALog" xml:space="preserve">
    <value>T_Instance time must be provided for a log</value>
  </data>
  <data name="CannotUpdateThisLogItIsReadOnly" xml:space="preserve">
    <value>T_Cannot update this log - it is read-only</value>
  </data>
  <data name="StartIndexIsOutsideTheArrayBoundsOrLeavesTooLittleRoomForTheDaysInThisSet" xml:space="preserve">
    <value>T_Start index is outside the array bounds, or leaves too little room for the days in this set.</value>
  </data>
  <data name="EnumeratorHasFinished" xml:space="preserve">
    <value>T_Enumerator has finished</value>
  </data>
  <data name="EnumeratorHasNotBeenStarted" xml:space="preserve">
    <value>T_Enumerator has not been started</value>
  </data>
  <data name="NoDaysSet" xml:space="preserve">
    <value>T_[No Days Set]</value>
  </data>
  <data name="ThisSchedulerIsInertItCannotBeOperated" xml:space="preserve">
    <value>T_This scheduler is inert - it cannot be operated</value>
  </data>
  <data name="TheGivenScheduleIsRetiredItMustBeUnretiredBeforeSaving" xml:space="preserve">
    <value>T_The given schedule is retired - it must be unretired before saving</value>
  </data>
  <data name="InvalidState0InOrderToPerformThe1FunctionTheStateMustBeOneOf" xml:space="preserve">
    <value>T_Invalid state: {0} - in order to perform the {1}function, the state must be one of: </value>
  </data>
  <data name="WaitingForStates" xml:space="preserve">
    <value>T_Waiting for states: </value>
  </data>
  <data name="StateChangedFrom0To1" xml:space="preserve">
    <value> T_- state changed from {0} to {1}</value>
  </data>
  <data name="SchedulerThreadIsNotStartedCannotJoinIt" xml:space="preserve">
    <value>T_SchedulerThread is not started... cannot Join() it</value>
  </data>
  <data name="CannotReadATriggerFromANodeOfType0Named1" xml:space="preserve">
    <value>T_Cannot read a trigger from a node of type '{0}' named '{1}'</value>
  </data>
  <data name="NoCalendarFoundWithID0" xml:space="preserve">
    <value>T_No calendar found with ID: T_{0}</value>
  </data>
  <data name="NthOfMonth_None" xml:space="preserve">
    <value>T_None</value>
  </data>
  <data name="NthOfMonth_First" xml:space="preserve">
    <value>T_First</value>
  </data>
  <data name="NthOfMonth_Second" xml:space="preserve">
    <value>T_Second</value>
  </data>
  <data name="NthOfMonth_Third" xml:space="preserve">
    <value>T_Third</value>
  </data>
  <data name="NthOfMonth_Fourth" xml:space="preserve">
    <value>T_Fourth</value>
  </data>
  <data name="NthOfMonth_Fifth" xml:space="preserve">
    <value>T_Fifth</value>
  </data>
  <data name="NthOfMonth_Last" xml:space="preserve">
    <value>T_Last</value>
  </data>
  <data name="ScheduleCalendar_Name0" xml:space="preserve">
    <value>T_Name:{0}</value>
  </data>
  <data name="ScheduleCalendar_None" xml:space="preserve">
    <value>T_<None></value>
  </data>
    <data name="ScheduleCalendar_Configuration_OtherHolidays" xml:space="preserve">
    <value>T_;OtherHolidays:</value>
  </data>
    <data name="ScheduleCalendar_Configuration_Overrides0" xml:space="preserve">
    <value>T_;Overrides:[{0}]</value>
  </data>
    <data name="ScheduleCalendar_Configuration_PublicHolidays0" xml:space="preserve">
    <value>T_;PublicHolidays:{0}</value>
  </data>
    <data name="ScheduleCalendar_Configuration_WorkingWeek0" xml:space="preserve">
    <value>T_;WorkingWeek:{0}</value>
  </data>
</root>