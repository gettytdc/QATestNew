Imports AutomateControls
Imports AutomateControls.DataGridViews
Imports AutomateControls.UIState.UIElements
Imports BluePrism.AutomateAppCore
Imports BluePrism.AutomateAppCore.Auth
Imports BluePrism.AutomateAppCore.Resources
Imports BluePrism.BPCoreLib
Imports BluePrism.BPCoreLib.Collections
Imports BluePrism.ClientServerResources.Core.Events
Imports BluePrism.Server.Domain.Models

''' <summary>
''' Panel to display a set of active queues and their contents
''' </summary>
Public Class ActiveQueuePanel : Implements IChild, IRefreshable

#Region " Class-scope Declarations "

    ''' <summary>
    ''' A class to hold the payload used in the bwQueueRetriever background worker
    ''' </summary>
    Private Class QueueSubscribePayload
        ' True to fully refresh the grid; False to refresh in place
        Property FullRefresh As Boolean
        ' The identity of the queue to select after retrieval
        Property SelectedIdent As Integer
        ' The identities of the queues to retrieve the data for
        Property Idents As ICollection(Of Integer)
        ' The collection of controllers generated by the worker
        Property Controllers As ICollection(Of ActiveQueueController)
    End Class

#End Region

#Region " Member Variables "

    ' The identities of the queues handled by this panel
    Private mIdents As ICollection(Of Integer)

    ' The payload for the bwQueueRetriever background worker
    Private mSubscribePayload As QueueSubscribePayload

    ' The application form hosting this panel
    Private mAppForm As frmApplication

    Private WithEvents mConnManager As IResourceConnectionManager

    ' Gets the queue manager used within this queue panel, or null if there is not
    ' one available. This is set when a frmApplication is set in this panel
    Private WithEvents mQueueManager As ActiveQueueManager

#End Region

#Region " Properties "

    ''' <summary>
    ''' Gets or sets the application form hosting this panel
    ''' </summary>
    <Browsable(False),
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)>
    Private Property ParentAppForm As frmApplication Implements IChild.ParentAppForm
        Get
            Return mAppForm
        End Get
        Set(value As frmApplication)
            mAppForm = value
            mQueueManager = If(value Is Nothing, Nothing, value.QueueManager)
            If mAppForm IsNot Nothing Then
                mConnManager = mAppForm.ConnectionManager
                If TypeOf mConnManager Is ServerConnectionManager Then
                    AddHandler DirectCast(mConnManager, ServerConnectionManager).OnCallbackError, AddressOf CallbackChannelError
                End If
            End If
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the active queues to display on this panel
    ''' </summary>
    <Browsable(False),
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)>
    Public Property ActiveQueueIdents As ICollection(Of Integer)
        Get
            Return mIdents
        End Get
        Set(value As ICollection(Of Integer))
            ' If this collection matches what we already have, no need to change
            If CollectionUtil.AreEqual(mIdents, value) Then Return

            If mSubscribePayload IsNot Nothing Then Throw New InvalidStateException(
                My.Resources.ActiveQueuePanel_CannotSetNewQueueIdentitiesQueuesStillBeingSusbcribed)

            mIdents = value

            mSubscribePayload = New QueueSubscribePayload() With {
                .Idents = value,
                .FullRefresh = True,
                .SelectedIdent = SelectedQueueIdent
            }

            Me.Cursor = Cursors.WaitCursor
            bwQueueSubscriber.RunWorkerAsync()

        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the selected queue in this panel. If setting and the selected
    ''' queue was not found in this panel, no queue will be selected.
    ''' </summary>
    <Browsable(False),
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)>
    Public Property SelectedQueue As clsWorkQueue
        Get
            Return GetQueue(gridActiveQueues.SelectedRow)
        End Get
        Set(value As clsWorkQueue)
            ' If we have a value to set, search the grid for it and set it as the
            ' selected row if it's there
            If value Is Nothing Then gridActiveQueues.SelectedRow = Nothing : Return
            SelectedQueueIdent = value.Ident
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the identity of the selected queue in this panel. If setting and
    ''' a value is given which does not match the identity of any of the queues held
    ''' in this panel, no queue will be selected.
    ''' </summary>
    <Browsable(False),
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)>
    Public Property SelectedQueueIdent As Integer
        Get
            Dim payload As QueueSubscribePayload = mSubscribePayload
            If payload IsNot Nothing Then Return payload.SelectedIdent
            Return InnerSelectedQueueIdent
        End Get
        Set(value As Integer)
            ' If a payload exists, then the queue retriever is currently in use and
            ' the grid will be refreshed after that - set the selected ident into the
            ' payload so that the WorkerComplete handler will set it correctly
            ' I do this locally to avoid a race condition where it's nulled after I
            ' check and before I set the value
            Dim payload As QueueSubscribePayload = mSubscribePayload
            If payload IsNot Nothing Then payload.SelectedIdent = value

            ' Again, check the member var to ensure it's still exists - if it does
            ' then we know it's going to get handled.
            If mSubscribePayload IsNot Nothing Then Return

            ' And at this point we know that the payload doesn't exist. Just use the
            ' inner property, which has no knowledge of the payload
            InnerSelectedQueueIdent = value

        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the selected queue using the identity. Note that this property
    ''' has no knowledge of the retrieval background worker and its payload, and so
    ''' just operates on the grid in its current state.
    ''' </summary>
    Private Property InnerSelectedQueueIdent As Integer
        Get
            Dim q = SelectedQueue
            If q Is Nothing Then Return 0 Else Return q.Ident
        End Get
        Set(value As Integer)
            For Each row As DataGridViewRow In gridActiveQueues.Rows
                Dim q As clsWorkQueue = GetQueue(row)
                If q IsNot Nothing And q.Ident = value Then
                    gridActiveQueues.SelectedRow = row
                    Return
                End If
            Next
            ' The given value was not found to be an ident of any of the queues in
            ' the grid; so we 'deselect' the grid
            gridActiveQueues.SelectedRow = Nothing
        End Set
    End Property

    ''' <summary>
    ''' Gets whether this control is currently processing the subscriber payload
    ''' or not.
    ''' </summary>
    Private ReadOnly Property IsProcessingSubscriberPayload As Boolean
        Get
            Return (mSubscribePayload IsNot Nothing)
        End Get
    End Property

#End Region

#Region " Event Handling Methods "

    ''' <summary>
    ''' Handles this control loading by checking the user's permissions to see if
    ''' they have the correct permissions to edit the queues.
    ''' </summary>
    Protected Overrides Sub OnLoad(e As EventArgs)
        MyBase.OnLoad(e)
        ' Don't allow changes to the target resources if the user doesn't have full
        ' access to work queues *and* Control Resource - ie.
        ' by changing the target resources, they are altering the queue and starting
        ' or stopping sessions, so both are required.
        colTargetResources.ReadOnly = Not (
            User.Current.HasPermission(Permission.ControlRoom.ManageQueuesFullAccess) AndAlso
            User.Current.HasPermission(Permission.Resources.ControlResource))

    End Sub


    ''' <summary>
    ''' Event handler for a change in the selected row in the list of queues.
    ''' </summary>
    Private Sub HandleQueueSelection(ByVal sender As Object, ByVal e As EventArgs) _
     Handles gridActiveQueues.SelectedRowChanged
        ' We ignore this while the subscribe payload is being processed (a selection
        ' is made immediately after the grid is populated from the payload)
        If Not IsProcessingSubscriberPayload Then UpdateQueueContentsSelection()
    End Sub

    ''' <summary>
    ''' Updates the queue contents grid with the selection from the queue list
    ''' </summary>
    Private Sub UpdateQueueContentsSelection()
        Try
            Dim q As clsWorkQueue = SelectedQueue
            ' If no queue is selected or the same queue is still selected, quit now
            If q Is Nothing OrElse q.Id = gridContents.QueueId Then Return

            ' Populate the contents list for the selected queue
            ' We do this (semi-)asynchronously because when the queues are being
            ' added, we don't want this to pause on the first queue as it is
            ' selected, leaving the queue list half completed
            gridContents.QueueId = q.Id

        Catch ex As Exception
            UserMessage.Err(ex, My.Resources.ActiveQueuePanel_UnexpectedError0, ex.Message)

        End Try
    End Sub

    ''' <summary>
    ''' Handles a cell validating. This is currently only a target resources cell
    ''' since that's the only editable one. This ensures that the value set can be
    ''' catered for, and actually invokes the starting of sessions if necessary.
    ''' </summary>
    Private Sub HandleCellValidating(
     sender As Object, e As DataGridViewCellValidatingEventArgs) _
     Handles gridActiveQueues.CellValidating
        ' We're only interested in validating cells being edited
        If Not gridActiveQueues.IsCurrentCellInEditMode Then Return

        If e.ColumnIndex <> colTargetResources.Index Then Return
        If e.RowIndex < 0 Then Return
        Dim row As DataGridViewRow = gridActiveQueues.Rows.SharedRow(e.RowIndex)
        Dim cont = TryCast(row.Tag, ActiveQueueController)
        If cont Is Nothing Then Return

        Dim ctl = DirectCast(gridActiveQueues.EditingControl, NumericUpDown)
        Dim value As Integer = CInt(ctl.Value)

        Try
            cont.AimFor(value)
            Return

        Catch rue As ResourceUnavailableException
            UserMessage.Err(rue,
             My.Resources.ActiveQueuePanel_NoResourceWasAvailableToHandleTheSession)

        Catch ex As Exception
            UserMessage.Err(ex,
             My.Resources.ActiveQueuePanel_AnErrorOccurredWhileTryingToStartTheSession0, ex.Message)

        End Try

        ' If we get here, we must have come through the exception handlers. Assume
        ' that the event should be cancelled.
        e.Cancel = True
    End Sub

    ''' <summary>
    ''' Handles an error occurring in the active queue manager.
    ''' This passes the event to the UI thread and lets it display the error to the
    ''' user.
    ''' </summary>
    Private Sub HandleActiveQueueError(
     sender As Object, e As ActiveQueueErrorEventArgs) _
     Handles mQueueManager.ActiveQueueError
        If InvokeRequired Then
            Invoke(Sub() ShowActiveQueueError(e))
        Else
            ShowActiveQueueError(e)
        End If
    End Sub

    ''' <summary>
    ''' Handles a timer tick, updating the active queues when it occurs
    ''' </summary>
    Private Sub HandleTick(sender As Object, e As EventArgs) Handles mTimer.Tick
        mTimer.Stop()
        RefreshView(userRequest:=False, refreshStatistics:=True)
    End Sub

    ''' <summary>
    ''' Handles a cell beginning an edit. This is currently just the 'target
    ''' resources' entry, and it ensures that the
    ''' <see cref="DataGridViewNumericUpDownCell.Maximum">Maximum</see> value set in
    ''' the cell is set to the number of available resources.
    ''' </summary>
    Private Sub HandleCellBeginEdit(
     sender As Object, e As DataGridViewCellCancelEventArgs) _
     Handles gridActiveQueues.CellBeginEdit
        If e.ColumnIndex <> colTargetResources.Index Then Return
        If e.RowIndex < 0 Then Return
        Dim row As DataGridViewRow = gridActiveQueues.Rows.SharedRow(e.RowIndex)
        Dim q As clsWorkQueue = GetQueue(row)
        If q Is Nothing Then Return

        Dim cell = TryCast(row.Cells(e.ColumnIndex), DataGridViewNumericUpDownCell)
        If cell Is Nothing Then Return
        cell.Maximum = GetAvailableResourceCount(q, mQueueManager.GetActiveResourcesForQueues()) + q.ContinuingSessions.Count
    End Sub

    ''' <summary>
    ''' Does the background work of subscribing to the controllers in the queue
    ''' manager for the queues set within this panel. This will kick off the queue
    ''' retrieval from the database, which could be a long task (in order to generate
    ''' the statistics on the queue).
    ''' </summary>
    Private Sub HandleSubscriberDoWork(sender As Object, e As DoWorkEventArgs) _
     Handles bwQueueSubscriber.DoWork
        mSubscribePayload.Controllers =
            mQueueManager.Subscribe(mSubscribePayload.Idents)
    End Sub

    ''' <summary>
    ''' Handles the background queue retriever finishing its work, meaning that the
    ''' UI can be updated with the queue data.
    ''' </summary>
    Private Sub HandleSubscriberRunWorkerCompleted(
     sender As Object, e As RunWorkerCompletedEventArgs) _
     Handles bwQueueSubscriber.RunWorkerCompleted

        If Me.IsDisposed Then Return

        Dim load As QueueSubscribePayload = mSubscribePayload
        Try
            ' Check for errors and report them if found
            Dim ex As Exception = e.Error
            If ex IsNot Nothing Then
                UserMessage.Err(ex,
                 My.Resources.ActiveQueuePanel_AnErrorOccurredWhileSubscribingToTheActiveQueues0,
                 ex.Message)
                Return
            End If

            ' Clear what's there - if we have nothing to replace it with, exit now
            ' (prev selected queue is meaningless if there are no queues to select)
            ' FIXME: We need to handle a 'not FullRefresh' at some point; unused atm
            If load.FullRefresh Then gridActiveQueues.Rows.Clear()
            If load.Controllers.Count = 0 Then Return

            Dim resources = mQueueManager.GetActiveResourcesForQueues()

            Dim activeQueueRows As New List(Of DataGridViewRow)
            'Add a row For Each queue In the given collection, selecting the one
            For Each cont As ActiveQueueController In load.Controllers
                With cont.Queue
                    Dim newRow = New DataGridViewRow() With {.Tag = cont}
                    newRow.CreateCells(gridActiveQueues,
                        .RunningLabel,
                        .Name,
                        .RunningLabel,
                        .TargetSessionCount,
                        .RunningSessions.Count,
                        GetAvailableResourceCount(cont.Queue, resources),
                        .TimeRemainingDisplay,
                        .ElapsedTimeRemainingDisplay,
                        .EndTime,
                        .Completed,
                        .Pending,
                        .Exceptioned,
                        .TotalAttempts
                    )
                    activeQueueRows.Add(newRow)
                End With
            Next
            gridActiveQueues.Rows.AddRange(activeQueueRows.ToArray())
        Finally
            mSubscribePayload = Nothing
            Cursor = Cursors.Default
            gridContents.ToggleLinkShowPosition(value:=True)
        End Try

        ' We put the selection outside the finally block to ensure that the event
        ' handlers work (they ignore changes when 'subscribe payload' is not null
        ' because the rows could all change).
        If load.SelectedIdent <> 0 _
         Then InnerSelectedQueueIdent = load.SelectedIdent _
         Else InnerSelectedQueueIdent = load.Controllers.First().Queue.Ident

        ' We need to make sure that the contents matches the selected queue
        UpdateQueueContentsSelection()

    End Sub

    Private Function GetAvailableResourceCount(queue As clsWorkQueue, resources As ICollection(Of IResourceMachine)) As Integer

        Dim controller = mQueueManager.Controller(queue.Ident)
        Dim idleResourceNames = queue.IdleResourceNames

        Return controller.ActiveResourcesForQueue(resources).Where(Function(x)
                                                                       Return idleResourceNames.Contains(x.Name)
                                                                   End Function).Count
    End Function

    ''' <summary>
    ''' Handles an active queue session starting, ensuring that the view is up to
    ''' date with the data from active queue controllers if the session that was
    ''' started related to a queue in this panel.
    ''' </summary>
    Private Sub HandleActiveQueueSessionStarted(
     sender As Object, e As ActiveQueueSessionEventArgs) _
     Handles mQueueManager.ActiveQueueSessionStarted
        If mIdents?.Contains(e.QueueIdent) Then Invoke(Sub() RefreshView(False))
    End Sub

    ''' <summary>
    ''' Handles an active queue session start failing, ensuring that the view is up
    ''' to date with the data from active queue controllers if the session that was
    ''' started related to a queue in this panel.
    ''' </summary>
    Private Sub HandleActiveQueueSessionStartFailed(
     sender As Object, e As ActiveQueueSessionEventArgs) _
     Handles mQueueManager.ActiveQueueSessionStartFailed
        If mIdents.Contains(e.QueueIdent) Then Invoke(
            Sub()
                RefreshView(False)
                UserMessage.Err(
                    My.Resources.ActiveQueuePanel_ASessionForQueue0FailedToStartOnResource1,
                    mQueueManager.Controller(e.QueueIdent).Queue.Name,
                    e.ResourceName)
            End Sub
        )
    End Sub

    ''' <summary>
    ''' Handles an active queue session ending, ensuring that the view is up to
    ''' date with the data from active queue controllers if the session that was
    ''' started related to a queue in this panel.
    ''' </summary>
    Private Sub HandleActiveQueueSessionEnded(
     sender As Object, e As ActiveQueueSessionEventArgs) _
     Handles mQueueManager.ActiveQueueSessionEnded
        If mIdents.Contains(e.QueueIdent) Then Invoke(Sub() RefreshView(False))
    End Sub

    ''' <summary>
    ''' Handles the work required of the background queue refresher.
    ''' This requests a refresh of all queue data from the queue manager, optionally
    ''' including all statistics (if this was a user request).
    ''' </summary>
    Private Sub HandleRefresherDoWork(sender As Object, e As DoWorkEventArgs) _
     Handles bwRefresher.DoWork
        ' Get whether this was a user request or not; if it was, we update the
        ' statistics as well
        Dim arguments = TryCast(e.Argument, RefresherDoWorkArguments)

        If arguments IsNot Nothing Then _
            mQueueManager?.RefreshAll(arguments.RefreshStatistics)

        ' Let the completed handler know if this was a user request
        e.Result = If(arguments?.UserRequest, False)
    End Sub

    ''' <summary>
    ''' Handles the post-processing of a refresh background worker completing.
    ''' This ensures that the panel is enabled and updates the rows in the data
    ''' grid view, and finally refreshes the contents list.
    ''' </summary>
    Private Sub HandleRefresherRunWorkerCompleted(
     sender As Object, e As RunWorkerCompletedEventArgs) _
     Handles bwRefresher.RunWorkerCompleted
        ' We "enable" this panel whether this was a user request or not, just in
        ' case a user request came in while a background request was being served
        Me.Enabled = True
        If e.Error IsNot Nothing Then
            UserMessage.Err(e.Error,
             My.Resources.ActiveQueuePanel_AnErrorOccurredWhileRefreshingTheQueues0, e.Error.Message)
            Return
        End If

        If _mQueueManager IsNot Nothing Then
            Dim resources = mQueueManager.GetActiveResourcesForQueues()

            For Each row As DataGridViewRow In gridActiveQueues.Rows
                UpdateActiveQueueData(row, resources)
            Next

            ' Update the contents list as well, but only on a user request
            If CBool(e.Result) Then gridContents.RefreshList()

            If Not mTimer.Enabled Then
                mTimer.Start()
            End If
        End If
    End Sub

#End Region

#Region " Methods "

    ''' <summary>
    ''' Gets the row associated with the given work queue.
    ''' </summary>
    ''' <param name="q">The queue for which the corresponding data grid view row is
    ''' required</param>
    ''' <returns>The row associated with a queue which has the same identity as the
    ''' given queue (ie. which represents the same queue), or null if no such row was
    ''' found or a null queue was given.</returns>
    Private Function GetRow(q As clsWorkQueue) As DataGridViewRow
        If q Is Nothing Then Return Nothing
        For Each row As DataGridViewRow In gridActiveQueues.Rows
            Dim cont = TryCast(row.Tag, ActiveQueueController)
            If cont IsNot Nothing AndAlso cont.IsForQueue(q.Ident) Then Return row
        Next
        Return Nothing
    End Function

    ''' <summary>
    ''' Gets the queue associated with the given data grid view row.
    ''' </summary>
    ''' <param name="row">The row for which the work queue is required</param>
    ''' <returns>The work queue associated with the given row or null if a null row
    ''' was given or it does not represent a queue.</returns>
    Private Function GetQueue(row As DataGridViewRow) As clsWorkQueue
        If row Is Nothing Then Return Nothing
        Dim cont = TryCast(row.Tag, ActiveQueueController)
        Return If(cont Is Nothing, Nothing, cont.Queue)
    End Function

    ''' <summary>
    ''' Updates the active data grid view on the given queue.
    ''' </summary>
    ''' <param name="row">The row representing the queue whose active data should be
    ''' updated from the queue controller's data.</param>
    Private Sub UpdateActiveQueueData(row As DataGridViewRow, resources As ICollection(Of IResourceMachine))
        Dim q As clsWorkQueue = GetQueue(row)
        If q Is Nothing Then Return

        row.Cells(colActiveSessions.Name).Value = q.RunningSessions.Count
        row.Cells(colTargetResources.Name).Value = q.TargetSessionCount
        row.Cells(colAvailable.Name).Value = GetAvailableResourceCount(q, resources)
        row.Cells(colTimeRemaining.Name).Value = q.TimeRemainingDisplay
        row.Cells(colTimeElapsedRemaining.Name).Value = q.ElapsedTimeRemainingDisplay
        row.Cells(colEta.Name).Value = q.EndTime
        row.Cells(colWorked.Name).Value = q.Completed
        row.Cells(colPending.Name).Value = q.Pending + q.Locked
        row.Cells(colReferred.Name).Value = q.Exceptioned
        row.Cells(colTotal.Name).Value = q.TotalAttempts
        gridActiveQueues.InvalidateRow(row.Index)
    End Sub

    ''' <summary>
    ''' Shows the active queue error detailed in the given args
    ''' </summary>
    ''' <param name="e">The args detailing the event</param>
    Private Sub ShowActiveQueueError(e As ActiveQueueErrorEventArgs)
        ' We should be in the UI thread regardless of the event source thread
        Debug.Assert(Not InvokeRequired)

        UserMessage.Err(
            e.Exception, My.Resources.ActiveQueuePanel_ErrorInQueue01,
            mQueueManager.Controller(e.QueueIdent).Queue.Name, e.Exception.Message)

    End Sub

    ''' <summary>
    ''' Disposes of this panel
    ''' </summary>
    ''' <param name="disposing">True if disposing explicitly via a Dispose() call;
    ''' False if disposing via the object's finalizer.</param>
    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        Try
            If disposing Then
                If components IsNot Nothing Then components.Dispose()
                ParentAppForm = Nothing
                If TypeOf mConnManager Is ServerConnectionManager Then
                    RemoveHandler DirectCast(mConnManager, ServerConnectionManager).OnCallbackError, AddressOf CallbackChannelError
                End If
                mConnManager = Nothing
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    ''' <summary>
    ''' Refreshes the data in this active queue panel from the backing controllers.
    ''' </summary>
    Public Sub RefreshView() Implements IRefreshable.RefreshView
        If bwRefresher.IsBusy Then Return
        gSv.UpdateActiveQueueMI()
        RefreshView(True)
    End Sub

    Private Class RefresherDoWorkArguments
        Public UserRequest As Boolean
        Public RefreshStatistics As Boolean
    End Class

    ''' <summary>
    ''' Refreshes the data in this active queue panel from the backing controllers.
    ''' </summary>
    ''' <param name="userRequest">True if the refreshing request comes from direct
    ''' user interaction (eg. pressing 'Refresh'); False if it comes from a
    ''' background source (eg.a timer tick handler). This decides whether the
    ''' display is disabled while the data is requested or not.</param>
    Public Sub RefreshView(userRequest As Boolean, Optional ByVal refreshStatistics As Boolean = False)
        ' In the middle of subscribing, we don't want to upset it
        If mSubscribePayload IsNot Nothing Then Return

        ' If this came in from the user, disable the panel until the data is
        ' refreshed.
        If userRequest Then Me.Enabled = False

        ' Already refreshing, pointless continuing (the 'runworkcompleted' handler
        ' will deal with the re-enabling of the panel when the refresher is complete)
        If bwRefresher.IsBusy Then Return

        ' Kick off the refresher in the background
        Dim arguments = New RefresherDoWorkArguments() With {
            .UserRequest = userRequest,
            .RefreshStatistics = refreshStatistics
        }

        bwRefresher.RunWorkerAsync(arguments)
    End Sub

    Private Sub CallbackChannelError(e As FailedCallbackOperationEventArgs)
        UserMessage.Show(e.Message)
    End Sub

#End Region

End Class
