<process name="Make Queue Completed (US-6531)" version="1.0" bpversion="6.7.0.16957" narrative="" byrefcollection="true" preferredid="8caac868-05a9-4433-809e-387fa0e0a080">
  <view>
    <camerax>0</camerax>
    <cameray>63</cameray>
    <zoom version="2">1.25</zoom>
  </view>
  <preconditions />
  <endpoint narrative="" />
  <stage stageid="dff4d392-95f8-48e6-b6aa-015ef2df18c7" name="Start" type="Start">
    <display x="15" y="-105" />
    <onsuccess>4d887ebf-14b9-4954-8fca-c1fb42cb74b2</onsuccess>
  </stage>
  <stage stageid="da1e6f9a-e2fd-40d4-8580-c0e1b4329e56" name="End" type="End">
    <display x="15" y="255" />
  </stage>
  <stage stageid="afdaf111-db8c-4c86-98f4-6481ff2d28a8" name="Stage1" type="ProcessInfo">
    <display x="-120" y="-75" w="150" h="90" />
  </stage>
  <stage stageid="93bfe978-5d79-4527-a62c-ce1ea416a0be" name="Queue Name" type="Data">
    <loginhibit onsuccess="true" />
    <display x="-120" y="15" w="120" h="30" />
    <datatype>text</datatype>
    <initialvalue xml:space="preserve">Queue (US-6531)</initialvalue>
    <alwaysinit />
  </stage>
  <stage stageid="afd4ced0-94de-4712-babc-1dfc9ed11bbc" name="Input Data" type="Collection">
    <display x="-120" y="45" w="120" h="30" />
    <datatype>collection</datatype>
    <private />
    <alwaysinit />
    <collectioninfo>
      <field name="Data" type="text" />
    </collectioninfo>
    <initialvalue>
      <row>
        <field name="Data" type="text" value="a" />
      </row>
      <row>
        <field name="Data" type="text" value="b" />
      </row>
      <row>
        <field name="Data" type="text" value="c" />
      </row>
      <row>
        <field name="Data" type="text" value="d" />
      </row>
    </initialvalue>
  </stage>
  <stage stageid="4d887ebf-14b9-4954-8fca-c1fb42cb74b2" name="Add To Queue" type="Action">
    <loginhibit onsuccess="true" />
    <narrative>The Data collection contains the items to be added to the queue. The collection may contain single or multiple rows, with each representing an item to be added.

If there is a failure during the process, the queue will be unchanged - i.e. no rows will be loaded even if the error occurred on the last one.

If Defer Until is specified, the items will not be available to be worked until then. Otherwise, they are available immediately.

If the queue has a key field defined, an item added has key data longer than the maximum permitted 255 characters, an error will occur</narrative>
    <display x="15" y="-60" w="90" h="30" />
    <inputs>
      <input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue to add items to" expr="[Queue Name]" />
      <input type="collection" name="Data" friendlyname="Data" narrative="A collection containing the data, one row for each item to be added" expr="[Input Data]" />
      <input type="datetime" name="Defer Until" friendlyname="Defer Until" narrative="Optionally, the date/time the new item(s) should be deferred until" expr="" />
      <input type="number" name="Priority" friendlyname="Priority" narrative="Optionally, the priority for the new item(s). Lower numbers represent higher priorities. The default is 0." expr="" />
      <input type="text" name="Tags" friendlyname="Tags" narrative="Optionally, a semi-colon-separated set of tags to apply to the queue item(s)" expr="" />
      <input type="text" name="Status" friendlyname="Status" narrative="Optionally, the initial status required of the work queue item(s) " expr="" />
      <input type="number" name="Batch Size" friendlyname="Batch Size" narrative="Optionally, the batch size to use when adding many items to the queue.  A Value of 0 will process all items in one batch.  An empty field will use the default batch size of 1000." expr="" />
    </inputs>
    <outputs>
      <output type="collection" name="Item IDs" friendlyname="Item IDs" narrative="The IDs of the items which have been added to the queue, in the order of the collection of data passed that was input" stage="" />
    </outputs>
    <onsuccess>180a7c9f-4831-4143-bb4b-80a24a65cf95</onsuccess>
    <resource object="Blueprism.Automate.clsWorkQueuesActions" action="Add To Queue" />
  </stage>
  <stage stageid="180a7c9f-4831-4143-bb4b-80a24a65cf95" name="Get Next Item" type="Action">
    <narrative>This action gets the next item to be worked from the queue, returning its details and locking it so no other case can work it.

Items with higher priorities (lower numerical value) are processed first. Where the priority is the same, the next item is the one that has been in the queue the longest,  is not already locked, and is not already completed.

The Item ID returned is used to make further calls to update the work status for that item. It may be empty, in which case there are no items available. This can mean either a) the queue is empty, or b) the queue is not running. This mechanism can be used to cleanly stop all processes working a particular queue at the end of the next case. Items that have a 'deferred' time set will not be returned unless that time has been reached.</narrative>
    <display x="15" y="-15" w="90" h="30" />
    <inputs>
      <input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue" expr="[Queue Name]" />
      <input type="text" name="Key Filter" friendlyname="Key Filter" narrative="Optionally, a key value to filter by. Only items with this key value will be considered." expr="" />
      <input type="text" name="Tag Filter" friendlyname="Tag Filter" narrative="Optionally, a tag mask to filter by. This can consist of any number of tag searches - each term can be separated by a semi-colon and they are all applied to the search (ie. they are AND'ed terms not OR'ed terms). For example, &quot;Account: Joint; -Balance: Overdrawn; Card: *Visa*&quot; will include any items which match all the terms, ie. every item must have an 'Account: Joint' tag applied, no item can have a 'Balance: Overdrawn' tag applied, every item must have a tag applied which starts with 'Card: ' and then contains the text 'Visa'." expr="" />
    </inputs>
    <outputs>
      <output type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item retrieved - empty if there are none available." stage="Item ID" />
      <output type="collection" name="Data" friendlyname="Data" narrative="The data associated with the item - a single collection row." stage="" />
      <output type="text" name="Status" friendlyname="Status" narrative="The status of the item." stage="" />
      <output type="number" name="Attempts" friendlyname="Attempts" narrative="The number of attempts already made to work this item." stage="" />
    </outputs>
    <onsuccess>859579e8-b7f1-4889-b148-701887056ad8</onsuccess>
    <resource object="Blueprism.Automate.clsWorkQueuesActions" action="Get Next Item" />
  </stage>
  <stage stageid="dc9be2a9-9df5-46a5-9f6d-8bbabe6ae831" name="Item ID" type="Data">
    <display x="-120" y="120" w="120" h="30" />
    <datatype>text</datatype>
    <initialvalue />
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="859579e8-b7f1-4889-b148-701887056ad8" name="Mark Completed" type="Action">
    <loginhibit onsuccess="true" />
    <narrative>Marks the item as completed, by updating the Completed timestamp and setting Locked to null. The item must be 'owned' by the calling process - i.e. it must have been retrieved using Get Next Item.</narrative>
    <display x="15" y="30" w="90" h="30" />
    <inputs>
      <input type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item to mark" expr="[Item ID]" />
    </inputs>
    <onsuccess>601d5f6f-7da6-4557-af21-bcb25a086388</onsuccess>
    <resource object="Blueprism.Automate.clsWorkQueuesActions" action="Mark Completed" />
  </stage>
  <stage stageid="601d5f6f-7da6-4557-af21-bcb25a086388" name="Get Next Item" type="Action">
    <narrative>This action gets the next item to be worked from the queue, returning its details and locking it so no other case can work it.

Items with higher priorities (lower numerical value) are processed first. Where the priority is the same, the next item is the one that has been in the queue the longest,  is not already locked, and is not already completed.

The Item ID returned is used to make further calls to update the work status for that item. It may be empty, in which case there are no items available. This can mean either a) the queue is empty, or b) the queue is not running. This mechanism can be used to cleanly stop all processes working a particular queue at the end of the next case. Items that have a 'deferred' time set will not be returned unless that time has been reached.</narrative>
    <display x="15" y="75" w="90" h="30" />
    <inputs>
      <input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue" expr="[Queue Name]" />
      <input type="text" name="Key Filter" friendlyname="Key Filter" narrative="Optionally, a key value to filter by. Only items with this key value will be considered." expr="" />
      <input type="text" name="Tag Filter" friendlyname="Tag Filter" narrative="Optionally, a tag mask to filter by. This can consist of any number of tag searches - each term can be separated by a semi-colon and they are all applied to the search (ie. they are AND'ed terms not OR'ed terms). For example, &quot;Account: Joint; -Balance: Overdrawn; Card: *Visa*&quot; will include any items which match all the terms, ie. every item must have an 'Account: Joint' tag applied, no item can have a 'Balance: Overdrawn' tag applied, every item must have a tag applied which starts with 'Card: ' and then contains the text 'Visa'." expr="" />
    </inputs>
    <outputs>
      <output type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item retrieved - empty if there are none available." stage="Item ID" />
      <output type="collection" name="Data" friendlyname="Data" narrative="The data associated with the item - a single collection row." stage="" />
      <output type="text" name="Status" friendlyname="Status" narrative="The status of the item." stage="" />
      <output type="number" name="Attempts" friendlyname="Attempts" narrative="The number of attempts already made to work this item." stage="" />
    </outputs>
    <onsuccess>c12d8d3e-37b2-4e1b-b2d3-cd9dce0a8a60</onsuccess>
    <resource object="Blueprism.Automate.clsWorkQueuesActions" action="Get Next Item" />
  </stage>
  <stage stageid="2d4844dc-2548-4b61-96ff-d65b46c4a177" name="Get Next Item" type="Action">
    <narrative>This action gets the next item to be worked from the queue, returning its details and locking it so no other case can work it.

Items with higher priorities (lower numerical value) are processed first. Where the priority is the same, the next item is the one that has been in the queue the longest,  is not already locked, and is not already completed.

The Item ID returned is used to make further calls to update the work status for that item. It may be empty, in which case there are no items available. This can mean either a) the queue is empty, or b) the queue is not running. This mechanism can be used to cleanly stop all processes working a particular queue at the end of the next case. Items that have a 'deferred' time set will not be returned unless that time has been reached.</narrative>
    <display x="15" y="165" w="90" h="30" />
    <inputs>
      <input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue" expr="[Queue Name]" />
      <input type="text" name="Key Filter" friendlyname="Key Filter" narrative="Optionally, a key value to filter by. Only items with this key value will be considered." expr="" />
      <input type="text" name="Tag Filter" friendlyname="Tag Filter" narrative="Optionally, a tag mask to filter by. This can consist of any number of tag searches - each term can be separated by a semi-colon and they are all applied to the search (ie. they are AND'ed terms not OR'ed terms). For example, &quot;Account: Joint; -Balance: Overdrawn; Card: *Visa*&quot; will include any items which match all the terms, ie. every item must have an 'Account: Joint' tag applied, no item can have a 'Balance: Overdrawn' tag applied, every item must have a tag applied which starts with 'Card: ' and then contains the text 'Visa'." expr="" />
    </inputs>
    <outputs>
      <output type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item retrieved - empty if there are none available." stage="Item ID" />
      <output type="collection" name="Data" friendlyname="Data" narrative="The data associated with the item - a single collection row." stage="" />
      <output type="text" name="Status" friendlyname="Status" narrative="The status of the item." stage="" />
      <output type="number" name="Attempts" friendlyname="Attempts" narrative="The number of attempts already made to work this item." stage="" />
    </outputs>
    <onsuccess>28c20736-0bd9-48c0-9a0f-31881368a909</onsuccess>
    <resource object="Blueprism.Automate.clsWorkQueuesActions" action="Get Next Item" />
  </stage>
  <stage stageid="85634671-37ae-4810-aa63-a76f4b81fd93" name="Input Variables" type="Block">
    <loginhibit onsuccess="true" />
    <display x="-195" y="-15" w="150" h="90" />
    <font family="Segoe UI" size="10" style="Regular" color="7FB2E5" />
  </stage>
  <stage stageid="dd6c022e-bb3f-442b-9ca2-e84c93eda358" name="Local Variables" type="Block">
    <loginhibit onsuccess="true" />
    <display x="-195" y="90" w="150" h="60" />
    <font family="Segoe UI" size="10" style="Regular" color="7FB2E5" />
  </stage>
  <stage stageid="c12d8d3e-37b2-4e1b-b2d3-cd9dce0a8a60" name="Mark Completed" type="Action">
    <loginhibit onsuccess="true" />
    <narrative>Marks the item as completed, by updating the Completed timestamp and setting Locked to null. The item must be 'owned' by the calling process - i.e. it must have been retrieved using Get Next Item.</narrative>
    <display x="15" y="120" w="90" h="30" />
    <inputs>
      <input type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item to mark" expr="[Item ID]" />
    </inputs>
    <onsuccess>2d4844dc-2548-4b61-96ff-d65b46c4a177</onsuccess>
    <resource object="Blueprism.Automate.clsWorkQueuesActions" action="Mark Completed" />
  </stage>
  <stage stageid="28c20736-0bd9-48c0-9a0f-31881368a909" name="Mark Completed" type="Action">
    <loginhibit onsuccess="true" />
    <narrative>Marks the item as completed, by updating the Completed timestamp and setting Locked to null. The item must be 'owned' by the calling process - i.e. it must have been retrieved using Get Next Item.</narrative>
    <display x="15" y="210" w="90" h="30" />
    <inputs>
      <input type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item to mark" expr="[Item ID]" />
    </inputs>
    <onsuccess>da1e6f9a-e2fd-40d4-8580-c0e1b4329e56</onsuccess>
    <resource object="Blueprism.Automate.clsWorkQueuesActions" action="Mark Completed" />
  </stage>
</process>