
Namespace Collections

    ''' <summary>
    ''' Class to represent a dictionary of collections - eg. a list of roles mapped
    ''' to their user ids or such like
    ''' </summary>
    ''' <typeparam name="TKey">The type of the key in the dictionary</typeparam>
    ''' <typeparam name="TValue">The type of the value in the dictionary - ie. the
    ''' type which is held <em>within</em> the collection mapped against the key, not
    ''' the type of the collection itself.</typeparam>
    <Serializable, DebuggerDisplay("Count: {Count}")>
    Public Class clsCollectionDictionary(Of TKey, TValue)
        Inherits Dictionary(Of TKey, ICollection(Of TValue))

#Region " Class-scope declarations "

        ''' <summary>
        ''' Function which can be used as a delegate to create a
        ''' <see cref="List(Of TValue)"/> for this collection dictionary
        ''' </summary>
        ''' <returns>An empty list of the required type</returns>
        Public Shared Function CreateList() As ICollection(Of TValue)
            Return New List(Of TValue)
        End Function

        ''' <summary>
        ''' Function which can be used as a delegate to create a
        ''' <see cref="clsSet(Of TValue)"/> for this collection dictionary
        ''' </summary>
        ''' <returns>An empty set of the required type</returns>
        Public Shared Function CreateSet() As ICollection(Of TValue)
            Return New clsSet(Of TValue)
        End Function

#End Region

#Region " Member Variables "

        ' The function which is used to create a new collection
        Private mCreateCollectionCallee As Func(Of ICollection(Of TValue))

#End Region

#Region " Constructors "

        ''' <summary>
        ''' Creates a new dictionary of collections which will generate a dictionary
        ''' of <see cref="List(Of TValue)"/> values
        ''' </summary>
        Public Sub New()
            Me.New(Nothing, Nothing)
        End Sub

        ''' <summary>
        ''' Creates a new dictionary of collections which will generate a dictionary
        ''' of lists, initialising it with the values from a provided dictionary.
        ''' </summary>
        ''' <param name="template">A dictionary from which the values should be copied;
        ''' note that the keys and collection elements are not cloned and are just
        ''' set within this dictionary, meaning reference types will be pointing to
        ''' the same objects in this dictionary as well as the given template.</param>
        ''' <remarks>Note that the collection creator is only invoked by using the
        ''' overloaded <see cref="Add"/> method which accepts a single item of type
        ''' <c>TValue</c>.</remarks>
        Public Sub New(ByVal template As IDictionary(Of TKey, ICollection(Of TValue)))
            Me.New(Nothing, template)
        End Sub

        ''' <summary>
        ''' Creates a new dictionary of collections which will generate a dictionary
        ''' of collections as generated by the given delegate
        ''' </summary>
        ''' <param name="collectionCreator">The function delegate which will return a
        ''' newly initialised, empty collection for use in this object.</param>
        ''' <remarks>Note that the collection creator is only invoked by using the
        ''' overloaded <see cref="Add"/> method which accepts a single item of type
        ''' <c>TValue</c>.</remarks>
        Public Sub New(ByVal collectionCreator As Func(Of ICollection(Of TValue)))
            If collectionCreator Is Nothing Then _
             Throw New ArgumentNullException(NameOf(collectionCreator))
            mCreateCollectionCallee = collectionCreator
        End Sub

        ''' <summary>
        ''' Creates a new dictionary of collections which will generate a dictionary
        ''' of collections as generated by a specified delegate, initialising it with
        ''' the values from a provided dictionary.
        ''' </summary>
        ''' <param name="collectionCreator">The function delegate which will return a
        ''' newly initialised, empty collection for use in this object.</param>
        ''' <param name="template">A dictionary from which the values should be copied;
        ''' note that the keys and collection elements are not cloned and are just
        ''' set within this dictionary, meaning reference types will be pointing to
        ''' the same objects in this dictionary as well as the given template.</param>
        ''' <remarks>Note that the collection creator is only invoked by using the
        ''' overloaded <see cref="Add"/> method which accepts a single item of type
        ''' <c>TValue</c>.</remarks>
        Public Sub New( _
         ByVal collectionCreator As Func(Of ICollection(Of TValue)), _
         ByVal template As IDictionary(Of TKey, ICollection(Of TValue)))
            If collectionCreator Is Nothing _
             Then mCreateCollectionCallee = AddressOf CreateList _
             Else mCreateCollectionCallee = collectionCreator
            If template IsNot Nothing Then
                For Each k As TKey In template.Keys
                    For Each v As TValue In template(k) : Add(k, v) : Next
                Next
            End If


        End Sub

#End Region

#Region " Methods "

        ''' <summary>
        ''' Adds a single item to the collection mapped to a specified key value
        ''' </summary>
        ''' <param name="key">The key value to which the item should be mapped
        ''' </param>
        ''' <param name="singleItem">The single item to add to the collection held
        ''' against the specified <paramref name="key"/></param>
        Public Overloads Sub Add(ByVal key As TKey, ByVal singleItem As TValue)
            Dim coll As ICollection(Of TValue) = Nothing
            If Not TryGetValue(key, coll) Then
                coll = mCreateCollectionCallee()
                Me(key) = coll
            End If
            coll.Add(singleItem)
        End Sub


        ''' <summary>
        ''' Removes the first occurrence of a specific object from the collection
        ''' mapped against a given key within this dictionary.
        ''' </summary>
        ''' <param name="key">The key whose collection should have the item removed.
        ''' </param>
        ''' <param name="singleItem">The item to remove from the collection.</param>
        ''' <returns>True if there was a collection within this dictionary mapped
        ''' against the given <paramref name="key"/> and it was altered as a result
        ''' of the Remove call; False if there was no collection, or it did not
        ''' contain the item which was to be removed.</returns>
        Public Overloads Function Remove( _
         ByVal key As TKey, ByVal singleItem As TValue) As Boolean
            Dim coll As ICollection(Of TValue) = Nothing
            If Not TryGetValue(key, coll) Then Return False
            Return coll.Remove(singleItem)
        End Function

#End Region

    End Class

End Namespace
