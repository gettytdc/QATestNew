<?xml version="1.0" encoding="utf-8"?>
<process name="始Utility - JSON終" version="1.0" bpversion="6.0.0.0" narrative="始An object for parsing JSON into a collection and turning a collection into JSON.終" type="object" runmode="Exclusive" preferredid="d39ef435-da5c-4e38-a846-b903b2cf3d8e">
  <appdef>
    <element name="Application Root">
      <id>8f20ac0c-296f-43c3-b0d9-59b5b2b7da1c</id>
      <type>Application</type>
      <basetype>Application</basetype>
      <datatype>unknown</datatype>
      <diagnose>False</diagnose>
    </element>
  </appdef>
  <view>
    <camerax>0</camerax>
    <cameray>0</cameray>
    <zoom version="2">1.25</zoom>
  </view>
  <preconditions />
  <endpoint narrative="" />
  <subsheet subsheetid="6a9ccb5a-8cc3-44ac-b343-39680558062f" type="CleanUp" published="True">
    <name>始Clean Up終</name>
    <view>
      <camerax>0</camerax>
      <cameray>0</cameray>
      <zoom version="2">1.25</zoom>
    </view>
  </subsheet>
  <subsheet subsheetid="560472b9-cea4-41d5-bc36-c49d6c1b26e6" type="Normal" published="True">
    <name>始Collection to JSON終</name>
    <view>
      <camerax>0</camerax>
      <cameray>0</cameray>
      <zoom version="2">1.25</zoom>
    </view>
  </subsheet>
  <subsheet subsheetid="e5aeb4cb-cd25-4535-b3be-b46681b4e6b6" type="Normal" published="True">
    <name>始JSON to Collection終</name>
    <view>
      <camerax>0</camerax>
      <cameray>0</cameray>
      <zoom version="2">1.25</zoom>
    </view>
  </subsheet>
  <subsheet subsheetid="e53062c7-68de-4763-b37a-456688d0d607" type="Normal" published="True">
    <name>始JSON to Collection (skipping JArray)終</name>
    <view>
      <camerax>0</camerax>
      <cameray>0</cameray>
      <zoom version="2">1.25</zoom>
    </view>
  </subsheet>
  <stage stageid="222ee4c2-914e-4b2b-8e13-443c1c76b3dd" name="Start" type="Start">
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <onsuccess>ff6524a3-da73-439c-a4ba-2aabb994009c</onsuccess>
  </stage>
  <stage stageid="ff6524a3-da73-439c-a4ba-2aabb994009c" name="End" type="End">
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>90</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="7fd071f3-6769-4dd5-95cf-a911c73c42ff" name="Stage1" type="ProcessInfo">
    <narrative></narrative>
    <displayx>-195</displayx>
    <displayy>-105</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <references>
      <reference>System.Data.dll</reference>
      <reference>System.Xml.dll</reference>
      <reference>System.Drawing.dll</reference>
      <reference>Newtonsoft.Json.dll</reference>
      <reference>System.Core.dll</reference>
    </references>
    <imports>
      <import>System.Data</import>
      <import>System.Drawing</import>
      <import>Newtonsoft.Json</import>
      <import>System.Collections.Generic</import>
      <import>System.Text</import>
      <import>System.IO</import>
      <import>System</import>
      <import>Newtonsoft.Json.Linq</import>
      <import>System.Collections</import>
      <import>System.Linq</import>
    </imports>
    <language>visualbasic</language>
    <globalcode><![CDATA[]]></globalcode>
    <code><![CDATA[    Private Class JSON
        Public Const Array As String = "JSON:Array"
        Public Const Null As String = "JSON:Null"
    End Class
    
    Private mUseNewParseMethod As Boolean

    Public Function ConvertToJSON(ByVal dt As DataTable) As String
        Dim o As Object = SerialiseGeneric(dt, True)
        Return JsonConvert.SerializeObject(o)
    End Function

    Public Function SerialiseGeneric(ByVal o As Object, ByVal removeArray As Boolean) As Object
        Dim dt As DataTable = TryCast(o, DataTable)
        If dt IsNot Nothing Then
            Return SerialiseDataTable(dt)
        End If

        Dim dr As DataRow = TryCast(o, DataRow)
        If dr IsNot Nothing Then
            Return SerialiseDataRow(dr, removeArray)
        End If

        Dim s As String = TryCast(o, String)
        If s IsNot Nothing AndAlso s = JSON.Null Then
            Return Nothing
        End If

        If o IsNot Nothing Then
            Return o
        End If

        Return Nothing
    End Function

    Public Function SerialiseDataTable(ByVal dt As DataTable) As Object
        If  IsSingleRow(dt) Then
            Return SerialiseGeneric(dt.Rows(0), False)
        Else
            Dim ja As New JArray()
            For Each r As DataRow In dt.Rows
                ja.Add(SerialiseGeneric(r, True))
            Next
            Return ja
        End If
    End Function

    Public Function IsSingleRow(ByVal dt As DataTable) As Boolean
        If dt.ExtendedProperties.Contains("SingleRow") Then
            Return CBool(dt.ExtendedProperties("SingleRow"))
        End If
        'Fallback for older versions of blueprism
        Return dt.Rows.Count = 1
    End Function

    Public Function SerialiseDataRow(ByVal dr As DataRow, ByVal removeArray As Boolean) As Object
        Dim jo As New JObject()
        For Each c As DataColumn In dr.Table.Columns
            Dim s As String = c.ColumnName
            If removeArray AndAlso s = JSON.Array Then
                Return SerialiseGeneric(dr(s), True)
            End If
            jo(s) = JToken.FromObject(SerialiseGeneric(dr(s), False))
        Next
        Return jo
    End Function

    Public Function ConvertToDataTable(ByVal json As String) As DataTable
        Dim o As Object = JsonConvert.DeserializeObject(json)
        Return DirectCast(DeserialiseGeneric(o, True), DataTable)
    End Function

    Private Function DeserialiseGeneric(ByVal o As Object, ByVal populate As Boolean) As Object
        Dim a As JArray = TryCast(o, JArray)
        If a IsNot Nothing Then
            Return If(mUseNewParseMethod,
                DeserialiseArrayWithoutJArray(a, populate),
                DeserialiseArray(a, populate)
            )
        End If

        Dim jo As JObject = TryCast(o, JObject)
        If jo IsNot Nothing Then
            Return DeserialiseObject(jo, populate)
        End If

        Dim jv As JValue = TryCast(o, JValue)
        If jv IsNot Nothing Then
            Return jv.Value
        End If

        Return JSON.Null
    End Function

    Private Function GetKey(ByVal kv As KeyValuePair(Of String, JToken)) As String
        If kv.Key IsNot Nothing Then
            Return kv.Key.ToString()
        End If
        Return ""
    End Function


    Private Function DeserialiseObject(ByVal o As JObject, ByVal populate As Boolean) As DataTable
        Dim dt As New DataTable

        For Each kv As KeyValuePair(Of String, JToken) In o
            Dim type As Type = GetTypeOf(DeserialiseGeneric(kv.Value, False))
            dt.Columns.Add(GetKey(kv), type)
        Next

        If populate Then
            Dim dr As DataRow = dt.NewRow()
            For Each kv As KeyValuePair(Of String, JToken) In o
                dr(getKey(kv)) = DeserialiseGeneric(kv.Value, True)
            Next
            dt.Rows.Add(dr)
        End If

        Return dt
    End Function

    Private Function DeserialiseArrayWithoutJArray(ByVal jarr As JArray, ByVal populate As Boolean) As DataTable
        Dim dt As New DataTable

        Dim first As Type = Nothing
        For Each e As Object In jarr
            If first Is Nothing Then
                first = GetTypeOf(DeserialiseGeneric(e, False))
            End If
            If GetTypeOf(DeserialiseGeneric(e, False)) IsNot first Then
                Throw New Exception("Data Type mismatch in array")
            End If
        Next

        Dim columns As New Specialized.OrderedDictionary()
        Dim allTypesInColumnsMatch = jarr.All(
            Function(e)
                If Not TypeOf e Is JObject Then Return False
                For Each pair As KeyValuePair(Of String, JToken) In DirectCast(e, JObject)
                    Dim val As Object = pair.Value
                    If TypeOf val Is JValue Then val = CType(val, JValue).Value
                    Dim tp = If(val, CObj("")).GetType()

                    If columns.Contains(pair.Key) Then
                        If tp <> columns(pair.Key) Then Return False
                    Else
                        columns(pair.Key) = tp
                    End If
                Next
                Return True

            End Function
        )

        If allTypesInColumnsMatch Then
            For Each pair As DictionaryEntry In columns
                Dim key As String = CStr(pair.Key)
                Dim tp as Type = CType(pair.Value, Type)
                If tp = GetType(JObject) OrElse tp = GetType(JArray) Then
                    dt.Columns.Add(key, GetType(DataTable))
                Else
                    dt.Columns.Add(key, tp)
                End If
            Next
        ElseIf first IsNot Nothing Then
            dt.Columns.Add(JSON.Array, first)
        End If

        If populate Then
            For Each e As Object In jarr
                Dim dr As DataRow = dt.NewRow()
                If allTypesInColumnsMatch Then
                    For Each pair As KeyValuePair(Of String, JToken) In DirectCast(e, JObject)
                        dr(pair.Key) = DeserialiseGeneric(pair.Value, True)
                    Next
                Else
                    dr(JSON.Array) = DeserialiseGeneric(e, True)
                End If

                dt.Rows.Add(dr)
            Next
        End If

        Return dt
    End Function

    Private Function DeserialiseArray(ByVal o As JArray, ByVal populate As Boolean) As DataTable
        Dim dt As New DataTable

        Dim first As Type = Nothing
        For Each e As Object In o
            If first Is Nothing Then
                first = GetTypeOf(DeserialiseGeneric(e, False))
            End If
            If GetTypeOf(DeserialiseGeneric(e, False)) IsNot first Then
                Throw New Exception("Data Type mismatch in array")
            End If
        Next
        If first IsNot Nothing Then
            dt.Columns.Add(JSON.Array, first)
        End If

        If populate Then
            For Each e As Object In o
                Dim dr As DataRow = dt.NewRow()
                dr(JSON.Array) = DeserialiseGeneric(e, True)
                dt.Rows.Add(dr)
            Next
        End If

        Return dt
    End Function

    Private Function GetTypeOf(ByVal o As Object) As Type
        If o Is Nothing Then Return GetType(String)
        Return o.GetType
    End Function]]></code>
  </stage>
  <stage stageid="c290e7f4-b01b-4012-9422-044432a3cc82" name="Clean Up" type="SubSheetInfo">
    <subsheetid>6a9ccb5a-8cc3-44ac-b343-39680558062f</subsheetid>
    <narrative></narrative>
    <displayx>-195</displayx>
    <displayy>-105</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="662f70f7-7036-462d-b9bf-f35265dd971a" name="Start" type="Start">
    <subsheetid>6a9ccb5a-8cc3-44ac-b343-39680558062f</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <onsuccess>153f4275-2acd-48a5-b6e6-409fcb2441a8</onsuccess>
  </stage>
  <stage stageid="153f4275-2acd-48a5-b6e6-409fcb2441a8" name="End" type="End">
    <subsheetid>6a9ccb5a-8cc3-44ac-b343-39680558062f</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>90</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="885aaf30-a216-44c5-975b-ca58ce02f815" name="JSON to Collection" type="SubSheetInfo">
    <subsheetid>e5aeb4cb-cd25-4535-b3be-b46681b4e6b6</subsheetid>
    <narrative></narrative>
    <displayx>-195</displayx>
    <displayy>-105</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="e5625896-d966-4a10-aa39-2e85611f490f" name="Start" type="Start">
    <subsheetid>e5aeb4cb-cd25-4535-b3be-b46681b4e6b6</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="json" stage="json" />
    </inputs>
    <onsuccess>779de445-0658-4a45-a1ef-a38d6de24429</onsuccess>
  </stage>
  <stage stageid="66526e3e-8b9e-4452-9ca8-f70baa9aec4a" name="End" type="End">
    <subsheetid>e5aeb4cb-cd25-4535-b3be-b46681b4e6b6</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>45</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <outputs>
      <output type="collection" name="Result" stage="Result" />
    </outputs>
  </stage>
  <stage stageid="007e04e2-4ed0-4afd-87d3-c06d79f48d86" name="new" type="Note">
    <subsheetid>6a9ccb5a-8cc3-44ac-b343-39680558062f</subsheetid>
    <narrative>始Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.終</narrative>
    <displayx>-180</displayx>
    <displayy>60</displayy>
    <displaywidth>180</displaywidth>
    <displayheight>230</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="d92fd7fc-b028-457a-a14a-17d66c4b5513" name="new" type="Note">
    <narrative>始Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.終</narrative>
    <displayx>-180</displayx>
    <displayy>60</displayy>
    <displaywidth>180</displaywidth>
    <displayheight>230</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="779de445-0658-4a45-a1ef-a38d6de24429" name="JSON To Collection" type="Code">
    <subsheetid>e5aeb4cb-cd25-4535-b3be-b46681b4e6b6</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>-30</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="json" expr="[json]" />
    </inputs>
    <outputs>
      <output type="collection" name="result" stage="Result" />
    </outputs>
    <onsuccess>66526e3e-8b9e-4452-9ca8-f70baa9aec4a</onsuccess>
    <code><![CDATA[result = ConvertToDataTable(json)]]></code>
  </stage>
  <stage stageid="da3984e5-ce52-4649-81c5-a71d452a5ba0" name="json" type="Data">
    <subsheetid>e5aeb4cb-cd25-4535-b3be-b46681b4e6b6</subsheetid>
    <narrative></narrative>
    <displayx>90</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>text</datatype>
    <initialvalue />
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="0e93e91c-85e1-4c75-b74c-52d08c0724e6" name="Collection to JSON" type="SubSheetInfo">
    <subsheetid>560472b9-cea4-41d5-bc36-c49d6c1b26e6</subsheetid>
    <narrative></narrative>
    <displayx>-195</displayx>
    <displayy>-105</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="c10fccbd-439b-447d-908a-58f20a540146" name="Start" type="Start">
    <subsheetid>560472b9-cea4-41d5-bc36-c49d6c1b26e6</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="collection" name="Data" stage="Data" />
    </inputs>
    <onsuccess>7923115c-5283-4694-b2c1-142afb4d3788</onsuccess>
  </stage>
  <stage stageid="ede1f653-07f1-42eb-8616-8d2d3dfb5244" name="End" type="End">
    <subsheetid>560472b9-cea4-41d5-bc36-c49d6c1b26e6</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>60</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <outputs>
      <output type="text" name="JSON" stage="JSON" />
    </outputs>
  </stage>
  <stage stageid="8f488472-d2dd-4bbc-a98e-07d6a494ab3f" name="Result" type="Collection">
    <subsheetid>e5aeb4cb-cd25-4535-b3be-b46681b4e6b6</subsheetid>
    <narrative></narrative>
    <displayx>90</displayx>
    <displayy>45</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>collection</datatype>
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="7923115c-5283-4694-b2c1-142afb4d3788" name="Collection To JSON" type="Code">
    <subsheetid>560472b9-cea4-41d5-bc36-c49d6c1b26e6</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>15</displayx>
    <displayy>-30</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="collection" name="data" expr="[Data]" />
    </inputs>
    <outputs>
      <output type="text" name="json" stage="JSON" />
    </outputs>
    <onsuccess>ede1f653-07f1-42eb-8616-8d2d3dfb5244</onsuccess>
    <code><![CDATA[json = convertToJSON(data)]]></code>
  </stage>
  <stage stageid="dbeac687-55ba-4b1a-9e9b-1a5f1e763886" name="Data" type="Collection">
    <subsheetid>560472b9-cea4-41d5-bc36-c49d6c1b26e6</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>90</displayx>
    <displayy>-105</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>collection</datatype>
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="60425486-0e54-4004-afef-6ccb7e96828d" name="JSON" type="Data">
    <subsheetid>560472b9-cea4-41d5-bc36-c49d6c1b26e6</subsheetid>
    <narrative></narrative>
    <displayx>75</displayx>
    <displayy>60</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>text</datatype>
    <initialvalue />
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="68820997-9906-40ef-b5f3-325f6f0a25b9" name="JSON to Collection (skipping JArray)" type="SubSheetInfo">
    <subsheetid>e53062c7-68de-4763-b37a-456688d0d607</subsheetid>
    <narrative></narrative>
    <displayx>-195</displayx>
    <displayy>-105</displayy>
    <displaywidth>150</displaywidth>
    <displayheight>90</displayheight>
    <font family="Segoe UI" size="10" style="Regular" color="000000" />
  </stage>
  <stage stageid="14799289-a9b9-4b93-aeb6-f0240547be63" name="Start" type="Start">
    <subsheetid>e53062c7-68de-4763-b37a-456688d0d607</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>-30</displayx>
    <displayy>-120</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="json" stage="json" />
    </inputs>
    <onsuccess>8cb729e4-705c-400b-8d1d-0b54dd51fb94</onsuccess>
  </stage>
  <stage stageid="21187841-67f3-4ed1-a3b0-de763bb1e801" name="End" type="End">
    <subsheetid>e53062c7-68de-4763-b37a-456688d0d607</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>-30</displayx>
    <displayy>30</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <outputs>
      <output type="collection" name="Result" stage="Result" />
    </outputs>
  </stage>
  <stage stageid="8cb729e4-705c-400b-8d1d-0b54dd51fb94" name="JSON To Collection Without JArray" type="Code">
    <subsheetid>e53062c7-68de-4763-b37a-456688d0d607</subsheetid>
    <loginhibit />
    <narrative></narrative>
    <displayx>-30</displayx>
    <displayy>-45</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <inputs>
      <input type="text" name="json" expr="[json]" />
    </inputs>
    <outputs>
      <output type="collection" name="result" stage="Result" />
    </outputs>
    <onsuccess>21187841-67f3-4ed1-a3b0-de763bb1e801</onsuccess>
    <code><![CDATA[Try
	mUseNewParseMethod = True
	result = ConvertToDataTable(json)
Finally
	mUseNewParseMethod = False
End Try]]></code>
  </stage>
  <stage stageid="b3a37b86-f505-4522-80d4-2c9e45ab723c" name="json" type="Data">
    <subsheetid>e53062c7-68de-4763-b37a-456688d0d607</subsheetid>
    <narrative></narrative>
    <displayx>45</displayx>
    <displayy>-120</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>text</datatype>
    <initialvalue />
    <private />
    <alwaysinit />
  </stage>
  <stage stageid="98ca8a8f-1ce6-4cb7-85e6-9fff8b1b06f9" name="Result" type="Collection">
    <subsheetid>e53062c7-68de-4763-b37a-456688d0d607</subsheetid>
    <narrative></narrative>
    <displayx>45</displayx>
    <displayy>30</displayy>
    <displaywidth>60</displaywidth>
    <displayheight>30</displayheight>
    <font family="Tahoma" size="10" style="Regular" color="000000" />
    <datatype>collection</datatype>
    <private />
    <alwaysinit />
  </stage>
</process>