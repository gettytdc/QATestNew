<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xml:lang="en" lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link type="text/css" href="AutomateHelp.css" rel="stylesheet" />
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <title>Stage Properties - Business Object Info</title>
</head>

<body>
    <div class="header">
        <h1 class="pagetitle">Stage Types</h1>
    </div>

    <h3>Object Information</h3>

    <p>The business object information stage provides a very similar set of configuration options to the
    <a href="frmStagePropertiesProcessInfo.htm">Process Info Stage</a>, plus some more.</p>

	<a name="GlobalCode"></a>
    <h5 class="bold">Global Code</h5>

    <p>The global code section allows you to tie together the different pieces of code written in
    <a href="frmStagePropertiesCode.htm">Code Stages</a> across your business object.</p>

    <p>Code written in the global code section forms a Microsoft VB.NET class. Functions and member
    variables declared here have scope across the entire business object, and may be referenced
    from a code stage. The methods declared in individual code stages are compiled into the same
    class and can be referenced from both the global code section and from other code stages.</p>

    <p>If using a COM object, you will find it convenient to declare, instantiate, and dispose of
    it here, so that it retains state across several code stages.</p>

    <p>The global code section allows you to reference external dynamic link libraries (dll files)
    and to declare class functions. This may be done by adding a row to the &quot;External References&quot;
    and browsing for the location of the external library.</p>

    <p>When referencing Microsoft .NET class libraries (for example the System.Xml namespace), it
    is necessary to do two things. Firstly you must browse for the appropriate external reference
    and add it as per the instructions above. Secondly you must add a namespace import. For example when
    importing System.Xml.dll, you must add System.Xml to the namespace listview.</p>

	<p>A choice of languages is available: Microsoft VB.NET or Microsoft C#.NET. Please refer to a
	Microsoft reference manual for a language specification of each language. After choosing your language you must use
	it consistently across all code stages within the current business object - you may not write some
	stages using one language and use a different language for another stage.</p>
	
	<p>You may check the validity of your code (and all code stages) by pressing the "Check Code" button.</p>
	
	<p>You can also set the runmode of the Business Object.	The Run Mode of a process is determined by the most 
	restrictive run mode of each of the business objects that it uses. A business object run mode can be one of 
	Background, Foreground or Exclusive. 
	<ul>
	<li>An exclusive process can not be run alongside any other process.</li>
	<li>A foreground process can only be run alongside background processes, only one foreground process can be run at once.</li>
	<li>A background process can be run with any other process, except exclusive processes.</li>
	</ul>
	</p>
	
	<h5 id="shared-objects" class="bold">Shared and shareable objects</h5>
	<p>Marking a Business Object as <code>shareable</code> allows its Application Model to be shared with other Business Objects.
	Business Objects which share the model of another are known as <code>shared</code>.</p>
	<p>When shareable or shared Business Objects are referenced multiple times they are able to interact with a
	single instance of the Business Object.</p>
	<p>When Action stages are used within a Process to reference actions within shared Business Objects, each call
	will be directed to a single instance of the model and associated application.</p>
	<p><i>Example: The diagram below shows that the shareable object named Object C is referenced from a number
	of places using an Action stage.  These include: the main process; within Object A; and within Object B.
	Because Object C is a shareable Business Object, only a single initialisation of the associated application
	occurs, then the Log In requested by Object A is also available for use by Object B.</i></p>

	<div style="text-align:center">
    <img width="450" src="Graphics/shared-objects1.png"/></a>
		<p>Figure 1: Demonstrates a single instance of a shared/shareable Business Object</p>
	</div>

	<p>If there is a requirement to launch a separate instance of a target application this can only be achieved
	through use of a sub-process if the Business Objects are configured with a shared application model.</p>
  <p><i>Example: The diagrams below show that irrespective of whether the automation root node is a Process or
  an Object a separate instance of the shareable/shared Business Object is provided within each sub-Process.</i></p>

	<div style="text-align:center">
    <img width="450" src="Graphics/shared-objects2.png"/></a>
		<p>Figure 2: Process initiating multiple instances of a shared/shareable Business Object using a sub-process</p>
    <img width="450" src="Graphics/shared-objects3.png"/></a>
		<p>Figure 3: Business Object initiating multiple instances of a shared/shareable Business Object using a sub-process</p>
	</div>
	
	<p>The behaviour described above is in contrast to Business Objects which are not shared or shareable. Where
	Business Objects are not shareable/shared each use of an Action stage will result in a new instance of the
	model and associated application.  This behaviour more easily supports scenarios where there is a requirement
	to have multiple instances of a given application, particularly where there is a desire to interact with them
	simultaneously.</p>
	<p><i>Example: The diagram below shows that each time that the non-shareable object named Object C is
	referenced using an Action stage, a separate instance of the object and associated application occurs.
	This means that the application Log In action requested by Object A is NOT available for use by Object B.
	In the example below, there would be three instances of Object C and the associated application.</i></p>

	<div style="text-align:center">
    <img width="450" src="Graphics/shared-objects4.png"/></a>
		<p>Figure 4: Multiple instances of a non-shareable/non-shared Business Object</p>
	</div>
	
</body>
</html>
