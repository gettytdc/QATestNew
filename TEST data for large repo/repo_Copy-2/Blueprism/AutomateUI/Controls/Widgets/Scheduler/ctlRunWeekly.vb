

Imports BluePrism.Scheduling
Imports BluePrism.Scheduling.Calendar
Imports BluePrism.AutomateAppCore

Imports UIUtil = AutomateUI.clsUserInterfaceUtils

''' Project  : Automate
''' Class    : ctlRunWeekly
''' <summary>
''' Allows the user to configure weekly running
''' </summary>
Public Class ctlRunWeekly
    Inherits UserControl
    Implements IIntervalControl

#Region "Constructors"

    Public Sub New()

        ' This call is required by the Windows Form Designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.
        comboNthWorkingDay.Items.Clear()
        comboNthWorkingDay.DisplayMember = "ItemText"
        comboNthWorkingDay.ValueMember = "ItemValue"
        Dim NthWorkingDayItems As New List(Of EnumToString)(
            {New EnumToString(NthOfMonthExtensions.GetLocalizedFriendlyName(NthOfMonth.First), NthOfMonth.First),
            New EnumToString(NthOfMonthExtensions.GetLocalizedFriendlyName(NthOfMonth.Last), NthOfMonth.Last)})
        comboNthWorkingDay.DataSource = NthWorkingDayItems

    End Sub

#End Region

#Region "IScheduleModifier implementation"

    ''' <summary>
    ''' Event fired when the schedule data has changed.
    ''' </summary>
    ''' <param name="sender">The schedule whose data has changed as a result of a
    '''  change on this class.</param>
    Public Event ScheduleDataChange(ByVal sender As SessionRunnerSchedule) _
     Implements IScheduleModifier.ScheduleDataChange

    ''' <summary>
    ''' Raises a change event for the schedule data, if this control is currently
    ''' assigned to a ctlSchedule control (which has a schedule assigned to it).
    ''' </summary>
    Private Sub RaiseScheduleChangeEvent()
        Dim ctl As ctlSchedule = clsUserInterfaceUtils.GetAncestor(Of ctlSchedule)(Me)
        If ctl IsNot Nothing Then
            RaiseEvent ScheduleDataChange(ctl.Schedule)
        End If
    End Sub

#End Region

#Region "IInterval Control Implementation"

    ''' <summary>
    ''' The actual control object that this interval control uses to display
    ''' itself. That's me, that is.
    ''' </summary>
    Public ReadOnly Property Control() As Control Implements IIntervalControl.Control
        Get
            Return Me
        End Get
    End Property

    ''' <summary>
    ''' Checks if this control supports the given interval or not.
    ''' </summary>
    ''' <param name="interval">The interval to check if the control supports it
    ''' or not.</param>
    ''' <returns>True if the given interval type is <see cref="IntervalType.Week"/>;
    ''' False otherwise.</returns>
    Public Function SupportsInterval(ByVal interval As IntervalType) As Boolean _
     Implements IIntervalControl.SupportsInterval
        Return (interval = IntervalType.Week)
    End Function

    ''' <summary>
    ''' Gets the TriggetMetaData generated by the fields on the control
    ''' </summary>
    Public Function GetData(ByVal err As ICollection(Of clsValidationError)) As TriggerMetaData _
     Implements IIntervalControl.GetData

        Dim d As New TriggerMetaData()
        d.Interval = IntervalType.Week
        d.Period = CInt(updnPeriod.Value)

        If radioOnWorkingDay.Checked Then
            ' They're going 'on {nth} working day defined in the {cal} calendar'
            ' Check that they've selected '{cal}'
            Dim obj As Object = UIUtil.GetSelectedItem(comboCalendar)
            Dim cal As ScheduleCalendar = TryCast(obj, ScheduleCalendar)

            If cal Is Nothing Then
                err.Add(New clsValidationError(comboCalendar,
                 My.Resources.ctlRunWeekly_YouMustSelectACalendarToRunOn))
            Else
                d.CalendarId = cal.Id
            End If

            ' And that they've selected {nth}
            obj = UIUtil.GetSelectedItem(comboNthWorkingDay)
            If obj IsNot Nothing Then
                d.Nth = CType(comboNthWorkingDay.SelectedValue, NthOfMonth)
            Else
                err.Add(New clsValidationError(comboNthWorkingDay,
                 My.Resources.ctlRunWeekly_YouMustSelectWhetherToRunOnTheFirstOrLastWorkingDayOfTheWeek))
            End If

            If err.Count > 0 Then Return Nothing

        ElseIf radioOnWeekday.Checked Then
            ' It's running on {day-of-week} - Since that is system controlled,
            ' it really shouldn't be unset, but make sure anyway.
            Dim day As Nullable(Of DayOfWeek) = Me.DayOfWeek
            If Not day.HasValue Then
                err.Add(New clsValidationError(My.Resources.ctlRunWeekly_TheDayOfWeekOnWhichToRunIsNotSet))
                Return Nothing
            End If
            d.Days.Add(day.Value)
        Else
            ' They haven't selected any radio button, ergo error.
            err.Add(New clsValidationError(
             My.Resources.YouMustSelectWhetherToRunOnASpecificDayOrOnDaysWithinACalendar))
            Return Nothing
        End If

        Return d

    End Function

    ''' <summary>
    ''' Populates the control from the given TriggerMetaData
    ''' </summary>
    ''' <param name="data">The TriggerMetaData to populate the control with</param>
    ''' <param name="sched">The schedule also needed to populate some controls</param>
    Public Sub Populate(ByVal data As TriggerMetaData, ByVal sched As SessionRunnerSchedule) _
     Implements IIntervalControl.Populate

        Dim store As IScheduleStore = sched.Owner.Store

        comboCalendar.Items.Clear()
        For Each cal As ScheduleCalendar In store.GetAllCalendars()
            comboCalendar.Items.Add(cal)
        Next

        updnPeriod.Value = data.Period

        If data.CalendarId <> 0 Then
            radioOnWorkingDay.Checked = True
            comboNthWorkingDay.SelectedValue = data.Nth
            comboCalendar.SelectedItem = store.GetCalendar(data.CalendarId)
        Else
            Dim day As DayOfWeek
            If data.Days.HasAtLeastOneDay(day) Then
                radioOnWeekday.Checked = True
                Me.DayOfWeek = day
            Else
                ' No data set - default to first radio button
                radioOnWeekday.Checked = True
            End If
        End If
    End Sub

    ''' <summary>
    ''' Gets/Sets the day of the week represnted in this control.
    ''' Only used internally for convenience.
    ''' </summary>
    Private Property DayOfWeek() As Nullable(Of DayOfWeek)
        Get
            Dim obj As Object = radioOnWeekday.Tag
            If obj Is Nothing Then Return Nothing

            If TypeOf obj Is DayOfWeek Then
                Return DirectCast(obj, DayOfWeek)
            End If
            Return Nothing

        End Get
        Set(ByVal value As Nullable(Of DayOfWeek))
            If value.HasValue Then
                Select Case value.Value
                    Case System.DayOfWeek.Monday
                        radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On_Mondays ' On Mondays
                    Case System.DayOfWeek.Tuesday
                        radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On_Tuesdays
                    Case System.DayOfWeek.Wednesday
                        radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On_Wednesdays
                    Case System.DayOfWeek.Thursday
                        radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On_Thursdays
                    Case System.DayOfWeek.Friday
                        radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On_Fridays
                    Case System.DayOfWeek.Saturday
                        radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On_Saturdays
                    Case System.DayOfWeek.Sunday
                        radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On_Sundays
                End Select
                radioOnWeekday.Tag = value.Value
            Else
                radioOnWeekday.Text = My.Resources.ctlRunWeekly_DayOfWeek_On ' On
                radioOnWeekday.Tag = Nothing
            End If
        End Set
    End Property

    ''' <summary>
    ''' Sets the start date needed by some controls
    ''' </summary>
    ''' <param name="d">The Date</param>
    Public Sub SetStartDate(ByVal d As Date) Implements IIntervalControl.SetStartDate
        Me.DayOfWeek = d.DayOfWeek
    End Sub

    Public Property [ReadOnly]() As Boolean Implements IIntervalControl.ReadOnly
        Get
            Return mReadonly
        End Get
        Set(ByVal value As Boolean)
            mReadonly = value

            updnPeriod.ReadOnly = value
            updnPeriod.Increment = CInt(IIf(value, 0, 1))

            radioOnWeekday.AutoCheck = Not value
            radioOnWorkingDay.AutoCheck = Not value

            clsUserInterfaceUtils.ShowReadOnlyControl(value, comboCalendar, txtCalendar)
            clsUserInterfaceUtils.ShowReadOnlyControl(value, comboNthWorkingDay, txtNthWorkingDay)
        End Set
    End Property
    Private mReadonly As Boolean


#End Region

#Region "UI Event Handlers"

    ''' <summary>
    ''' Handles the calendar combo box being changed. Sets the related radio
    ''' button if a calendar has been chosen.
    ''' </summary>
    Private Sub comboCalendar_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles comboCalendar.SelectedIndexChanged
        If TypeOf comboCalendar.SelectedItem Is ScheduleCalendar Then
            radioOnWorkingDay.Checked = True
        End If
        RaiseScheduleChangeEvent()
    End Sub

    ''' <summary>
    ''' Handler for data changing in the period text box.
    ''' </summary>
    Private Sub PeriodChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles updnPeriod.TextChanged
        RaiseScheduleChangeEvent()
    End Sub

    ''' <summary>
    ''' Handler for the radio buttons checked value changing
    ''' </summary>
    Private Sub RadioChanged(ByVal sender As Object, ByVal e As EventArgs) _
       Handles radioOnWorkingDay.CheckedChanged, radioOnWeekday.CheckedChanged
        comboCalendar.Enabled = radioOnWorkingDay.Checked
        comboNthWorkingDay.Enabled = radioOnWorkingDay.Checked
        RaiseScheduleChangeEvent()
    End Sub

    ''' <summary>
    ''' Handler for the nth working day combo box changing.
    ''' </summary>
    Private Sub NthWorkingDayChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) _
     Handles comboNthWorkingDay.SelectedIndexChanged
        RaiseScheduleChangeEvent()
    End Sub

#End Region

#Region "Mode dropdownlist class"

    Private Class EnumToString

        Public Property ItemText() As String

        Public Property ItemValue() As Object

        Public Sub New(text As String, value As Object)
            ItemText = text
            ItemValue = value
        End Sub

        Public Overrides Function ToString() As String
            Return ItemText
        End Function
    End Class

#End Region
End Class
