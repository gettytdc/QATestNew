
Imports BluePrism.Scheduling
Imports BluePrism.Scheduling.Calendar

Imports BluePrism.AutomateAppCore

Imports UIUtil = AutomateUI.clsUserInterfaceUtils

''' Project  : Automate
''' Class    : ctlRunDaily
''' <summary>
''' Allows the user to configure daily running
''' </summary>
Public Class ctlRunDaily
    Inherits System.Windows.Forms.UserControl
    Implements IIntervalControl, IScheduleModifier

#Region "IScheduleModifier implementation"

    ''' <summary>
    ''' Event fired when the schedule data has changed.
    ''' </summary>
    ''' <param name="sender">The schedule whose data has changed as a result of a
    '''  change on this class.</param>
    Public Event ScheduleDataChange(ByVal sender As SessionRunnerSchedule) _
     Implements IScheduleModifier.ScheduleDataChange

    ''' <summary>
    ''' Raises a change event for the schedule data, if this control is currently
    ''' assigned to a ctlSchedule control (which has a schedule assigned to it).
    ''' </summary>
    Private Sub RaiseScheduleChangeEvent()
        Dim ctl As ctlSchedule = clsUserInterfaceUtils.GetAncestor(Of ctlSchedule)(Me)
        If ctl IsNot Nothing Then
            RaiseEvent ScheduleDataChange(ctl.Schedule)
        End If
    End Sub

#End Region

#Region "IInterval Control Implementation"

    ''' <summary>
    ''' The actual control object that this interval control uses to display
    ''' itself. That's me, that is.
    ''' </summary>
    Public ReadOnly Property Control() As Control Implements IIntervalControl.Control
        Get
            Return Me
        End Get
    End Property

    ''' <summary>
    ''' Checks if this control supports the given interval or not.
    ''' </summary>
    ''' <param name="interval">The interval to check if the control supports it
    ''' or not.</param>
    ''' <returns>True if the given interval type is <see cref="IntervalType.Day"/>;
    ''' False otherwise.</returns>
    Public Function SupportsInterval(ByVal interval As IntervalType) As Boolean _
     Implements IIntervalControl.SupportsInterval
        Return (interval = IntervalType.Day)
    End Function

    ''' <summary>
    ''' Gets the TriggetMetaData generated by the fields on the control
    ''' </summary>
    Public Function GetData(ByVal err As ICollection(Of clsValidationError)) As TriggerMetaData _
     Implements IIntervalControl.GetData

        Dim d As New TriggerMetaData()

        If cbOnWorkingDaysOnly.Checked Then
            Dim cal As ScheduleCalendar = _
             TryCast(UIUtil.GetSelectedItem(comboCalendar), ScheduleCalendar)
            If cal Is Nothing Then
                err.Add(New clsValidationError(comboCalendar,
                 My.Resources.YouMustSelectACalendarToRunOn))
                Return Nothing
            End If
            d.CalendarId = cal.Id

        End If

        d.Interval = IntervalType.Day
        d.Period = CInt(updnPeriod.Value)
        Return d
    End Function

    ''' <summary>
    ''' Populates the control from the given TriggerMetaData
    ''' </summary>
    ''' <param name="data">The TriggerMetaData to populate the control with</param>
    ''' <param name="sched">The schedule also needed to populate some controls</param>
    Public Sub Populate(ByVal data As TriggerMetaData, ByVal sched As SessionRunnerSchedule) _
     Implements IIntervalControl.Populate
        Dim store As IScheduleStore = sched.Owner.Store

        comboCalendar.Items.Clear()
        For Each cal As ScheduleCalendar In store.GetAllCalendars()
            comboCalendar.Items.Add(cal)
        Next

        If data.CalendarId <> 0 Then
            cbOnWorkingDaysOnly.Checked = True
            comboCalendar.Enabled = True
            comboCalendar.SelectedItem = store.GetCalendar(data.CalendarId)
        Else
            cbOnWorkingDaysOnly.Checked = False
            comboCalendar.Enabled = False
        End If

        updnPeriod.Value = data.Period

    End Sub

    ''' <summary>
    ''' Sets the start date needed by some controls
    ''' </summary>
    ''' <param name="d">The Date</param>
    Public Sub SetStartDate(ByVal d As Date) Implements IIntervalControl.SetStartDate
    End Sub

    Public Property [ReadOnly]() As Boolean Implements IIntervalControl.ReadOnly
        Get
            Return mReadonly
        End Get
        Set(ByVal value As Boolean)
            mReadonly = value
            updnPeriod.ReadOnly = value
            updnPeriod.Increment = CInt(IIf(value, 0, 1))
            cbOnWorkingDaysOnly.AutoCheck = Not value

            clsUserInterfaceUtils.ShowReadOnlyControl(value, comboCalendar, txtCalendar)
        End Set
    End Property
    Private mReadonly As Boolean
#End Region

#Region "UI Event Handlers"

    ''' <summary>
    ''' Handler for data changing in the period text box.
    ''' </summary>
    Private Sub PeriodChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles updnPeriod.TextChanged
        RaiseScheduleChangeEvent()
    End Sub

    ''' <summary>
    ''' Handler for working days only's checked state being changed.
    ''' </summary>
    Private Sub OnWorkingDaysOnlyChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles cbOnWorkingDaysOnly.CheckedChanged
        comboCalendar.Enabled = cbOnWorkingDaysOnly.Checked
        RaiseScheduleChangeEvent()
    End Sub

    ''' <summary>
    ''' Handler for the calendar combo box being changed.
    ''' </summary>
    Private Sub CalendarChanged(ByVal sender As Object, ByVal e As EventArgs) _
     Handles comboCalendar.SelectedIndexChanged
        RaiseScheduleChangeEvent()
    End Sub
#End Region

End Class
