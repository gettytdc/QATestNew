<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BluePrism.Utilities.Functional</name>
    </assembly>
    <members>
        <member name="T:BluePrism.Utilities.Functional.AsyncResult`1">
            <summary>
            Provides methods for handling results of async functions
            </summary>
            <typeparam name="T">The type of the result value</typeparam>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.Bind``1(System.Func{`0,BluePrism.Utilities.Functional.Result{``0}})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.BindAsync``1(System.Func{`0,System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result{``0}}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.Bind(System.Func{`0,BluePrism.Utilities.Functional.Result})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.BindAsync(System.Func{`0,System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.Map``1(System.Func{`0,``0})">
            <summary>
            Executes the given function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.MapAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the given async function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.MapAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Executes the given async function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>A successful result or, if in a fail state, a result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.ValueOr(System.Func{BluePrism.Utilities.Functional.Result{`0},`0})">
            <summary>
            Returns a Task which returns the value of the result if in a success state, or the given value if in a failed state.
            </summary>
            <param name="failureValue">The failure value.</param>
            <returns>The value of the result if in a success state, or the given value if in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.GetAwaiter">
            <summary>
            Gets an awaiter.
            </summary>
            <returns>An awaiter for this object.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult`1.op_Implicit(BluePrism.Utilities.Functional.AsyncResult{`0})~System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result{`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:BluePrism.Utilities.Functional.AsyncResult`1"/> to <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="this">The result to convert from.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.AsyncResult">
            <summary>
            Provides methods for handling results of async functions
            </summary>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.Bind``1(System.Func{BluePrism.Utilities.Functional.Result{``0}})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.BindAsync``1(System.Func{System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result{``0}}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.Bind(System.Func{BluePrism.Utilities.Functional.Result})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.BindAsync(System.Func{System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.Map``1(System.Func{``0})">
            <summary>
            Executes the given function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.MapAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the given async function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.MapAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the given async function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>A successful result or, if in a fail state, a result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.GetAwaiter">
            <summary>
            Gets an awaiter.
            </summary>
            <returns>An awaiter for this object.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResult.op_Implicit(BluePrism.Utilities.Functional.AsyncResult)~System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result}">
            <summary>
            Performs an implicit conversion from <see cref="T:BluePrism.Utilities.Functional.AsyncResult"/> to <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="this">The result to convert from.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.AsyncResultAwaiter">
            <summary>
            Awaiter for <see cref="T:BluePrism.Utilities.Functional.AsyncResult"/>
            </summary>
            <seealso cref="T:System.Runtime.CompilerServices.INotifyCompletion" />
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResultAwaiter.#ctor(System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result})">
            <summary>
            Initializes a new instance of the <see cref="T:BluePrism.Utilities.Functional.AsyncResultAwaiter"/> struct.
            </summary>
            <param name="task">The task to await.</param>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResultAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param>
        </member>
        <member name="P:BluePrism.Utilities.Functional.AsyncResultAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is completed.
            </summary>
            <value>
              <c>true</c> if this instance is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResultAwaiter.GetResult">
            <summary>
            Gets the result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.AsyncResultAwaiter`1">
            <summary>
            Awaiter for <see cref="T:BluePrism.Utilities.Functional.AsyncResult`1"/>
            </summary>
            <typeparam name="T">The type contained in the result</typeparam>
            <seealso cref="T:System.Runtime.CompilerServices.INotifyCompletion" />
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResultAwaiter`1.#ctor(System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:BluePrism.Utilities.Functional.AsyncResultAwaiter`1"/> struct.
            </summary>
            <param name="task">The task to await.</param>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResultAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param>
        </member>
        <member name="P:BluePrism.Utilities.Functional.AsyncResultAwaiter`1.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is completed.
            </summary>
            <value>
              <c>true</c> if this instance is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BluePrism.Utilities.Functional.AsyncResultAwaiter`1.GetResult">
            <summary>
            Gets the result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.CompoundTask`1">
            <summary>
            A task which can be appended with other tasks or methods before being awaited.
            </summary>
            <typeparam name="T">The type returned from the task</typeparam>
        </member>
        <member name="M:BluePrism.Utilities.Functional.CompoundTask`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BluePrism.Utilities.Functional.CompoundTask`1"/> struct.
            </summary>
            <param name="task">The first task.</param>
        </member>
        <member name="M:BluePrism.Utilities.Functional.CompoundTask`1.Map``1(System.Func{`0,``0})">
            <summary>
            Schedules the given function to be executed after the current task when awaited.
            </summary>
            <typeparam name="TOut">The type returned by the function.</typeparam>
            <param name="func">The function.</param>
            <returns>A new <see cref="T:BluePrism.Utilities.Functional.CompoundTask`1"/></returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.CompoundTask`1.MapAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Schedules the given async function to be executed after the current task when awaited.
            </summary>
            <typeparam name="TOut">The type returned by the function.</typeparam>
            <param name="func">The function.</param>
            <returns>A new <see cref="T:BluePrism.Utilities.Functional.CompoundTask`1"/></returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.CompoundTask`1.Tee(System.Action{`0})">
            <summary>
            Schedules the given function to be executed after the current task when awaited.
            </summary>
            <param name="func">The function.</param>
            <returns>A new <see cref="T:BluePrism.Utilities.Functional.CompoundTask`1"/></returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.CompoundTask`1.TeeAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Schedules the given async function to be executed after the current task when awaited.
            </summary>
            <param name="func">The function.</param>
            <returns>A new <see cref="T:BluePrism.Utilities.Functional.CompoundTask`1"/></returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.CompoundTask`1.GetAwaiter">
            <summary>
            Gets an awaiter.
            </summary>
            <returns>An awaiter for this object.</returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.FunctionalExtensionMethods">
            <summary>
            Contains extension methods to assist with functional programming in non-functional languages
            </summary>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.Map``2(``0,System.Func{``0,``1})">
            <summary>
            Maps the input value to an output using the given function.
            </summary>
            <typeparam name="TIn">The type of the input.</typeparam>
            <typeparam name="TOut">The type of the result.</typeparam>
            <param name="this">The value to map.</param>
            <param name="func">The mapping function.</param>
            <returns>The result of a call to <paramref name="func"/> passing <paramref name="this"/>.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.MapAsync``2(``0,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Maps the input value to an output using the given async function.
            </summary>
            <typeparam name="TIn">The type of the input.</typeparam>
            <typeparam name="TOut">The type of the result.</typeparam>
            <param name="this">The value to map.</param>
            <param name="func">The mapping function.</param>
            <returns>The result of a call to <paramref name="func"/> passing <paramref name="this"/>.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.Tee``1(``0,System.Action{``0})">
            <summary>
            'T's the execution to perform the given function returning the original value
            </summary>
            <typeparam name="TInOut">The type of the value.</typeparam>
            <param name="this">The value to pass to the function.</param>
            <param name="func">The function.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.Tee``2(``0,System.Func{``0,``1})">
            <summary>
            'T's the execution to perform the given function returning the original value
            </summary>
            <typeparam name="TInOut">The type of the value.</typeparam>
            <typeparam name="TIgnored">Not used.</typeparam>
            <param name="this">The value to pass to the function.</param>
            <param name="func">The function.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.TeeAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            'T's the execution to perform the given function returning the original value
            </summary>
            <typeparam name="TInOut">The type of the value.</typeparam>
            <param name="this">The value to pass to the function.</param>
            <param name="func">The function.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.Use``2(``0,System.Func{``0,``1})">
            <summary>
            Calls the given function with this object and then disposes the object returning the result of the function.
            </summary>
            <typeparam name="TDisposable">The type of the disposable object.</typeparam>
            <typeparam name="TOut">The type returned by the function.</typeparam>
            <param name="this">The disposable object to wrap in a using statement.</param>
            <param name="func">The function to call.</param>
            <returns>The result of a call to <paramref name="func"/> passing <paramref name="this"/>.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.Use``1(``0,System.Action{``0})">
            <summary>
            Calls the given function with this object and then disposes the object.
            </summary>
            <typeparam name="TDisposable">The type of the disposable object.</typeparam>
            <param name="this">The disposable object to wrap in a using statement.</param>
            <param name="func">The function to call.</param>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the given function for each item in the collection.
            </summary>
            <typeparam name="TItem">The type of the value.</typeparam>
            <param name="this">The collection of values to pass to the function.</param>
            <param name="func">The function.</param>
            <returns>The original collection</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the given function for each item in the collection.
            </summary>
            <typeparam name="TItem">The type of the value.</typeparam>
            <param name="this">The collection of values to pass to the function.</param>
            <param name="func">The function.</param>
            <returns>The original collection</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs the given function for each item in the collection.
            </summary>
            <typeparam name="TItem">The type of the value.</typeparam>
            <typeparam name="TIgnored">Not used.</typeparam>
            <param name="this">The collection of values to pass to the function.</param>
            <param name="func">The function.</param>
            <returns>The original collection</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Performs the given function for each item in the collection.
            </summary>
            <typeparam name="TItem">The type of the value.</typeparam>
            <typeparam name="TIgnored">Not used.</typeparam>
            <param name="this">The collection of values to pass to the function.</param>
            <param name="func">The function.</param>
            <returns>The original collection</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.Evaluate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Evaluates the enumerable.
            </summary>
            <typeparam name="T">The type of item in the enumerable.</typeparam>
            <param name="this">The enumerable.</param>
        </member>
        <member name="M:BluePrism.Utilities.Functional.FunctionalExtensionMethods.ToCompoundTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts the task to a compound task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns></returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.Maybe`1">
            <summary>
            An object which may or may not have a value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Maybe`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value>
              <c>true</c> if this instance has a value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Maybe`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.InvalidOperationException">Maybe does not contain a value</exception>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Maybe`1.Some(`0)">
            <summary>
            Creates a Maybe containing the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A Maybe containing the given value.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Maybe`1.None">
            <summary>
            Creates a Maybe without a value.
            </summary>
            <returns>A Maybe without a value.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Maybe`1.Map``1(System.Func{`0,``0})">
            <summary>
            Maps the current value to an output using the given function.
            </summary>
            <typeparam name="TOut">The type of the result.</typeparam>
            <param name="func">The mapping function.</param>
            <returns>If this Maybe has a value, the result of a call to <paramref name="func"/> passing the current value; otherwise, an empty Maybe</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Maybe`1.Tee(System.Action{`0})">
            <summary>
            'T's the execution to perform the given function returning the original value
            </summary>
            <param name="func">The function.</param>
            <returns>The original value</returns>
            <remarks>Only executes the function if a value is present</remarks>
        </member>
        <member name="T:BluePrism.Utilities.Functional.Result`1">
            <summary>
            Provides methods for handling results of functions
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Result`1.IsSuccess">
            <summary>
            Gets a value indicating whether this instance is a success.
            </summary>
            <value>
              <c>true</c> if this instance is a success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Result`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value>
              <c>true</c> if this instance has a value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Result`1.Error">
            <summary>
            Gets the error associated with this result.
            </summary>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Result`1.Value">
            <summary>
            Gets the value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Result does not contain a value</exception>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.Succeed(`0)">
            <summary>
            Creates a new successful result with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:BluePrism.Utilities.Functional.Result`1"/></returns>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.Fail(BluePrism.Utilities.Functional.ResultError)">
            <summary>
            Creates a new failed result with the given error.
            </summary>
            <param name="error">The error.</param>
            <returns>A <see cref="T:BluePrism.Utilities.Functional.Result`1"/></returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.Bind``1(System.Func{`0,BluePrism.Utilities.Functional.Result{``0}})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.BindAsync``1(System.Func{`0,System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result{``0}}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.Bind(System.Func{`0,BluePrism.Utilities.Functional.Result})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.BindAsync(System.Func{`0,System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.Map``1(System.Func{`0,``0})">
            <summary>
            Executes the given function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.MapAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the given async function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.MapAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Executes the given async function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>A successful result or, if in a fail state, a result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.Tee(System.Action{`0})">
            <summary>
            'T's the execution to perform the given function returning the original value if the result is in a success state
            </summary>
            <param name="func">The function.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.TeeAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            'T's the execution to perform the given async function returning the original value if the result is in a success state
            </summary>
            <param name="func">The function.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.Always(System.Action{`0})">
            <summary>
            Executes the given function regardless of whether the result is in a success state.
            </summary>
            <param name="func">The function.</param>
            <returns>The original result</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.AlwaysAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Executes the given function regardless of whether the result is in a success state.
            </summary>
            <param name="func">The function.</param>
            <returns>The original result</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.ValueOr(System.Func{BluePrism.Utilities.Functional.Result{`0},`0})">
            <summary>
            Returns the value of the result if in a success state, or the given value if in a failed state.
            </summary>
            <param name="failureValue">The failure value.</param>
            <returns>The value of the result if in a success state, or the given value if in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result`1.op_Implicit(BluePrism.Utilities.Functional.Result{`0})~BluePrism.Utilities.Functional.Result">
            <summary>
            Performs an implicit conversion from <see cref="T:BluePrism.Utilities.Functional.Result`1"/> to <see cref="T:BluePrism.Utilities.Functional.Result"/>.
            </summary>
            <param name="result">The result to convert.</param>
            <returns>
            The converted result.
            </returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.Result">
            <summary>
            Provides methods for handling results of functions
            </summary>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Result.IsSuccess">
            <summary>
            Gets a value indicating whether this instance is a success.
            </summary>
            <value>
              <c>true</c> if this instance is a success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BluePrism.Utilities.Functional.Result.Error">
            <summary>
            Gets the error message associated with this result.
            </summary>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Succeed">
            <summary>
            Creates a new successful result.
            </summary>
            <returns>A <see cref="T:BluePrism.Utilities.Functional.Result"/></returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Succeed``1(``0)">
            <summary>
            Creates a new successful result with the given value.
            </summary>
            <typeparam name="T">The type stored in the result.</typeparam>
            <param name="value">The value.</param>
            <returns>A <see cref="T:BluePrism.Utilities.Functional.Result`1" /></returns>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Fail(BluePrism.Utilities.Functional.ResultError)">
            <summary>
            Creates a new failed result with the given error.
            </summary>
            <param name="error">The error.</param>
            <returns>A <see cref="T:BluePrism.Utilities.Functional.Result"/></returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Bind``1(System.Func{BluePrism.Utilities.Functional.Result{``0}})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.BindAsync``1(System.Func{System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result{``0}}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Bind(System.Func{BluePrism.Utilities.Functional.Result})">
            <summary>
            Executes the given result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.BindAsync(System.Func{System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result}})">
            <summary>
            Executes the given async result function if the result is in a success state.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function or, if in a fail state, an untyped result in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Map``1(System.Func{``0})">
            <summary>
            Executes the given function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.MapAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the given async function if the result is in a success state.
            </summary>
            <typeparam name="TOut">The type of the new result.</typeparam>
            <param name="func">The function to execute.</param>
            <returns>The result of the given function wrapped in a successful result or, if in a fail state, a result of the return type in a failed state.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Tee(System.Action)">
            <summary>
            'T's the execution to perform the given function returning the original value if the result is in a success state
            </summary>
            <param name="func">The function.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.TeeAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            'T's the execution to perform the given async function returning the original value if the result is in a success state
            </summary>
            <param name="func">The function.</param>
            <returns>The original value</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.Always(System.Action)">
            <summary>
            Executes the given function regardless of whether the result is in a success state.
            </summary>
            <param name="func">The function.</param>
            <returns>The original result</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.Result.AlwaysAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the given function regardless of whether the result is in a success state.
            </summary>
            <param name="func">The function.</param>
            <returns>The original result</returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.ResultError">
            <summary>
            Base class for representing errors in <see cref="T:BluePrism.Utilities.Functional.Result"/>s
            </summary>
        </member>
        <member name="P:BluePrism.Utilities.Functional.ResultError.Message">
            <summary>
            Gets the message describing the error.
            </summary>
        </member>
        <member name="P:BluePrism.Utilities.Functional.ResultError.Data">
            <summary>
            Gets any data associated with the result.
            </summary>
        </member>
        <member name="M:BluePrism.Utilities.Functional.ResultError.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.ResultError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.ResultError.Equals(BluePrism.Utilities.Functional.ResultError)">
            <summary>
            Determines whether the specified <see cref="T:BluePrism.Utilities.Functional.ResultError" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:BluePrism.Utilities.Functional.ResultError" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:BluePrism.Utilities.Functional.ResultError" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.ResultError.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:BluePrism.Utilities.Functional.ResultExtensionMethods">
            <summary>
            Contains methods for helping work with results.
            </summary>
        </member>
        <member name="M:BluePrism.Utilities.Functional.ResultExtensionMethods.ToResult``1(``0)">
            <summary>
            Converts the given value to a <see cref="T:BluePrism.Utilities.Functional.Result`1"/> containing the value.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="this">The value to convert.</param>
            <returns>A result containing the value.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.ResultExtensionMethods.ToAsyncResult``1(System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result{``0}})">
            <summary>
            Converts the given task to a <see cref="T:BluePrism.Utilities.Functional.AsyncResult`1"/> containing the task.
            </summary>
            <typeparam name="T">The type of the value returned by the task</typeparam>
            <param name="this">The task to convert.</param>
            <returns>A result containing the task.</returns>
        </member>
        <member name="M:BluePrism.Utilities.Functional.ResultExtensionMethods.ToAsyncResult(System.Threading.Tasks.Task{BluePrism.Utilities.Functional.Result})">
            <summary>
            Converts the given task to a <see cref="T:BluePrism.Utilities.Functional.AsyncResult"/> containing the task.
            </summary>
            <param name="this">The task to convert.</param>
            <returns>A result containing the task.</returns>
        </member>
    </members>
</doc>
